
MODBUS2024ALT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005924  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08005afc  08005afc  00006afc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b3c  08005b3c  0000720c  2**0
                  CONTENTS
  4 .ARM          00000008  08005b3c  08005b3c  00006b3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005b44  08005b44  0000720c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b44  08005b44  00006b44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005b48  08005b48  00006b48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000020c  20000000  08005b4c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008e4  2000020c  08005d58  0000720c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000af0  08005d58  00007af0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000720c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015305  00000000  00000000  0000723c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002869  00000000  00000000  0001c541  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010f8  00000000  00000000  0001edb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d4d  00000000  00000000  0001fea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000263d1  00000000  00000000  00020bf5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000144f9  00000000  00000000  00046fc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fc0a8  00000000  00000000  0005b4bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00157567  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004844  00000000  00000000  001575ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  0015bdf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000020c 	.word	0x2000020c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08005ae4 	.word	0x08005ae4

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000210 	.word	0x20000210
 8000214:	08005ae4 	.word	0x08005ae4

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b96a 	b.w	8000504 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	460c      	mov	r4, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14e      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000254:	4694      	mov	ip, r2
 8000256:	458c      	cmp	ip, r1
 8000258:	4686      	mov	lr, r0
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	d962      	bls.n	8000326 <__udivmoddi4+0xde>
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0320 	rsb	r3, r2, #32
 8000266:	4091      	lsls	r1, r2
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000270:	4319      	orrs	r1, r3
 8000272:	fa00 fe02 	lsl.w	lr, r0, r2
 8000276:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800027a:	fa1f f68c 	uxth.w	r6, ip
 800027e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000282:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000286:	fb07 1114 	mls	r1, r7, r4, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb04 f106 	mul.w	r1, r4, r6
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f104 30ff 	add.w	r0, r4, #4294967295
 800029e:	f080 8112 	bcs.w	80004c6 <__udivmoddi4+0x27e>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 810f 	bls.w	80004c6 <__udivmoddi4+0x27e>
 80002a8:	3c02      	subs	r4, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a59      	subs	r1, r3, r1
 80002ae:	fa1f f38e 	uxth.w	r3, lr
 80002b2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb00 f606 	mul.w	r6, r0, r6
 80002c2:	429e      	cmp	r6, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x94>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ce:	f080 80fc 	bcs.w	80004ca <__udivmoddi4+0x282>
 80002d2:	429e      	cmp	r6, r3
 80002d4:	f240 80f9 	bls.w	80004ca <__udivmoddi4+0x282>
 80002d8:	4463      	add	r3, ip
 80002da:	3802      	subs	r0, #2
 80002dc:	1b9b      	subs	r3, r3, r6
 80002de:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002e2:	2100      	movs	r1, #0
 80002e4:	b11d      	cbz	r5, 80002ee <__udivmoddi4+0xa6>
 80002e6:	40d3      	lsrs	r3, r2
 80002e8:	2200      	movs	r2, #0
 80002ea:	e9c5 3200 	strd	r3, r2, [r5]
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d905      	bls.n	8000302 <__udivmoddi4+0xba>
 80002f6:	b10d      	cbz	r5, 80002fc <__udivmoddi4+0xb4>
 80002f8:	e9c5 0100 	strd	r0, r1, [r5]
 80002fc:	2100      	movs	r1, #0
 80002fe:	4608      	mov	r0, r1
 8000300:	e7f5      	b.n	80002ee <__udivmoddi4+0xa6>
 8000302:	fab3 f183 	clz	r1, r3
 8000306:	2900      	cmp	r1, #0
 8000308:	d146      	bne.n	8000398 <__udivmoddi4+0x150>
 800030a:	42a3      	cmp	r3, r4
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xcc>
 800030e:	4290      	cmp	r0, r2
 8000310:	f0c0 80f0 	bcc.w	80004f4 <__udivmoddi4+0x2ac>
 8000314:	1a86      	subs	r6, r0, r2
 8000316:	eb64 0303 	sbc.w	r3, r4, r3
 800031a:	2001      	movs	r0, #1
 800031c:	2d00      	cmp	r5, #0
 800031e:	d0e6      	beq.n	80002ee <__udivmoddi4+0xa6>
 8000320:	e9c5 6300 	strd	r6, r3, [r5]
 8000324:	e7e3      	b.n	80002ee <__udivmoddi4+0xa6>
 8000326:	2a00      	cmp	r2, #0
 8000328:	f040 8090 	bne.w	800044c <__udivmoddi4+0x204>
 800032c:	eba1 040c 	sub.w	r4, r1, ip
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	fa1f f78c 	uxth.w	r7, ip
 8000338:	2101      	movs	r1, #1
 800033a:	fbb4 f6f8 	udiv	r6, r4, r8
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb08 4416 	mls	r4, r8, r6, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb07 f006 	mul.w	r0, r7, r6
 800034e:	4298      	cmp	r0, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x11c>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 34ff 	add.w	r4, r6, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x11a>
 800035c:	4298      	cmp	r0, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 8000362:	4626      	mov	r6, r4
 8000364:	1a1c      	subs	r4, r3, r0
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb4 f0f8 	udiv	r0, r4, r8
 800036e:	fb08 4410 	mls	r4, r8, r0, r4
 8000372:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000376:	fb00 f707 	mul.w	r7, r0, r7
 800037a:	429f      	cmp	r7, r3
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x148>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 34ff 	add.w	r4, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x146>
 8000388:	429f      	cmp	r7, r3
 800038a:	f200 80b0 	bhi.w	80004ee <__udivmoddi4+0x2a6>
 800038e:	4620      	mov	r0, r4
 8000390:	1bdb      	subs	r3, r3, r7
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0x9c>
 8000398:	f1c1 0620 	rsb	r6, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 f706 	lsr.w	r7, r2, r6
 80003a2:	431f      	orrs	r7, r3
 80003a4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a8:	fa04 f301 	lsl.w	r3, r4, r1
 80003ac:	ea43 030c 	orr.w	r3, r3, ip
 80003b0:	40f4      	lsrs	r4, r6
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	0c38      	lsrs	r0, r7, #16
 80003b8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003bc:	fbb4 fef0 	udiv	lr, r4, r0
 80003c0:	fa1f fc87 	uxth.w	ip, r7
 80003c4:	fb00 441e 	mls	r4, r0, lr, r4
 80003c8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003cc:	fb0e f90c 	mul.w	r9, lr, ip
 80003d0:	45a1      	cmp	r9, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	d90a      	bls.n	80003ee <__udivmoddi4+0x1a6>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003de:	f080 8084 	bcs.w	80004ea <__udivmoddi4+0x2a2>
 80003e2:	45a1      	cmp	r9, r4
 80003e4:	f240 8081 	bls.w	80004ea <__udivmoddi4+0x2a2>
 80003e8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	eba4 0409 	sub.w	r4, r4, r9
 80003f2:	fa1f f983 	uxth.w	r9, r3
 80003f6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003fa:	fb00 4413 	mls	r4, r0, r3, r4
 80003fe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000402:	fb03 fc0c 	mul.w	ip, r3, ip
 8000406:	45a4      	cmp	ip, r4
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1d2>
 800040a:	193c      	adds	r4, r7, r4
 800040c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000410:	d267      	bcs.n	80004e2 <__udivmoddi4+0x29a>
 8000412:	45a4      	cmp	ip, r4
 8000414:	d965      	bls.n	80004e2 <__udivmoddi4+0x29a>
 8000416:	3b02      	subs	r3, #2
 8000418:	443c      	add	r4, r7
 800041a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041e:	fba0 9302 	umull	r9, r3, r0, r2
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	429c      	cmp	r4, r3
 8000428:	46ce      	mov	lr, r9
 800042a:	469c      	mov	ip, r3
 800042c:	d351      	bcc.n	80004d2 <__udivmoddi4+0x28a>
 800042e:	d04e      	beq.n	80004ce <__udivmoddi4+0x286>
 8000430:	b155      	cbz	r5, 8000448 <__udivmoddi4+0x200>
 8000432:	ebb8 030e 	subs.w	r3, r8, lr
 8000436:	eb64 040c 	sbc.w	r4, r4, ip
 800043a:	fa04 f606 	lsl.w	r6, r4, r6
 800043e:	40cb      	lsrs	r3, r1
 8000440:	431e      	orrs	r6, r3
 8000442:	40cc      	lsrs	r4, r1
 8000444:	e9c5 6400 	strd	r6, r4, [r5]
 8000448:	2100      	movs	r1, #0
 800044a:	e750      	b.n	80002ee <__udivmoddi4+0xa6>
 800044c:	f1c2 0320 	rsb	r3, r2, #32
 8000450:	fa20 f103 	lsr.w	r1, r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa24 f303 	lsr.w	r3, r4, r3
 800045c:	4094      	lsls	r4, r2
 800045e:	430c      	orrs	r4, r1
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa00 fe02 	lsl.w	lr, r0, r2
 8000468:	fa1f f78c 	uxth.w	r7, ip
 800046c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000470:	fb08 3110 	mls	r1, r8, r0, r3
 8000474:	0c23      	lsrs	r3, r4, #16
 8000476:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047a:	fb00 f107 	mul.w	r1, r0, r7
 800047e:	4299      	cmp	r1, r3
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x24c>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 36ff 	add.w	r6, r0, #4294967295
 800048a:	d22c      	bcs.n	80004e6 <__udivmoddi4+0x29e>
 800048c:	4299      	cmp	r1, r3
 800048e:	d92a      	bls.n	80004e6 <__udivmoddi4+0x29e>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1a5b      	subs	r3, r3, r1
 8000496:	b2a4      	uxth	r4, r4
 8000498:	fbb3 f1f8 	udiv	r1, r3, r8
 800049c:	fb08 3311 	mls	r3, r8, r1, r3
 80004a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a4:	fb01 f307 	mul.w	r3, r1, r7
 80004a8:	42a3      	cmp	r3, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x276>
 80004ac:	eb1c 0404 	adds.w	r4, ip, r4
 80004b0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004b4:	d213      	bcs.n	80004de <__udivmoddi4+0x296>
 80004b6:	42a3      	cmp	r3, r4
 80004b8:	d911      	bls.n	80004de <__udivmoddi4+0x296>
 80004ba:	3902      	subs	r1, #2
 80004bc:	4464      	add	r4, ip
 80004be:	1ae4      	subs	r4, r4, r3
 80004c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c4:	e739      	b.n	800033a <__udivmoddi4+0xf2>
 80004c6:	4604      	mov	r4, r0
 80004c8:	e6f0      	b.n	80002ac <__udivmoddi4+0x64>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e706      	b.n	80002dc <__udivmoddi4+0x94>
 80004ce:	45c8      	cmp	r8, r9
 80004d0:	d2ae      	bcs.n	8000430 <__udivmoddi4+0x1e8>
 80004d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004da:	3801      	subs	r0, #1
 80004dc:	e7a8      	b.n	8000430 <__udivmoddi4+0x1e8>
 80004de:	4631      	mov	r1, r6
 80004e0:	e7ed      	b.n	80004be <__udivmoddi4+0x276>
 80004e2:	4603      	mov	r3, r0
 80004e4:	e799      	b.n	800041a <__udivmoddi4+0x1d2>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e7d4      	b.n	8000494 <__udivmoddi4+0x24c>
 80004ea:	46d6      	mov	lr, sl
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1a6>
 80004ee:	4463      	add	r3, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e74d      	b.n	8000390 <__udivmoddi4+0x148>
 80004f4:	4606      	mov	r6, r0
 80004f6:	4623      	mov	r3, r4
 80004f8:	4608      	mov	r0, r1
 80004fa:	e70f      	b.n	800031c <__udivmoddi4+0xd4>
 80004fc:	3e02      	subs	r6, #2
 80004fe:	4463      	add	r3, ip
 8000500:	e730      	b.n	8000364 <__udivmoddi4+0x11c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <modbus_1t5_Timeout>:
void Modbus_frame_response();
void modbus_ErrorTimeout(UART_HandleTypeDef* huart);

// function for interrupt
void modbus_1t5_Timeout()
{
 8000508:	b480      	push	{r7}
 800050a:	af00      	add	r7, sp, #0
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 800050c:	4b0d      	ldr	r3, [pc, #52]	@ (8000544 <modbus_1t5_Timeout+0x3c>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	2201      	movs	r2, #1
 8000512:	751a      	strb	r2, [r3, #20]
	//set 3t5 Timer
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 8000514:	4b0b      	ldr	r3, [pc, #44]	@ (8000544 <modbus_1t5_Timeout+0x3c>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	691b      	ldr	r3, [r3, #16]
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	2200      	movs	r2, #0
 800051e:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_ENABLE(hModbus->htim);
 8000520:	4b08      	ldr	r3, [pc, #32]	@ (8000544 <modbus_1t5_Timeout+0x3c>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	691b      	ldr	r3, [r3, #16]
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	681a      	ldr	r2, [r3, #0]
 800052a:	4b06      	ldr	r3, [pc, #24]	@ (8000544 <modbus_1t5_Timeout+0x3c>)
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	691b      	ldr	r3, [r3, #16]
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	f042 0201 	orr.w	r2, r2, #1
 8000536:	601a      	str	r2, [r3, #0]
}
 8000538:	bf00      	nop
 800053a:	46bd      	mov	sp, r7
 800053c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop
 8000544:	20000228 	.word	0x20000228

08000548 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 8000548:	b480      	push	{r7}
 800054a:	b083      	sub	sp, #12
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8000550:	4b04      	ldr	r3, [pc, #16]	@ (8000564 <modbus_3t5_Timeout+0x1c>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	2201      	movs	r2, #1
 8000556:	755a      	strb	r2, [r3, #21]

}
 8000558:	bf00      	nop
 800055a:	370c      	adds	r7, #12
 800055c:	46bd      	mov	sp, r7
 800055e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000562:	4770      	bx	lr
 8000564:	20000228 	.word	0x20000228

08000568 <modbus_ErrorTimeout>:

void modbus_ErrorTimeout(UART_HandleTypeDef* huart)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
	if(HAL_UART_GetError(huart)==HAL_UART_ERROR_RTO)
 8000570:	6878      	ldr	r0, [r7, #4]
 8000572:	f004 f955 	bl	8004820 <HAL_UART_GetError>
 8000576:	4603      	mov	r3, r0
 8000578:	2b20      	cmp	r3, #32
 800057a:	d101      	bne.n	8000580 <modbus_ErrorTimeout+0x18>
	{
		modbus_1t5_Timeout();
 800057c:	f7ff ffc4 	bl	8000508 <modbus_1t5_Timeout>

	}
}
 8000580:	bf00      	nop
 8000582:	3708      	adds	r7, #8
 8000584:	46bd      	mov	sp, r7
 8000586:	bd80      	pop	{r7, pc}

08000588 <Modbus_init>:



void Modbus_init(ModbusHandleTypedef* hmodbus,u16u8_t* RegisterStartAddress)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
 8000590:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 8000592:	4a25      	ldr	r2, [pc, #148]	@ (8000628 <Modbus_init+0xa0>)
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 8000598:	4b23      	ldr	r3, [pc, #140]	@ (8000628 <Modbus_init+0xa0>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	683a      	ldr	r2, [r7, #0]
 800059e:	605a      	str	r2, [r3, #4]

	//config timer interrupt

	HAL_TIM_RegisterCallback(hmodbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	691b      	ldr	r3, [r3, #16]
 80005a4:	4a21      	ldr	r2, [pc, #132]	@ (800062c <Modbus_init+0xa4>)
 80005a6:	210e      	movs	r1, #14
 80005a8:	4618      	mov	r0, r3
 80005aa:	f003 f86d 	bl	8003688 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_ReceiverTimeout_Config(hmodbus->huart, 16);
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	68db      	ldr	r3, [r3, #12]
 80005b2:	2110      	movs	r1, #16
 80005b4:	4618      	mov	r0, r3
 80005b6:	f004 f8dd 	bl	8004774 <HAL_UART_ReceiverTimeout_Config>
	HAL_UART_EnableReceiverTimeout(hmodbus->huart);
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	68db      	ldr	r3, [r3, #12]
 80005be:	4618      	mov	r0, r3
 80005c0:	f004 f8f4 	bl	80047ac <HAL_UART_EnableReceiverTimeout>

	HAL_UART_RegisterCallback(hmodbus->huart, HAL_UART_ERROR_CB_ID, (void*)modbus_ErrorTimeout);
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	68db      	ldr	r3, [r3, #12]
 80005c8:	4a19      	ldr	r2, [pc, #100]	@ (8000630 <Modbus_init+0xa8>)
 80005ca:	2104      	movs	r1, #4
 80005cc:	4618      	mov	r0, r3
 80005ce:	f003 fbbb 	bl	8003d48 <HAL_UART_RegisterCallback>
	//HAL_UART_RegisterCallback(hmodbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
	//start Receive
    HAL_UART_Receive_DMA(hModbus->huart,
 80005d2:	4b15      	ldr	r3, [pc, #84]	@ (8000628 <Modbus_init+0xa0>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	68d8      	ldr	r0, [r3, #12]
    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 80005d8:	4b13      	ldr	r3, [pc, #76]	@ (8000628 <Modbus_init+0xa0>)
 80005da:	681a      	ldr	r2, [r3, #0]
 80005dc:	4b12      	ldr	r3, [pc, #72]	@ (8000628 <Modbus_init+0xa0>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
    HAL_UART_Receive_DMA(hModbus->huart,
 80005e4:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 80005e8:	4413      	add	r3, r2
 80005ea:	3302      	adds	r3, #2
 80005ec:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80005f0:	4619      	mov	r1, r3
 80005f2:	f003 fce3 	bl	8003fbc <HAL_UART_Receive_DMA>
			MODBUS_UART_BUFFER_SIZE );


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 80005f6:	4b0c      	ldr	r3, [pc, #48]	@ (8000628 <Modbus_init+0xa0>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	691b      	ldr	r3, [r3, #16]
 80005fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8000600:	b2db      	uxtb	r3, r3
 8000602:	2b01      	cmp	r3, #1
 8000604:	d10c      	bne.n	8000620 <Modbus_init+0x98>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 8000606:	4b08      	ldr	r3, [pc, #32]	@ (8000628 <Modbus_init+0xa0>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	691b      	ldr	r3, [r3, #16]
 800060c:	4618      	mov	r0, r3
 800060e:	f002 fcef 	bl	8002ff0 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 8000612:	4b05      	ldr	r3, [pc, #20]	@ (8000628 <Modbus_init+0xa0>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	691b      	ldr	r3, [r3, #16]
 8000618:	2100      	movs	r1, #0
 800061a:	4618      	mov	r0, r3
 800061c:	f002 fdc8 	bl	80031b0 <HAL_TIM_OnePulse_Start_IT>
    	}

}
 8000620:	bf00      	nop
 8000622:	3708      	adds	r7, #8
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	20000228 	.word	0x20000228
 800062c:	08000549 	.word	0x08000549
 8000630:	08000569 	.word	0x08000569

08000634 <CRC16>:
} ;

unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 8000634:	b480      	push	{r7}
 8000636:	b085      	sub	sp, #20
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
 800063c:	460b      	mov	r3, r1
 800063e:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 8000640:	23ff      	movs	r3, #255	@ 0xff
 8000642:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 8000644:	23ff      	movs	r3, #255	@ 0xff
 8000646:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 8000648:	e013      	b.n	8000672 <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	1c5a      	adds	r2, r3, #1
 800064e:	607a      	str	r2, [r7, #4]
 8000650:	781a      	ldrb	r2, [r3, #0]
 8000652:	7bbb      	ldrb	r3, [r7, #14]
 8000654:	4053      	eors	r3, r2
 8000656:	b2db      	uxtb	r3, r3
 8000658:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 800065a:	4a0f      	ldr	r2, [pc, #60]	@ (8000698 <CRC16+0x64>)
 800065c:	68bb      	ldr	r3, [r7, #8]
 800065e:	4413      	add	r3, r2
 8000660:	781a      	ldrb	r2, [r3, #0]
 8000662:	7bfb      	ldrb	r3, [r7, #15]
 8000664:	4053      	eors	r3, r2
 8000666:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 8000668:	4a0c      	ldr	r2, [pc, #48]	@ (800069c <CRC16+0x68>)
 800066a:	68bb      	ldr	r3, [r7, #8]
 800066c:	4413      	add	r3, r2
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 8000672:	883b      	ldrh	r3, [r7, #0]
 8000674:	1e5a      	subs	r2, r3, #1
 8000676:	803a      	strh	r2, [r7, #0]
 8000678:	2b00      	cmp	r3, #0
 800067a:	d1e6      	bne.n	800064a <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 800067c:	7bfb      	ldrb	r3, [r7, #15]
 800067e:	021b      	lsls	r3, r3, #8
 8000680:	b21a      	sxth	r2, r3
 8000682:	7bbb      	ldrb	r3, [r7, #14]
 8000684:	b21b      	sxth	r3, r3
 8000686:	4313      	orrs	r3, r2
 8000688:	b21b      	sxth	r3, r3
 800068a:	b29b      	uxth	r3, r3
}
 800068c:	4618      	mov	r0, r3
 800068e:	3714      	adds	r7, #20
 8000690:	46bd      	mov	sp, r7
 8000692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000696:	4770      	bx	lr
 8000698:	20000100 	.word	0x20000100
 800069c:	20000000 	.word	0x20000000

080006a0 <Modbus_Protocal_Worker>:



void Modbus_Protocal_Worker()
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
	switch(hModbus->Mstatus)
 80006a6:	4b7e      	ldr	r3, [pc, #504]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	7ddb      	ldrb	r3, [r3, #23]
 80006ac:	3b01      	subs	r3, #1
 80006ae:	2b03      	cmp	r3, #3
 80006b0:	d80a      	bhi.n	80006c8 <Modbus_Protocal_Worker+0x28>
 80006b2:	a201      	add	r2, pc, #4	@ (adr r2, 80006b8 <Modbus_Protocal_Worker+0x18>)
 80006b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006b8:	080006d3 	.word	0x080006d3
 80006bc:	08000867 	.word	0x08000867
 80006c0:	0800075f 	.word	0x0800075f
 80006c4:	080007a3 	.word	0x080007a3
	{
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 80006c8:	4b75      	ldr	r3, [pc, #468]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	2201      	movs	r2, #1
 80006ce:	75da      	strb	r2, [r3, #23]
		break;
 80006d0:	e0e1      	b.n	8000896 <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if(hModbus->TxCount)
 80006d2:	4b73      	ldr	r3, [pc, #460]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d006      	beq.n	80006ec <Modbus_Protocal_Worker+0x4c>
		{
			/*set state*/
			hModbus->Mstatus= Modbus_state_Emission;
 80006de:	4b70      	ldr	r3, [pc, #448]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	2202      	movs	r2, #2
 80006e4:	75da      	strb	r2, [r3, #23]
			Modbus_Emission();
 80006e6:	f000 f9cd 	bl	8000a84 <Modbus_Emission>
 80006ea:	e018      	b.n	800071e <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if(hModbus->huart->RxXferSize!=hModbus->huart->RxXferCount)
 80006ec:	4b6c      	ldr	r3, [pc, #432]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	68db      	ldr	r3, [r3, #12]
 80006f2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80006f6:	4b6a      	ldr	r3, [pc, #424]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	68db      	ldr	r3, [r3, #12]
 80006fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8000700:	b29b      	uxth	r3, r3
 8000702:	429a      	cmp	r2, r3
 8000704:	d00b      	beq.n	800071e <Modbus_Protocal_Worker+0x7e>
		{
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 8000706:	4b66      	ldr	r3, [pc, #408]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	2200      	movs	r2, #0
 800070c:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 800070e:	4b64      	ldr	r3, [pc, #400]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	2200      	movs	r2, #0
 8000714:	755a      	strb	r2, [r3, #21]
			/*set state*/
			hModbus->Mstatus= Modbus_state_Reception;
 8000716:	4b62      	ldr	r3, [pc, #392]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	2203      	movs	r2, #3
 800071c:	75da      	strb	r2, [r3, #23]
		}

		//check that if UART RX not start, start receiving
		if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 800071e:	4b60      	ldr	r3, [pc, #384]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	68db      	ldr	r3, [r3, #12]
 8000724:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000728:	2b20      	cmp	r3, #32
 800072a:	f040 80ad 	bne.w	8000888 <Modbus_Protocal_Worker+0x1e8>
		{
			hModbus->modbusUartStructure.RxTail =0;
 800072e:	4b5c      	ldr	r3, [pc, #368]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	2200      	movs	r2, #0
 8000734:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2
		    HAL_UART_Receive_DMA(hModbus->huart,
 8000738:	4b59      	ldr	r3, [pc, #356]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	68d8      	ldr	r0, [r3, #12]
		    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 800073e:	4b58      	ldr	r3, [pc, #352]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 8000740:	681a      	ldr	r2, [r3, #0]
 8000742:	4b57      	ldr	r3, [pc, #348]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
		    HAL_UART_Receive_DMA(hModbus->huart,
 800074a:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 800074e:	4413      	add	r3, r2
 8000750:	3302      	adds	r3, #2
 8000752:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000756:	4619      	mov	r1, r3
 8000758:	f003 fc30 	bl	8003fbc <HAL_UART_Receive_DMA>
					MODBUS_UART_BUFFER_SIZE );


		}
		break;
 800075c:	e094      	b.n	8000888 <Modbus_Protocal_Worker+0x1e8>
	case Modbus_state_Reception:

		if(hModbus->Flag_T15TimeOut)
 800075e:	4b50      	ldr	r3, [pc, #320]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	7d1b      	ldrb	r3, [r3, #20]
 8000764:	2b00      	cmp	r3, #0
 8000766:	f000 8091 	beq.w	800088c <Modbus_Protocal_Worker+0x1ec>
		{
			/*reset recived flag*/
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 800076a:	4b4d      	ldr	r3, [pc, #308]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	22fe      	movs	r2, #254	@ 0xfe
 8000770:	759a      	strb	r2, [r3, #22]
			hModbus->modbusUartStructure.RxTail =
					hModbus->huart->RxXferSize - __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); 			/*compute CRC and Slave address*/
 8000772:	4b4b      	ldr	r3, [pc, #300]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	68db      	ldr	r3, [r3, #12]
 8000778:	f8b3 105c 	ldrh.w	r1, [r3, #92]	@ 0x5c
 800077c:	4b48      	ldr	r3, [pc, #288]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	68db      	ldr	r3, [r3, #12]
 8000782:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	685b      	ldr	r3, [r3, #4]
 800078a:	b29a      	uxth	r2, r3
			hModbus->modbusUartStructure.RxTail =
 800078c:	4b44      	ldr	r3, [pc, #272]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 800078e:	681b      	ldr	r3, [r3, #0]
					hModbus->huart->RxXferSize - __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); 			/*compute CRC and Slave address*/
 8000790:	1a8a      	subs	r2, r1, r2
 8000792:	b292      	uxth	r2, r2
			hModbus->modbusUartStructure.RxTail =
 8000794:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2



			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 8000798:	4b41      	ldr	r3, [pc, #260]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	2204      	movs	r2, #4
 800079e:	75da      	strb	r2, [r3, #23]
		}
		break;
 80007a0:	e074      	b.n	800088c <Modbus_Protocal_Worker+0x1ec>
	case Modbus_state_ControlAndWaiting:

		/*Frame Calculation , calculate once*/
		if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 80007a2:	4b3f      	ldr	r3, [pc, #252]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	f993 3016 	ldrsb.w	r3, [r3, #22]
 80007aa:	f113 0f02 	cmn.w	r3, #2
 80007ae:	d150      	bne.n	8000852 <Modbus_Protocal_Worker+0x1b2>
		{
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 80007b0:	4b3b      	ldr	r3, [pc, #236]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	2200      	movs	r2, #0
 80007b6:	759a      	strb	r2, [r3, #22]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 80007b8:	4b39      	ldr	r3, [pc, #228]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	f203 2272 	addw	r2, r3, #626	@ 0x272
 80007c0:	4b37      	ldr	r3, [pc, #220]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80007c8:	3b02      	subs	r3, #2
 80007ca:	4619      	mov	r1, r3
 80007cc:	4610      	mov	r0, r2
 80007ce:	f7ff ff31 	bl	8000634 <CRC16>
 80007d2:	4603      	mov	r3, r0
 80007d4:	80bb      	strh	r3, [r7, #4]

			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 80007d6:	793a      	ldrb	r2, [r7, #4]
 80007d8:	4b31      	ldr	r3, [pc, #196]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 80007da:	6819      	ldr	r1, [r3, #0]
 80007dc:	4b30      	ldr	r3, [pc, #192]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80007e4:	3b02      	subs	r3, #2
 80007e6:	440b      	add	r3, r1
 80007e8:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
 80007ec:	429a      	cmp	r2, r3
 80007ee:	d10c      	bne.n	800080a <Modbus_Protocal_Worker+0x16a>
			&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 80007f0:	797a      	ldrb	r2, [r7, #5]
 80007f2:	4b2b      	ldr	r3, [pc, #172]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 80007f4:	6819      	ldr	r1, [r3, #0]
 80007f6:	4b2a      	ldr	r3, [pc, #168]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80007fe:	3b01      	subs	r3, #1
 8000800:	440b      	add	r3, r1
 8000802:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 8000806:	429a      	cmp	r2, r3
 8000808:	d004      	beq.n	8000814 <Modbus_Protocal_Worker+0x174>
			{
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 800080a:	4b25      	ldr	r3, [pc, #148]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	22ff      	movs	r2, #255	@ 0xff
 8000810:	759a      	strb	r2, [r3, #22]
				break;
 8000812:	e040      	b.n	8000896 <Modbus_Protocal_Worker+0x1f6>
			}

			//check Slave Address
			if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 8000814:	4b22      	ldr	r3, [pc, #136]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	f893 2272 	ldrb.w	r2, [r3, #626]	@ 0x272
 800081c:	4b20      	ldr	r3, [pc, #128]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	781b      	ldrb	r3, [r3, #0]
 8000822:	429a      	cmp	r2, r3
 8000824:	d113      	bne.n	800084e <Modbus_Protocal_Worker+0x1ae>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 8000826:	4b1e      	ldr	r3, [pc, #120]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	f103 0018 	add.w	r0, r3, #24
					hModbus->modbusUartStructure.MessageBufferRx+1,
 800082e:	4b1c      	ldr	r3, [pc, #112]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	f203 2372 	addw	r3, r3, #626	@ 0x272
			memcpy(hModbus->Rxframe,
 8000836:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail-3);
 8000838:	4b19      	ldr	r3, [pc, #100]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8000840:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 8000842:	461a      	mov	r2, r3
 8000844:	f005 f940 	bl	8005ac8 <memcpy>

			//execute command
			Modbus_frame_response();
 8000848:	f000 f904 	bl	8000a54 <Modbus_frame_response>
 800084c:	e001      	b.n	8000852 <Modbus_Protocal_Worker+0x1b2>
				break;
 800084e:	bf00      	nop
					}
		break;


	}
}
 8000850:	e021      	b.n	8000896 <Modbus_Protocal_Worker+0x1f6>
		if(hModbus->Flag_T35TimeOut)
 8000852:	4b13      	ldr	r3, [pc, #76]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	7d5b      	ldrb	r3, [r3, #21]
 8000858:	2b00      	cmp	r3, #0
 800085a:	d019      	beq.n	8000890 <Modbus_Protocal_Worker+0x1f0>
			hModbus->Mstatus = Modbus_state_Idle;
 800085c:	4b10      	ldr	r3, [pc, #64]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	2201      	movs	r2, #1
 8000862:	75da      	strb	r2, [r3, #23]
		break;
 8000864:	e014      	b.n	8000890 <Modbus_Protocal_Worker+0x1f0>
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8000866:	4b0e      	ldr	r3, [pc, #56]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	68db      	ldr	r3, [r3, #12]
 800086c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000870:	2b20      	cmp	r3, #32
 8000872:	d10f      	bne.n	8000894 <Modbus_Protocal_Worker+0x1f4>
			hModbus->TxCount=0;
 8000874:	4b0a      	ldr	r3, [pc, #40]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	2200      	movs	r2, #0
 800087a:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
			hModbus->Mstatus = Modbus_state_Idle;
 800087e:	4b08      	ldr	r3, [pc, #32]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	2201      	movs	r2, #1
 8000884:	75da      	strb	r2, [r3, #23]
		break;
 8000886:	e005      	b.n	8000894 <Modbus_Protocal_Worker+0x1f4>
		break;
 8000888:	bf00      	nop
 800088a:	e004      	b.n	8000896 <Modbus_Protocal_Worker+0x1f6>
		break;
 800088c:	bf00      	nop
 800088e:	e002      	b.n	8000896 <Modbus_Protocal_Worker+0x1f6>
		break;
 8000890:	bf00      	nop
 8000892:	e000      	b.n	8000896 <Modbus_Protocal_Worker+0x1f6>
		break;
 8000894:	bf00      	nop
}
 8000896:	bf00      	nop
 8000898:	3708      	adds	r7, #8
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	20000228 	.word	0x20000228

080008a4 <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 80008aa:	4b1d      	ldr	r3, [pc, #116]	@ (8000920 <modbusWrite1Register+0x7c>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	7e5b      	ldrb	r3, [r3, #25]
 80008b0:	021b      	lsls	r3, r3, #8
 80008b2:	b29b      	uxth	r3, r3
 80008b4:	4a1a      	ldr	r2, [pc, #104]	@ (8000920 <modbusWrite1Register+0x7c>)
 80008b6:	6812      	ldr	r2, [r2, #0]
 80008b8:	7e92      	ldrb	r2, [r2, #26]
 80008ba:	4413      	add	r3, r2
 80008bc:	80fb      	strh	r3, [r7, #6]

	if(startAddress > hModbus->RegisterSize)
 80008be:	88fa      	ldrh	r2, [r7, #6]
 80008c0:	4b17      	ldr	r3, [pc, #92]	@ (8000920 <modbusWrite1Register+0x7c>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	689b      	ldr	r3, [r3, #8]
 80008c6:	429a      	cmp	r2, r3
 80008c8:	d903      	bls.n	80008d2 <modbusWrite1Register+0x2e>
		{
			 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 80008ca:	2002      	movs	r0, #2
 80008cc:	f000 f8a0 	bl	8000a10 <ModbusErrorReply>
			 return;
 80008d0:	e023      	b.n	800091a <modbusWrite1Register+0x76>
		}


	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 80008d2:	4b13      	ldr	r3, [pc, #76]	@ (8000920 <modbusWrite1Register+0x7c>)
 80008d4:	681a      	ldr	r2, [r3, #0]
 80008d6:	4b12      	ldr	r3, [pc, #72]	@ (8000920 <modbusWrite1Register+0x7c>)
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	6859      	ldr	r1, [r3, #4]
 80008dc:	88fb      	ldrh	r3, [r7, #6]
 80008de:	005b      	lsls	r3, r3, #1
 80008e0:	440b      	add	r3, r1
 80008e2:	7ed2      	ldrb	r2, [r2, #27]
 80008e4:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 80008e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000920 <modbusWrite1Register+0x7c>)
 80008e8:	681a      	ldr	r2, [r3, #0]
 80008ea:	4b0d      	ldr	r3, [pc, #52]	@ (8000920 <modbusWrite1Register+0x7c>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	6859      	ldr	r1, [r3, #4]
 80008f0:	88fb      	ldrh	r3, [r7, #6]
 80008f2:	005b      	lsls	r3, r3, #1
 80008f4:	440b      	add	r3, r1
 80008f6:	7f12      	ldrb	r2, [r2, #28]
 80008f8:	701a      	strb	r2, [r3, #0]



	//generate response
	memcpy(hModbus->Txframe,
 80008fa:	4b09      	ldr	r3, [pc, #36]	@ (8000920 <modbusWrite1Register+0x7c>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	f503 70a2 	add.w	r0, r3, #324	@ 0x144
			hModbus->Rxframe,
 8000902:	4b07      	ldr	r3, [pc, #28]	@ (8000920 <modbusWrite1Register+0x7c>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	3318      	adds	r3, #24
	memcpy(hModbus->Txframe,
 8000908:	2208      	movs	r2, #8
 800090a:	4619      	mov	r1, r3
 800090c:	f005 f8dc 	bl	8005ac8 <memcpy>
			8);
	//set number of byte to sent
	hModbus->TxCount=5;
 8000910:	4b03      	ldr	r3, [pc, #12]	@ (8000920 <modbusWrite1Register+0x7c>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	2205      	movs	r2, #5
 8000916:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270



}
 800091a:	3708      	adds	r7, #8
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	20000228 	.word	0x20000228

08000924 <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 8000924:	b590      	push	{r4, r7, lr}
 8000926:	b083      	sub	sp, #12
 8000928:	af00      	add	r7, sp, #0



	uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 800092a:	4b38      	ldr	r3, [pc, #224]	@ (8000a0c <modbusRead1Register+0xe8>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	7edb      	ldrb	r3, [r3, #27]
 8000930:	021b      	lsls	r3, r3, #8
 8000932:	b29b      	uxth	r3, r3
 8000934:	4a35      	ldr	r2, [pc, #212]	@ (8000a0c <modbusRead1Register+0xe8>)
 8000936:	6812      	ldr	r2, [r2, #0]
 8000938:	7f12      	ldrb	r2, [r2, #28]
 800093a:	4413      	add	r3, r2
 800093c:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 800093e:	4b33      	ldr	r3, [pc, #204]	@ (8000a0c <modbusRead1Register+0xe8>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	7e5b      	ldrb	r3, [r3, #25]
 8000944:	021b      	lsls	r3, r3, #8
 8000946:	b29b      	uxth	r3, r3
 8000948:	4a30      	ldr	r2, [pc, #192]	@ (8000a0c <modbusRead1Register+0xe8>)
 800094a:	6812      	ldr	r2, [r2, #0]
 800094c:	7e92      	ldrb	r2, [r2, #26]
 800094e:	4413      	add	r3, r2
 8000950:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 8000952:	88fb      	ldrh	r3, [r7, #6]
 8000954:	2b00      	cmp	r3, #0
 8000956:	d002      	beq.n	800095e <modbusRead1Register+0x3a>
 8000958:	88fb      	ldrh	r3, [r7, #6]
 800095a:	2b7d      	cmp	r3, #125	@ 0x7d
 800095c:	d903      	bls.n	8000966 <modbusRead1Register+0x42>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 800095e:	2003      	movs	r0, #3
 8000960:	f000 f856 	bl	8000a10 <ModbusErrorReply>
		 return;
 8000964:	e04e      	b.n	8000a04 <modbusRead1Register+0xe0>
	}

	if(startAddress > hModbus->RegisterSize || (startAddress +  numberOfDataToRead) > hModbus->RegisterSize)
 8000966:	88ba      	ldrh	r2, [r7, #4]
 8000968:	4b28      	ldr	r3, [pc, #160]	@ (8000a0c <modbusRead1Register+0xe8>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	689b      	ldr	r3, [r3, #8]
 800096e:	429a      	cmp	r2, r3
 8000970:	d808      	bhi.n	8000984 <modbusRead1Register+0x60>
 8000972:	88ba      	ldrh	r2, [r7, #4]
 8000974:	88fb      	ldrh	r3, [r7, #6]
 8000976:	4413      	add	r3, r2
 8000978:	461a      	mov	r2, r3
 800097a:	4b24      	ldr	r3, [pc, #144]	@ (8000a0c <modbusRead1Register+0xe8>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	689b      	ldr	r3, [r3, #8]
 8000980:	429a      	cmp	r2, r3
 8000982:	d903      	bls.n	800098c <modbusRead1Register+0x68>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8000984:	2002      	movs	r0, #2
 8000986:	f000 f843 	bl	8000a10 <ModbusErrorReply>
		 return;
 800098a:	e03b      	b.n	8000a04 <modbusRead1Register+0xe0>
	}


	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 800098c:	4b1f      	ldr	r3, [pc, #124]	@ (8000a0c <modbusRead1Register+0xe8>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	2203      	movs	r2, #3
 8000992:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 8000996:	88fb      	ldrh	r3, [r7, #6]
 8000998:	b2da      	uxtb	r2, r3
 800099a:	4b1c      	ldr	r3, [pc, #112]	@ (8000a0c <modbusRead1Register+0xe8>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	0052      	lsls	r2, r2, #1
 80009a0:	b2d2      	uxtb	r2, r2
 80009a2:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	register int i;
	for(i=0; i<numberOfDataToRead;i++)
 80009a6:	2400      	movs	r4, #0
 80009a8:	e020      	b.n	80009ec <modbusRead1Register+0xc8>
	{
		hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 80009aa:	4b18      	ldr	r3, [pc, #96]	@ (8000a0c <modbusRead1Register+0xe8>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	685a      	ldr	r2, [r3, #4]
 80009b0:	88bb      	ldrh	r3, [r7, #4]
 80009b2:	4423      	add	r3, r4
 80009b4:	005b      	lsls	r3, r3, #1
 80009b6:	18d1      	adds	r1, r2, r3
 80009b8:	4b14      	ldr	r3, [pc, #80]	@ (8000a0c <modbusRead1Register+0xe8>)
 80009ba:	681a      	ldr	r2, [r3, #0]
 80009bc:	1c63      	adds	r3, r4, #1
 80009be:	005b      	lsls	r3, r3, #1
 80009c0:	7849      	ldrb	r1, [r1, #1]
 80009c2:	4413      	add	r3, r2
 80009c4:	460a      	mov	r2, r1
 80009c6:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
		hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 80009ca:	4b10      	ldr	r3, [pc, #64]	@ (8000a0c <modbusRead1Register+0xe8>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	685a      	ldr	r2, [r3, #4]
 80009d0:	88bb      	ldrh	r3, [r7, #4]
 80009d2:	4423      	add	r3, r4
 80009d4:	005b      	lsls	r3, r3, #1
 80009d6:	18d1      	adds	r1, r2, r3
 80009d8:	4b0c      	ldr	r3, [pc, #48]	@ (8000a0c <modbusRead1Register+0xe8>)
 80009da:	681a      	ldr	r2, [r3, #0]
 80009dc:	0063      	lsls	r3, r4, #1
 80009de:	3303      	adds	r3, #3
 80009e0:	7809      	ldrb	r1, [r1, #0]
 80009e2:	4413      	add	r3, r2
 80009e4:	460a      	mov	r2, r1
 80009e6:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	for(i=0; i<numberOfDataToRead;i++)
 80009ea:	3401      	adds	r4, #1
 80009ec:	88fb      	ldrh	r3, [r7, #6]
 80009ee:	429c      	cmp	r4, r3
 80009f0:	dbdb      	blt.n	80009aa <modbusRead1Register+0x86>
	}
	hModbus->TxCount = 2+2*numberOfDataToRead;
 80009f2:	88fb      	ldrh	r3, [r7, #6]
 80009f4:	3301      	adds	r3, #1
 80009f6:	b2da      	uxtb	r2, r3
 80009f8:	4b04      	ldr	r3, [pc, #16]	@ (8000a0c <modbusRead1Register+0xe8>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	0052      	lsls	r2, r2, #1
 80009fe:	b2d2      	uxtb	r2, r2
 8000a00:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270

}
 8000a04:	370c      	adds	r7, #12
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd90      	pop	{r4, r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	20000228 	.word	0x20000228

08000a10 <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b083      	sub	sp, #12
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	4603      	mov	r3, r0
 8000a18:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 8000a1a:	4b0d      	ldr	r3, [pc, #52]	@ (8000a50 <ModbusErrorReply+0x40>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	7e1a      	ldrb	r2, [r3, #24]
 8000a20:	4b0b      	ldr	r3, [pc, #44]	@ (8000a50 <ModbusErrorReply+0x40>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8000a28:	b2d2      	uxtb	r2, r2
 8000a2a:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = Errorcode;
 8000a2e:	4b08      	ldr	r3, [pc, #32]	@ (8000a50 <ModbusErrorReply+0x40>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	79fa      	ldrb	r2, [r7, #7]
 8000a34:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	hModbus->TxCount = 2;
 8000a38:	4b05      	ldr	r3, [pc, #20]	@ (8000a50 <ModbusErrorReply+0x40>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	2202      	movs	r2, #2
 8000a3e:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
}
 8000a42:	bf00      	nop
 8000a44:	370c      	adds	r7, #12
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	20000228 	.word	0x20000228

08000a54 <Modbus_frame_response>:

void Modbus_frame_response()
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check funcion
 8000a58:	4b09      	ldr	r3, [pc, #36]	@ (8000a80 <Modbus_frame_response+0x2c>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	7e1b      	ldrb	r3, [r3, #24]
 8000a5e:	2b03      	cmp	r3, #3
 8000a60:	d004      	beq.n	8000a6c <Modbus_frame_response+0x18>
 8000a62:	2b06      	cmp	r3, #6
 8000a64:	d105      	bne.n	8000a72 <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 8000a66:	f7ff ff1d 	bl	80008a4 <modbusWrite1Register>
		break;
 8000a6a:	e006      	b.n	8000a7a <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 8000a6c:	f7ff ff5a 	bl	8000924 <modbusRead1Register>
		break;
 8000a70:	e003      	b.n	8000a7a <Modbus_frame_response+0x26>
	default:
		 ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 8000a72:	2001      	movs	r0, #1
 8000a74:	f7ff ffcc 	bl	8000a10 <ModbusErrorReply>
		break;
 8000a78:	bf00      	nop

	}
}
 8000a7a:	bf00      	nop
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	20000228 	.word	0x20000228

08000a84 <Modbus_Emission>:

void Modbus_Emission()
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8000a8a:	4b38      	ldr	r3, [pc, #224]	@ (8000b6c <Modbus_Emission+0xe8>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	68db      	ldr	r3, [r3, #12]
 8000a90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a94:	2b20      	cmp	r3, #32
 8000a96:	d15d      	bne.n	8000b54 <Modbus_Emission+0xd0>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 8000a98:	4b34      	ldr	r3, [pc, #208]	@ (8000b6c <Modbus_Emission+0xe8>)
 8000a9a:	681a      	ldr	r2, [r3, #0]
 8000a9c:	4b33      	ldr	r3, [pc, #204]	@ (8000b6c <Modbus_Emission+0xe8>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	7812      	ldrb	r2, [r2, #0]
 8000aa2:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		memcpy
		(
				hModbus->modbusUartStructure.MessageBufferTx+1,
 8000aa6:	4b31      	ldr	r3, [pc, #196]	@ (8000b6c <Modbus_Emission+0xe8>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	f503 7369 	add.w	r3, r3, #932	@ 0x3a4
		memcpy
 8000aae:	1c58      	adds	r0, r3, #1
				hModbus->Txframe,
 8000ab0:	4b2e      	ldr	r3, [pc, #184]	@ (8000b6c <Modbus_Emission+0xe8>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	f503 71a2 	add.w	r1, r3, #324	@ 0x144
				hModbus->TxCount
 8000ab8:	4b2c      	ldr	r3, [pc, #176]	@ (8000b6c <Modbus_Emission+0xe8>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
		memcpy
 8000ac0:	461a      	mov	r2, r3
 8000ac2:	f005 f801 	bl	8005ac8 <memcpy>
		);

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 8000ac6:	4b29      	ldr	r3, [pc, #164]	@ (8000b6c <Modbus_Emission+0xe8>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 8000ace:	461a      	mov	r2, r3
 8000ad0:	4b26      	ldr	r3, [pc, #152]	@ (8000b6c <Modbus_Emission+0xe8>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	3203      	adds	r2, #3
 8000ad6:	b292      	uxth	r2, r2
 8000ad8:	f8a3 24d4 	strh.w	r2, [r3, #1236]	@ 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8000adc:	4b23      	ldr	r3, [pc, #140]	@ (8000b6c <Modbus_Emission+0xe8>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	f503 7269 	add.w	r2, r3, #932	@ 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 8000ae4:	4b21      	ldr	r3, [pc, #132]	@ (8000b6c <Modbus_Emission+0xe8>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8000aec:	3b02      	subs	r3, #2
 8000aee:	4619      	mov	r1, r3
 8000af0:	4610      	mov	r0, r2
 8000af2:	f7ff fd9f 	bl	8000634 <CRC16>
 8000af6:	4603      	mov	r3, r0
 8000af8:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 8000afa:	4b1c      	ldr	r3, [pc, #112]	@ (8000b6c <Modbus_Emission+0xe8>)
 8000afc:	681a      	ldr	r2, [r3, #0]
 8000afe:	4b1b      	ldr	r3, [pc, #108]	@ (8000b6c <Modbus_Emission+0xe8>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8000b06:	3b02      	subs	r3, #2
													 =CalculateCRC.U8[0];
 8000b08:	7939      	ldrb	r1, [r7, #4]
 8000b0a:	4413      	add	r3, r2
 8000b0c:	460a      	mov	r2, r1
 8000b0e:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 8000b12:	4b16      	ldr	r3, [pc, #88]	@ (8000b6c <Modbus_Emission+0xe8>)
 8000b14:	681a      	ldr	r2, [r3, #0]
 8000b16:	4b15      	ldr	r3, [pc, #84]	@ (8000b6c <Modbus_Emission+0xe8>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8000b1e:	3b01      	subs	r3, #1
													 =CalculateCRC.U8[1];
 8000b20:	7979      	ldrb	r1, [r7, #5]
 8000b22:	4413      	add	r3, r2
 8000b24:	460a      	mov	r2, r1
 8000b26:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4


		//sent modbus

		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8000b2a:	4b10      	ldr	r3, [pc, #64]	@ (8000b6c <Modbus_Emission+0xe8>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	68db      	ldr	r3, [r3, #12]
 8000b30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b34:	2b20      	cmp	r3, #32
 8000b36:	d10d      	bne.n	8000b54 <Modbus_Emission+0xd0>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 8000b38:	4b0c      	ldr	r3, [pc, #48]	@ (8000b6c <Modbus_Emission+0xe8>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	68d8      	ldr	r0, [r3, #12]
					,hModbus->modbusUartStructure.MessageBufferTx
 8000b3e:	4b0b      	ldr	r3, [pc, #44]	@ (8000b6c <Modbus_Emission+0xe8>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	f503 7169 	add.w	r1, r3, #932	@ 0x3a4
					,hModbus->modbusUartStructure.TxTail);
 8000b46:	4b09      	ldr	r3, [pc, #36]	@ (8000b6c <Modbus_Emission+0xe8>)
 8000b48:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 8000b4a:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8000b4e:	461a      	mov	r2, r3
 8000b50:	f003 f9b4 	bl	8003ebc <HAL_UART_Transmit_DMA>



	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 8000b54:	4b05      	ldr	r3, [pc, #20]	@ (8000b6c <Modbus_Emission+0xe8>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	2200      	movs	r2, #0
 8000b5a:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 8000b5c:	4b03      	ldr	r3, [pc, #12]	@ (8000b6c <Modbus_Emission+0xe8>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	2200      	movs	r2, #0
 8000b62:	755a      	strb	r2, [r3, #21]

}
 8000b64:	bf00      	nop
 8000b66:	3708      	adds	r7, #8
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	20000228 	.word	0x20000228

08000b70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
 8000b74:	f000 fb37 	bl	80011e6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b78:	f000 f824 	bl	8000bc4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b7c:	f000 f91e 	bl	8000dbc <MX_GPIO_Init>
  MX_DMA_Init();
 8000b80:	f000 f8ea 	bl	8000d58 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000b84:	f000 f89a 	bl	8000cbc <MX_USART2_UART_Init>
  MX_TIM16_Init();
 8000b88:	f000 f868 	bl	8000c5c <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  hmodbus.huart = &huart2;
 8000b8c:	4b09      	ldr	r3, [pc, #36]	@ (8000bb4 <main+0x44>)
 8000b8e:	4a0a      	ldr	r2, [pc, #40]	@ (8000bb8 <main+0x48>)
 8000b90:	60da      	str	r2, [r3, #12]
  hmodbus.htim = &htim16;
 8000b92:	4b08      	ldr	r3, [pc, #32]	@ (8000bb4 <main+0x44>)
 8000b94:	4a09      	ldr	r2, [pc, #36]	@ (8000bbc <main+0x4c>)
 8000b96:	611a      	str	r2, [r3, #16]
  hmodbus.slaveAddress = 0x15;
 8000b98:	4b06      	ldr	r3, [pc, #24]	@ (8000bb4 <main+0x44>)
 8000b9a:	2215      	movs	r2, #21
 8000b9c:	701a      	strb	r2, [r3, #0]
  hmodbus.RegisterSize =200;
 8000b9e:	4b05      	ldr	r3, [pc, #20]	@ (8000bb4 <main+0x44>)
 8000ba0:	22c8      	movs	r2, #200	@ 0xc8
 8000ba2:	609a      	str	r2, [r3, #8]
  Modbus_init(&hmodbus, registerFrame);
 8000ba4:	4906      	ldr	r1, [pc, #24]	@ (8000bc0 <main+0x50>)
 8000ba6:	4803      	ldr	r0, [pc, #12]	@ (8000bb4 <main+0x44>)
 8000ba8:	f7ff fcee 	bl	8000588 <Modbus_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Modbus_Protocal_Worker();
 8000bac:	f7ff fd78 	bl	80006a0 <Modbus_Protocal_Worker>
 8000bb0:	e7fc      	b.n	8000bac <main+0x3c>
 8000bb2:	bf00      	nop
 8000bb4:	20000484 	.word	0x20000484
 8000bb8:	200002f8 	.word	0x200002f8
 8000bbc:	2000022c 	.word	0x2000022c
 8000bc0:	2000095c 	.word	0x2000095c

08000bc4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b094      	sub	sp, #80	@ 0x50
 8000bc8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bca:	f107 0318 	add.w	r3, r7, #24
 8000bce:	2238      	movs	r2, #56	@ 0x38
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f004 ff4c 	bl	8005a70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bd8:	1d3b      	adds	r3, r7, #4
 8000bda:	2200      	movs	r2, #0
 8000bdc:	601a      	str	r2, [r3, #0]
 8000bde:	605a      	str	r2, [r3, #4]
 8000be0:	609a      	str	r2, [r3, #8]
 8000be2:	60da      	str	r2, [r3, #12]
 8000be4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000be6:	2000      	movs	r0, #0
 8000be8:	f001 f96e 	bl	8001ec8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bec:	2302      	movs	r3, #2
 8000bee:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bf0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000bf4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bf6:	2340      	movs	r3, #64	@ 0x40
 8000bf8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bfa:	2302      	movs	r3, #2
 8000bfc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000bfe:	2302      	movs	r3, #2
 8000c00:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000c02:	2304      	movs	r3, #4
 8000c04:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000c06:	2355      	movs	r3, #85	@ 0x55
 8000c08:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c0a:	2302      	movs	r3, #2
 8000c0c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000c0e:	2302      	movs	r3, #2
 8000c10:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000c12:	2302      	movs	r3, #2
 8000c14:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c16:	f107 0318 	add.w	r3, r7, #24
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f001 fa08 	bl	8002030 <HAL_RCC_OscConfig>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000c26:	f000 f937 	bl	8000e98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c2a:	230f      	movs	r3, #15
 8000c2c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c2e:	2303      	movs	r3, #3
 8000c30:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c32:	2300      	movs	r3, #0
 8000c34:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c36:	2300      	movs	r3, #0
 8000c38:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000c3e:	1d3b      	adds	r3, r7, #4
 8000c40:	2104      	movs	r1, #4
 8000c42:	4618      	mov	r0, r3
 8000c44:	f001 fd06 	bl	8002654 <HAL_RCC_ClockConfig>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000c4e:	f000 f923 	bl	8000e98 <Error_Handler>
  }
}
 8000c52:	bf00      	nop
 8000c54:	3750      	adds	r7, #80	@ 0x50
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
	...

08000c5c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000c60:	4b14      	ldr	r3, [pc, #80]	@ (8000cb4 <MX_TIM16_Init+0x58>)
 8000c62:	4a15      	ldr	r2, [pc, #84]	@ (8000cb8 <MX_TIM16_Init+0x5c>)
 8000c64:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 169;
 8000c66:	4b13      	ldr	r3, [pc, #76]	@ (8000cb4 <MX_TIM16_Init+0x58>)
 8000c68:	22a9      	movs	r2, #169	@ 0xa9
 8000c6a:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c6c:	4b11      	ldr	r3, [pc, #68]	@ (8000cb4 <MX_TIM16_Init+0x58>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1145;
 8000c72:	4b10      	ldr	r3, [pc, #64]	@ (8000cb4 <MX_TIM16_Init+0x58>)
 8000c74:	f240 4279 	movw	r2, #1145	@ 0x479
 8000c78:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c7a:	4b0e      	ldr	r3, [pc, #56]	@ (8000cb4 <MX_TIM16_Init+0x58>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000c80:	4b0c      	ldr	r3, [pc, #48]	@ (8000cb4 <MX_TIM16_Init+0x58>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c86:	4b0b      	ldr	r3, [pc, #44]	@ (8000cb4 <MX_TIM16_Init+0x58>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000c8c:	4809      	ldr	r0, [pc, #36]	@ (8000cb4 <MX_TIM16_Init+0x58>)
 8000c8e:	f002 f94b 	bl	8002f28 <HAL_TIM_Base_Init>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8000c98:	f000 f8fe 	bl	8000e98 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 8000c9c:	2108      	movs	r1, #8
 8000c9e:	4805      	ldr	r0, [pc, #20]	@ (8000cb4 <MX_TIM16_Init+0x58>)
 8000ca0:	f002 fa1e 	bl	80030e0 <HAL_TIM_OnePulse_Init>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <MX_TIM16_Init+0x52>
  {
    Error_Handler();
 8000caa:	f000 f8f5 	bl	8000e98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000cae:	bf00      	nop
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	2000022c 	.word	0x2000022c
 8000cb8:	40014400 	.word	0x40014400

08000cbc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000cc0:	4b23      	ldr	r3, [pc, #140]	@ (8000d50 <MX_USART2_UART_Init+0x94>)
 8000cc2:	4a24      	ldr	r2, [pc, #144]	@ (8000d54 <MX_USART2_UART_Init+0x98>)
 8000cc4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8000cc6:	4b22      	ldr	r3, [pc, #136]	@ (8000d50 <MX_USART2_UART_Init+0x94>)
 8000cc8:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8000ccc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8000cce:	4b20      	ldr	r3, [pc, #128]	@ (8000d50 <MX_USART2_UART_Init+0x94>)
 8000cd0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000cd4:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000cd6:	4b1e      	ldr	r3, [pc, #120]	@ (8000d50 <MX_USART2_UART_Init+0x94>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8000cdc:	4b1c      	ldr	r3, [pc, #112]	@ (8000d50 <MX_USART2_UART_Init+0x94>)
 8000cde:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000ce2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ce4:	4b1a      	ldr	r3, [pc, #104]	@ (8000d50 <MX_USART2_UART_Init+0x94>)
 8000ce6:	220c      	movs	r2, #12
 8000ce8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cea:	4b19      	ldr	r3, [pc, #100]	@ (8000d50 <MX_USART2_UART_Init+0x94>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cf0:	4b17      	ldr	r3, [pc, #92]	@ (8000d50 <MX_USART2_UART_Init+0x94>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cf6:	4b16      	ldr	r3, [pc, #88]	@ (8000d50 <MX_USART2_UART_Init+0x94>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000cfc:	4b14      	ldr	r3, [pc, #80]	@ (8000d50 <MX_USART2_UART_Init+0x94>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d02:	4b13      	ldr	r3, [pc, #76]	@ (8000d50 <MX_USART2_UART_Init+0x94>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d08:	4811      	ldr	r0, [pc, #68]	@ (8000d50 <MX_USART2_UART_Init+0x94>)
 8000d0a:	f002 ffbd 	bl	8003c88 <HAL_UART_Init>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d001      	beq.n	8000d18 <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 8000d14:	f000 f8c0 	bl	8000e98 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d18:	2100      	movs	r1, #0
 8000d1a:	480d      	ldr	r0, [pc, #52]	@ (8000d50 <MX_USART2_UART_Init+0x94>)
 8000d1c:	f004 fddd 	bl	80058da <HAL_UARTEx_SetTxFifoThreshold>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 8000d26:	f000 f8b7 	bl	8000e98 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	4808      	ldr	r0, [pc, #32]	@ (8000d50 <MX_USART2_UART_Init+0x94>)
 8000d2e:	f004 fe12 	bl	8005956 <HAL_UARTEx_SetRxFifoThreshold>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 8000d38:	f000 f8ae 	bl	8000e98 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000d3c:	4804      	ldr	r0, [pc, #16]	@ (8000d50 <MX_USART2_UART_Init+0x94>)
 8000d3e:	f004 fd93 	bl	8005868 <HAL_UARTEx_DisableFifoMode>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d001      	beq.n	8000d4c <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 8000d48:	f000 f8a6 	bl	8000e98 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d4c:	bf00      	nop
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	200002f8 	.word	0x200002f8
 8000d54:	40004400 	.word	0x40004400

08000d58 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000d5e:	4b16      	ldr	r3, [pc, #88]	@ (8000db8 <MX_DMA_Init+0x60>)
 8000d60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000d62:	4a15      	ldr	r2, [pc, #84]	@ (8000db8 <MX_DMA_Init+0x60>)
 8000d64:	f043 0304 	orr.w	r3, r3, #4
 8000d68:	6493      	str	r3, [r2, #72]	@ 0x48
 8000d6a:	4b13      	ldr	r3, [pc, #76]	@ (8000db8 <MX_DMA_Init+0x60>)
 8000d6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000d6e:	f003 0304 	and.w	r3, r3, #4
 8000d72:	607b      	str	r3, [r7, #4]
 8000d74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d76:	4b10      	ldr	r3, [pc, #64]	@ (8000db8 <MX_DMA_Init+0x60>)
 8000d78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000d7a:	4a0f      	ldr	r2, [pc, #60]	@ (8000db8 <MX_DMA_Init+0x60>)
 8000d7c:	f043 0301 	orr.w	r3, r3, #1
 8000d80:	6493      	str	r3, [r2, #72]	@ 0x48
 8000d82:	4b0d      	ldr	r3, [pc, #52]	@ (8000db8 <MX_DMA_Init+0x60>)
 8000d84:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000d86:	f003 0301 	and.w	r3, r3, #1
 8000d8a:	603b      	str	r3, [r7, #0]
 8000d8c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000d8e:	2200      	movs	r2, #0
 8000d90:	2100      	movs	r1, #0
 8000d92:	200b      	movs	r0, #11
 8000d94:	f000 fb73 	bl	800147e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000d98:	200b      	movs	r0, #11
 8000d9a:	f000 fb8a 	bl	80014b2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000d9e:	2200      	movs	r2, #0
 8000da0:	2100      	movs	r1, #0
 8000da2:	200c      	movs	r0, #12
 8000da4:	f000 fb6b 	bl	800147e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000da8:	200c      	movs	r0, #12
 8000daa:	f000 fb82 	bl	80014b2 <HAL_NVIC_EnableIRQ>

}
 8000dae:	bf00      	nop
 8000db0:	3708      	adds	r7, #8
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	40021000 	.word	0x40021000

08000dbc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b08a      	sub	sp, #40	@ 0x28
 8000dc0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc2:	f107 0314 	add.w	r3, r7, #20
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	601a      	str	r2, [r3, #0]
 8000dca:	605a      	str	r2, [r3, #4]
 8000dcc:	609a      	str	r2, [r3, #8]
 8000dce:	60da      	str	r2, [r3, #12]
 8000dd0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dd2:	4b2f      	ldr	r3, [pc, #188]	@ (8000e90 <MX_GPIO_Init+0xd4>)
 8000dd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dd6:	4a2e      	ldr	r2, [pc, #184]	@ (8000e90 <MX_GPIO_Init+0xd4>)
 8000dd8:	f043 0304 	orr.w	r3, r3, #4
 8000ddc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dde:	4b2c      	ldr	r3, [pc, #176]	@ (8000e90 <MX_GPIO_Init+0xd4>)
 8000de0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000de2:	f003 0304 	and.w	r3, r3, #4
 8000de6:	613b      	str	r3, [r7, #16]
 8000de8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000dea:	4b29      	ldr	r3, [pc, #164]	@ (8000e90 <MX_GPIO_Init+0xd4>)
 8000dec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dee:	4a28      	ldr	r2, [pc, #160]	@ (8000e90 <MX_GPIO_Init+0xd4>)
 8000df0:	f043 0320 	orr.w	r3, r3, #32
 8000df4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000df6:	4b26      	ldr	r3, [pc, #152]	@ (8000e90 <MX_GPIO_Init+0xd4>)
 8000df8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dfa:	f003 0320 	and.w	r3, r3, #32
 8000dfe:	60fb      	str	r3, [r7, #12]
 8000e00:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e02:	4b23      	ldr	r3, [pc, #140]	@ (8000e90 <MX_GPIO_Init+0xd4>)
 8000e04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e06:	4a22      	ldr	r2, [pc, #136]	@ (8000e90 <MX_GPIO_Init+0xd4>)
 8000e08:	f043 0301 	orr.w	r3, r3, #1
 8000e0c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e0e:	4b20      	ldr	r3, [pc, #128]	@ (8000e90 <MX_GPIO_Init+0xd4>)
 8000e10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e12:	f003 0301 	and.w	r3, r3, #1
 8000e16:	60bb      	str	r3, [r7, #8]
 8000e18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e1a:	4b1d      	ldr	r3, [pc, #116]	@ (8000e90 <MX_GPIO_Init+0xd4>)
 8000e1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e1e:	4a1c      	ldr	r2, [pc, #112]	@ (8000e90 <MX_GPIO_Init+0xd4>)
 8000e20:	f043 0302 	orr.w	r3, r3, #2
 8000e24:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e26:	4b1a      	ldr	r3, [pc, #104]	@ (8000e90 <MX_GPIO_Init+0xd4>)
 8000e28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e2a:	f003 0302 	and.w	r3, r3, #2
 8000e2e:	607b      	str	r3, [r7, #4]
 8000e30:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000e32:	2200      	movs	r2, #0
 8000e34:	2120      	movs	r1, #32
 8000e36:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e3a:	f001 f809 	bl	8001e50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000e3e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e44:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000e48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e4e:	f107 0314 	add.w	r3, r7, #20
 8000e52:	4619      	mov	r1, r3
 8000e54:	480f      	ldr	r0, [pc, #60]	@ (8000e94 <MX_GPIO_Init+0xd8>)
 8000e56:	f000 fe79 	bl	8001b4c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000e5a:	2320      	movs	r3, #32
 8000e5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e62:	2300      	movs	r3, #0
 8000e64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e66:	2300      	movs	r3, #0
 8000e68:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000e6a:	f107 0314 	add.w	r3, r7, #20
 8000e6e:	4619      	mov	r1, r3
 8000e70:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e74:	f000 fe6a 	bl	8001b4c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000e78:	2200      	movs	r2, #0
 8000e7a:	2100      	movs	r1, #0
 8000e7c:	2028      	movs	r0, #40	@ 0x28
 8000e7e:	f000 fafe 	bl	800147e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000e82:	2028      	movs	r0, #40	@ 0x28
 8000e84:	f000 fb15 	bl	80014b2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e88:	bf00      	nop
 8000e8a:	3728      	adds	r7, #40	@ 0x28
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	40021000 	.word	0x40021000
 8000e94:	48000800 	.word	0x48000800

08000e98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e9c:	b672      	cpsid	i
}
 8000e9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ea0:	bf00      	nop
 8000ea2:	e7fd      	b.n	8000ea0 <Error_Handler+0x8>

08000ea4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eaa:	4b0f      	ldr	r3, [pc, #60]	@ (8000ee8 <HAL_MspInit+0x44>)
 8000eac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000eae:	4a0e      	ldr	r2, [pc, #56]	@ (8000ee8 <HAL_MspInit+0x44>)
 8000eb0:	f043 0301 	orr.w	r3, r3, #1
 8000eb4:	6613      	str	r3, [r2, #96]	@ 0x60
 8000eb6:	4b0c      	ldr	r3, [pc, #48]	@ (8000ee8 <HAL_MspInit+0x44>)
 8000eb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000eba:	f003 0301 	and.w	r3, r3, #1
 8000ebe:	607b      	str	r3, [r7, #4]
 8000ec0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ec2:	4b09      	ldr	r3, [pc, #36]	@ (8000ee8 <HAL_MspInit+0x44>)
 8000ec4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ec6:	4a08      	ldr	r2, [pc, #32]	@ (8000ee8 <HAL_MspInit+0x44>)
 8000ec8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ecc:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ece:	4b06      	ldr	r3, [pc, #24]	@ (8000ee8 <HAL_MspInit+0x44>)
 8000ed0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ed2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ed6:	603b      	str	r3, [r7, #0]
 8000ed8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000eda:	f001 f899 	bl	8002010 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ede:	bf00      	nop
 8000ee0:	3708      	adds	r7, #8
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	40021000 	.word	0x40021000

08000eec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b084      	sub	sp, #16
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a0d      	ldr	r2, [pc, #52]	@ (8000f30 <HAL_TIM_Base_MspInit+0x44>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d113      	bne.n	8000f26 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000efe:	4b0d      	ldr	r3, [pc, #52]	@ (8000f34 <HAL_TIM_Base_MspInit+0x48>)
 8000f00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f02:	4a0c      	ldr	r2, [pc, #48]	@ (8000f34 <HAL_TIM_Base_MspInit+0x48>)
 8000f04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f08:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f0a:	4b0a      	ldr	r3, [pc, #40]	@ (8000f34 <HAL_TIM_Base_MspInit+0x48>)
 8000f0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f12:	60fb      	str	r3, [r7, #12]
 8000f14:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000f16:	2200      	movs	r2, #0
 8000f18:	2100      	movs	r1, #0
 8000f1a:	2019      	movs	r0, #25
 8000f1c:	f000 faaf 	bl	800147e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000f20:	2019      	movs	r0, #25
 8000f22:	f000 fac6 	bl	80014b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8000f26:	bf00      	nop
 8000f28:	3710      	adds	r7, #16
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	40014400 	.word	0x40014400
 8000f34:	40021000 	.word	0x40021000

08000f38 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b09e      	sub	sp, #120	@ 0x78
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f40:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000f44:	2200      	movs	r2, #0
 8000f46:	601a      	str	r2, [r3, #0]
 8000f48:	605a      	str	r2, [r3, #4]
 8000f4a:	609a      	str	r2, [r3, #8]
 8000f4c:	60da      	str	r2, [r3, #12]
 8000f4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f50:	f107 0310 	add.w	r3, r7, #16
 8000f54:	2254      	movs	r2, #84	@ 0x54
 8000f56:	2100      	movs	r1, #0
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f004 fd89 	bl	8005a70 <memset>
  if(huart->Instance==USART2)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	4a4d      	ldr	r2, [pc, #308]	@ (8001098 <HAL_UART_MspInit+0x160>)
 8000f64:	4293      	cmp	r3, r2
 8000f66:	f040 8092 	bne.w	800108e <HAL_UART_MspInit+0x156>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000f6a:	2302      	movs	r3, #2
 8000f6c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f72:	f107 0310 	add.w	r3, r7, #16
 8000f76:	4618      	mov	r0, r3
 8000f78:	f001 fd88 	bl	8002a8c <HAL_RCCEx_PeriphCLKConfig>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000f82:	f7ff ff89 	bl	8000e98 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f86:	4b45      	ldr	r3, [pc, #276]	@ (800109c <HAL_UART_MspInit+0x164>)
 8000f88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f8a:	4a44      	ldr	r2, [pc, #272]	@ (800109c <HAL_UART_MspInit+0x164>)
 8000f8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f90:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f92:	4b42      	ldr	r3, [pc, #264]	@ (800109c <HAL_UART_MspInit+0x164>)
 8000f94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f9a:	60fb      	str	r3, [r7, #12]
 8000f9c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f9e:	4b3f      	ldr	r3, [pc, #252]	@ (800109c <HAL_UART_MspInit+0x164>)
 8000fa0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fa2:	4a3e      	ldr	r2, [pc, #248]	@ (800109c <HAL_UART_MspInit+0x164>)
 8000fa4:	f043 0301 	orr.w	r3, r3, #1
 8000fa8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000faa:	4b3c      	ldr	r3, [pc, #240]	@ (800109c <HAL_UART_MspInit+0x164>)
 8000fac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fae:	f003 0301 	and.w	r3, r3, #1
 8000fb2:	60bb      	str	r3, [r7, #8]
 8000fb4:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000fb6:	230c      	movs	r3, #12
 8000fb8:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fba:	2302      	movs	r3, #2
 8000fbc:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000fc6:	2307      	movs	r3, #7
 8000fc8:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fca:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000fce:	4619      	mov	r1, r3
 8000fd0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fd4:	f000 fdba 	bl	8001b4c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel1;
 8000fd8:	4b31      	ldr	r3, [pc, #196]	@ (80010a0 <HAL_UART_MspInit+0x168>)
 8000fda:	4a32      	ldr	r2, [pc, #200]	@ (80010a4 <HAL_UART_MspInit+0x16c>)
 8000fdc:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8000fde:	4b30      	ldr	r3, [pc, #192]	@ (80010a0 <HAL_UART_MspInit+0x168>)
 8000fe0:	221b      	movs	r2, #27
 8000fe2:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000fe4:	4b2e      	ldr	r3, [pc, #184]	@ (80010a0 <HAL_UART_MspInit+0x168>)
 8000fe6:	2210      	movs	r2, #16
 8000fe8:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fea:	4b2d      	ldr	r3, [pc, #180]	@ (80010a0 <HAL_UART_MspInit+0x168>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000ff0:	4b2b      	ldr	r3, [pc, #172]	@ (80010a0 <HAL_UART_MspInit+0x168>)
 8000ff2:	2280      	movs	r2, #128	@ 0x80
 8000ff4:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ff6:	4b2a      	ldr	r3, [pc, #168]	@ (80010a0 <HAL_UART_MspInit+0x168>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ffc:	4b28      	ldr	r3, [pc, #160]	@ (80010a0 <HAL_UART_MspInit+0x168>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001002:	4b27      	ldr	r3, [pc, #156]	@ (80010a0 <HAL_UART_MspInit+0x168>)
 8001004:	2200      	movs	r2, #0
 8001006:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001008:	4b25      	ldr	r3, [pc, #148]	@ (80010a0 <HAL_UART_MspInit+0x168>)
 800100a:	2200      	movs	r2, #0
 800100c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800100e:	4824      	ldr	r0, [pc, #144]	@ (80010a0 <HAL_UART_MspInit+0x168>)
 8001010:	f000 fa6a 	bl	80014e8 <HAL_DMA_Init>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 800101a:	f7ff ff3d 	bl	8000e98 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4a1f      	ldr	r2, [pc, #124]	@ (80010a0 <HAL_UART_MspInit+0x168>)
 8001022:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001024:	4a1e      	ldr	r2, [pc, #120]	@ (80010a0 <HAL_UART_MspInit+0x168>)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel2;
 800102a:	4b1f      	ldr	r3, [pc, #124]	@ (80010a8 <HAL_UART_MspInit+0x170>)
 800102c:	4a1f      	ldr	r2, [pc, #124]	@ (80010ac <HAL_UART_MspInit+0x174>)
 800102e:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8001030:	4b1d      	ldr	r3, [pc, #116]	@ (80010a8 <HAL_UART_MspInit+0x170>)
 8001032:	221a      	movs	r2, #26
 8001034:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001036:	4b1c      	ldr	r3, [pc, #112]	@ (80010a8 <HAL_UART_MspInit+0x170>)
 8001038:	2200      	movs	r2, #0
 800103a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800103c:	4b1a      	ldr	r3, [pc, #104]	@ (80010a8 <HAL_UART_MspInit+0x170>)
 800103e:	2200      	movs	r2, #0
 8001040:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001042:	4b19      	ldr	r3, [pc, #100]	@ (80010a8 <HAL_UART_MspInit+0x170>)
 8001044:	2280      	movs	r2, #128	@ 0x80
 8001046:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001048:	4b17      	ldr	r3, [pc, #92]	@ (80010a8 <HAL_UART_MspInit+0x170>)
 800104a:	2200      	movs	r2, #0
 800104c:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800104e:	4b16      	ldr	r3, [pc, #88]	@ (80010a8 <HAL_UART_MspInit+0x170>)
 8001050:	2200      	movs	r2, #0
 8001052:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001054:	4b14      	ldr	r3, [pc, #80]	@ (80010a8 <HAL_UART_MspInit+0x170>)
 8001056:	2200      	movs	r2, #0
 8001058:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800105a:	4b13      	ldr	r3, [pc, #76]	@ (80010a8 <HAL_UART_MspInit+0x170>)
 800105c:	2200      	movs	r2, #0
 800105e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001060:	4811      	ldr	r0, [pc, #68]	@ (80010a8 <HAL_UART_MspInit+0x170>)
 8001062:	f000 fa41 	bl	80014e8 <HAL_DMA_Init>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <HAL_UART_MspInit+0x138>
    {
      Error_Handler();
 800106c:	f7ff ff14 	bl	8000e98 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	4a0d      	ldr	r2, [pc, #52]	@ (80010a8 <HAL_UART_MspInit+0x170>)
 8001074:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8001078:	4a0b      	ldr	r2, [pc, #44]	@ (80010a8 <HAL_UART_MspInit+0x170>)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800107e:	2200      	movs	r2, #0
 8001080:	2100      	movs	r1, #0
 8001082:	2026      	movs	r0, #38	@ 0x26
 8001084:	f000 f9fb 	bl	800147e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001088:	2026      	movs	r0, #38	@ 0x26
 800108a:	f000 fa12 	bl	80014b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800108e:	bf00      	nop
 8001090:	3778      	adds	r7, #120	@ 0x78
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	40004400 	.word	0x40004400
 800109c:	40021000 	.word	0x40021000
 80010a0:	200003c4 	.word	0x200003c4
 80010a4:	40020008 	.word	0x40020008
 80010a8:	20000424 	.word	0x20000424
 80010ac:	4002001c 	.word	0x4002001c

080010b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010b4:	bf00      	nop
 80010b6:	e7fd      	b.n	80010b4 <NMI_Handler+0x4>

080010b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010bc:	bf00      	nop
 80010be:	e7fd      	b.n	80010bc <HardFault_Handler+0x4>

080010c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010c4:	bf00      	nop
 80010c6:	e7fd      	b.n	80010c4 <MemManage_Handler+0x4>

080010c8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010cc:	bf00      	nop
 80010ce:	e7fd      	b.n	80010cc <BusFault_Handler+0x4>

080010d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010d4:	bf00      	nop
 80010d6:	e7fd      	b.n	80010d4 <UsageFault_Handler+0x4>

080010d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010dc:	bf00      	nop
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr

080010e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010e6:	b480      	push	{r7}
 80010e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010ea:	bf00      	nop
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr

080010f4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010f8:	bf00      	nop
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr

08001102 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001102:	b580      	push	{r7, lr}
 8001104:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001106:	f000 f8c1 	bl	800128c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800110a:	bf00      	nop
 800110c:	bd80      	pop	{r7, pc}
	...

08001110 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001114:	4802      	ldr	r0, [pc, #8]	@ (8001120 <DMA1_Channel1_IRQHandler+0x10>)
 8001116:	f000 fbca 	bl	80018ae <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800111a:	bf00      	nop
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	200003c4 	.word	0x200003c4

08001124 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001128:	4802      	ldr	r0, [pc, #8]	@ (8001134 <DMA1_Channel2_IRQHandler+0x10>)
 800112a:	f000 fbc0 	bl	80018ae <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800112e:	bf00      	nop
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	20000424 	.word	0x20000424

08001138 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 800113c:	4802      	ldr	r0, [pc, #8]	@ (8001148 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800113e:	f002 f8c5 	bl	80032cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001142:	bf00      	nop
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	2000022c 	.word	0x2000022c

0800114c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001150:	4802      	ldr	r0, [pc, #8]	@ (800115c <USART2_IRQHandler+0x10>)
 8001152:	f002 ff7f 	bl	8004054 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001156:	bf00      	nop
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	200002f8 	.word	0x200002f8

08001160 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001164:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001168:	f000 fe8a 	bl	8001e80 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800116c:	bf00      	nop
 800116e:	bd80      	pop	{r7, pc}

08001170 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001174:	4b06      	ldr	r3, [pc, #24]	@ (8001190 <SystemInit+0x20>)
 8001176:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800117a:	4a05      	ldr	r2, [pc, #20]	@ (8001190 <SystemInit+0x20>)
 800117c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001180:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001184:	bf00      	nop
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop
 8001190:	e000ed00 	.word	0xe000ed00

08001194 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001194:	480d      	ldr	r0, [pc, #52]	@ (80011cc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001196:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001198:	f7ff ffea 	bl	8001170 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800119c:	480c      	ldr	r0, [pc, #48]	@ (80011d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800119e:	490d      	ldr	r1, [pc, #52]	@ (80011d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80011a0:	4a0d      	ldr	r2, [pc, #52]	@ (80011d8 <LoopForever+0xe>)
  movs r3, #0
 80011a2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80011a4:	e002      	b.n	80011ac <LoopCopyDataInit>

080011a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011aa:	3304      	adds	r3, #4

080011ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011b0:	d3f9      	bcc.n	80011a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011b2:	4a0a      	ldr	r2, [pc, #40]	@ (80011dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80011b4:	4c0a      	ldr	r4, [pc, #40]	@ (80011e0 <LoopForever+0x16>)
  movs r3, #0
 80011b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011b8:	e001      	b.n	80011be <LoopFillZerobss>

080011ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011bc:	3204      	adds	r2, #4

080011be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011c0:	d3fb      	bcc.n	80011ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011c2:	f004 fc5d 	bl	8005a80 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80011c6:	f7ff fcd3 	bl	8000b70 <main>

080011ca <LoopForever>:

LoopForever:
    b LoopForever
 80011ca:	e7fe      	b.n	80011ca <LoopForever>
  ldr   r0, =_estack
 80011cc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80011d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011d4:	2000020c 	.word	0x2000020c
  ldr r2, =_sidata
 80011d8:	08005b4c 	.word	0x08005b4c
  ldr r2, =_sbss
 80011dc:	2000020c 	.word	0x2000020c
  ldr r4, =_ebss
 80011e0:	20000af0 	.word	0x20000af0

080011e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80011e4:	e7fe      	b.n	80011e4 <ADC1_2_IRQHandler>

080011e6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011e6:	b580      	push	{r7, lr}
 80011e8:	b082      	sub	sp, #8
 80011ea:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80011ec:	2300      	movs	r3, #0
 80011ee:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011f0:	2003      	movs	r0, #3
 80011f2:	f000 f939 	bl	8001468 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011f6:	2000      	movs	r0, #0
 80011f8:	f000 f80e 	bl	8001218 <HAL_InitTick>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d002      	beq.n	8001208 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001202:	2301      	movs	r3, #1
 8001204:	71fb      	strb	r3, [r7, #7]
 8001206:	e001      	b.n	800120c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001208:	f7ff fe4c 	bl	8000ea4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800120c:	79fb      	ldrb	r3, [r7, #7]

}
 800120e:	4618      	mov	r0, r3
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
	...

08001218 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001220:	2300      	movs	r3, #0
 8001222:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001224:	4b16      	ldr	r3, [pc, #88]	@ (8001280 <HAL_InitTick+0x68>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d022      	beq.n	8001272 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800122c:	4b15      	ldr	r3, [pc, #84]	@ (8001284 <HAL_InitTick+0x6c>)
 800122e:	681a      	ldr	r2, [r3, #0]
 8001230:	4b13      	ldr	r3, [pc, #76]	@ (8001280 <HAL_InitTick+0x68>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001238:	fbb1 f3f3 	udiv	r3, r1, r3
 800123c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001240:	4618      	mov	r0, r3
 8001242:	f000 f944 	bl	80014ce <HAL_SYSTICK_Config>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d10f      	bne.n	800126c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2b0f      	cmp	r3, #15
 8001250:	d809      	bhi.n	8001266 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001252:	2200      	movs	r2, #0
 8001254:	6879      	ldr	r1, [r7, #4]
 8001256:	f04f 30ff 	mov.w	r0, #4294967295
 800125a:	f000 f910 	bl	800147e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800125e:	4a0a      	ldr	r2, [pc, #40]	@ (8001288 <HAL_InitTick+0x70>)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6013      	str	r3, [r2, #0]
 8001264:	e007      	b.n	8001276 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001266:	2301      	movs	r3, #1
 8001268:	73fb      	strb	r3, [r7, #15]
 800126a:	e004      	b.n	8001276 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800126c:	2301      	movs	r3, #1
 800126e:	73fb      	strb	r3, [r7, #15]
 8001270:	e001      	b.n	8001276 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001272:	2301      	movs	r3, #1
 8001274:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001276:	7bfb      	ldrb	r3, [r7, #15]
}
 8001278:	4618      	mov	r0, r3
 800127a:	3710      	adds	r7, #16
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	20000208 	.word	0x20000208
 8001284:	20000200 	.word	0x20000200
 8001288:	20000204 	.word	0x20000204

0800128c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001290:	4b05      	ldr	r3, [pc, #20]	@ (80012a8 <HAL_IncTick+0x1c>)
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	4b05      	ldr	r3, [pc, #20]	@ (80012ac <HAL_IncTick+0x20>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4413      	add	r3, r2
 800129a:	4a03      	ldr	r2, [pc, #12]	@ (80012a8 <HAL_IncTick+0x1c>)
 800129c:	6013      	str	r3, [r2, #0]
}
 800129e:	bf00      	nop
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr
 80012a8:	20000aec 	.word	0x20000aec
 80012ac:	20000208 	.word	0x20000208

080012b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  return uwTick;
 80012b4:	4b03      	ldr	r3, [pc, #12]	@ (80012c4 <HAL_GetTick+0x14>)
 80012b6:	681b      	ldr	r3, [r3, #0]
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr
 80012c2:	bf00      	nop
 80012c4:	20000aec 	.word	0x20000aec

080012c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b085      	sub	sp, #20
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	f003 0307 	and.w	r3, r3, #7
 80012d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012d8:	4b0c      	ldr	r3, [pc, #48]	@ (800130c <__NVIC_SetPriorityGrouping+0x44>)
 80012da:	68db      	ldr	r3, [r3, #12]
 80012dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012de:	68ba      	ldr	r2, [r7, #8]
 80012e0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80012e4:	4013      	ands	r3, r2
 80012e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012ec:	68bb      	ldr	r3, [r7, #8]
 80012ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012f0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80012f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012fa:	4a04      	ldr	r2, [pc, #16]	@ (800130c <__NVIC_SetPriorityGrouping+0x44>)
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	60d3      	str	r3, [r2, #12]
}
 8001300:	bf00      	nop
 8001302:	3714      	adds	r7, #20
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr
 800130c:	e000ed00 	.word	0xe000ed00

08001310 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001314:	4b04      	ldr	r3, [pc, #16]	@ (8001328 <__NVIC_GetPriorityGrouping+0x18>)
 8001316:	68db      	ldr	r3, [r3, #12]
 8001318:	0a1b      	lsrs	r3, r3, #8
 800131a:	f003 0307 	and.w	r3, r3, #7
}
 800131e:	4618      	mov	r0, r3
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr
 8001328:	e000ed00 	.word	0xe000ed00

0800132c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
 8001332:	4603      	mov	r3, r0
 8001334:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800133a:	2b00      	cmp	r3, #0
 800133c:	db0b      	blt.n	8001356 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800133e:	79fb      	ldrb	r3, [r7, #7]
 8001340:	f003 021f 	and.w	r2, r3, #31
 8001344:	4907      	ldr	r1, [pc, #28]	@ (8001364 <__NVIC_EnableIRQ+0x38>)
 8001346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800134a:	095b      	lsrs	r3, r3, #5
 800134c:	2001      	movs	r0, #1
 800134e:	fa00 f202 	lsl.w	r2, r0, r2
 8001352:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001356:	bf00      	nop
 8001358:	370c      	adds	r7, #12
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	e000e100 	.word	0xe000e100

08001368 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	4603      	mov	r3, r0
 8001370:	6039      	str	r1, [r7, #0]
 8001372:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001374:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001378:	2b00      	cmp	r3, #0
 800137a:	db0a      	blt.n	8001392 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	b2da      	uxtb	r2, r3
 8001380:	490c      	ldr	r1, [pc, #48]	@ (80013b4 <__NVIC_SetPriority+0x4c>)
 8001382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001386:	0112      	lsls	r2, r2, #4
 8001388:	b2d2      	uxtb	r2, r2
 800138a:	440b      	add	r3, r1
 800138c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001390:	e00a      	b.n	80013a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	b2da      	uxtb	r2, r3
 8001396:	4908      	ldr	r1, [pc, #32]	@ (80013b8 <__NVIC_SetPriority+0x50>)
 8001398:	79fb      	ldrb	r3, [r7, #7]
 800139a:	f003 030f 	and.w	r3, r3, #15
 800139e:	3b04      	subs	r3, #4
 80013a0:	0112      	lsls	r2, r2, #4
 80013a2:	b2d2      	uxtb	r2, r2
 80013a4:	440b      	add	r3, r1
 80013a6:	761a      	strb	r2, [r3, #24]
}
 80013a8:	bf00      	nop
 80013aa:	370c      	adds	r7, #12
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr
 80013b4:	e000e100 	.word	0xe000e100
 80013b8:	e000ed00 	.word	0xe000ed00

080013bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013bc:	b480      	push	{r7}
 80013be:	b089      	sub	sp, #36	@ 0x24
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	60f8      	str	r0, [r7, #12]
 80013c4:	60b9      	str	r1, [r7, #8]
 80013c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	f003 0307 	and.w	r3, r3, #7
 80013ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013d0:	69fb      	ldr	r3, [r7, #28]
 80013d2:	f1c3 0307 	rsb	r3, r3, #7
 80013d6:	2b04      	cmp	r3, #4
 80013d8:	bf28      	it	cs
 80013da:	2304      	movcs	r3, #4
 80013dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013de:	69fb      	ldr	r3, [r7, #28]
 80013e0:	3304      	adds	r3, #4
 80013e2:	2b06      	cmp	r3, #6
 80013e4:	d902      	bls.n	80013ec <NVIC_EncodePriority+0x30>
 80013e6:	69fb      	ldr	r3, [r7, #28]
 80013e8:	3b03      	subs	r3, #3
 80013ea:	e000      	b.n	80013ee <NVIC_EncodePriority+0x32>
 80013ec:	2300      	movs	r3, #0
 80013ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013f0:	f04f 32ff 	mov.w	r2, #4294967295
 80013f4:	69bb      	ldr	r3, [r7, #24]
 80013f6:	fa02 f303 	lsl.w	r3, r2, r3
 80013fa:	43da      	mvns	r2, r3
 80013fc:	68bb      	ldr	r3, [r7, #8]
 80013fe:	401a      	ands	r2, r3
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001404:	f04f 31ff 	mov.w	r1, #4294967295
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	fa01 f303 	lsl.w	r3, r1, r3
 800140e:	43d9      	mvns	r1, r3
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001414:	4313      	orrs	r3, r2
         );
}
 8001416:	4618      	mov	r0, r3
 8001418:	3724      	adds	r7, #36	@ 0x24
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
	...

08001424 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	3b01      	subs	r3, #1
 8001430:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001434:	d301      	bcc.n	800143a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001436:	2301      	movs	r3, #1
 8001438:	e00f      	b.n	800145a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800143a:	4a0a      	ldr	r2, [pc, #40]	@ (8001464 <SysTick_Config+0x40>)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	3b01      	subs	r3, #1
 8001440:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001442:	210f      	movs	r1, #15
 8001444:	f04f 30ff 	mov.w	r0, #4294967295
 8001448:	f7ff ff8e 	bl	8001368 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800144c:	4b05      	ldr	r3, [pc, #20]	@ (8001464 <SysTick_Config+0x40>)
 800144e:	2200      	movs	r2, #0
 8001450:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001452:	4b04      	ldr	r3, [pc, #16]	@ (8001464 <SysTick_Config+0x40>)
 8001454:	2207      	movs	r2, #7
 8001456:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001458:	2300      	movs	r3, #0
}
 800145a:	4618      	mov	r0, r3
 800145c:	3708      	adds	r7, #8
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	e000e010 	.word	0xe000e010

08001468 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001470:	6878      	ldr	r0, [r7, #4]
 8001472:	f7ff ff29 	bl	80012c8 <__NVIC_SetPriorityGrouping>
}
 8001476:	bf00      	nop
 8001478:	3708      	adds	r7, #8
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}

0800147e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800147e:	b580      	push	{r7, lr}
 8001480:	b086      	sub	sp, #24
 8001482:	af00      	add	r7, sp, #0
 8001484:	4603      	mov	r3, r0
 8001486:	60b9      	str	r1, [r7, #8]
 8001488:	607a      	str	r2, [r7, #4]
 800148a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800148c:	f7ff ff40 	bl	8001310 <__NVIC_GetPriorityGrouping>
 8001490:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001492:	687a      	ldr	r2, [r7, #4]
 8001494:	68b9      	ldr	r1, [r7, #8]
 8001496:	6978      	ldr	r0, [r7, #20]
 8001498:	f7ff ff90 	bl	80013bc <NVIC_EncodePriority>
 800149c:	4602      	mov	r2, r0
 800149e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014a2:	4611      	mov	r1, r2
 80014a4:	4618      	mov	r0, r3
 80014a6:	f7ff ff5f 	bl	8001368 <__NVIC_SetPriority>
}
 80014aa:	bf00      	nop
 80014ac:	3718      	adds	r7, #24
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}

080014b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014b2:	b580      	push	{r7, lr}
 80014b4:	b082      	sub	sp, #8
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	4603      	mov	r3, r0
 80014ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7ff ff33 	bl	800132c <__NVIC_EnableIRQ>
}
 80014c6:	bf00      	nop
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}

080014ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014ce:	b580      	push	{r7, lr}
 80014d0:	b082      	sub	sp, #8
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014d6:	6878      	ldr	r0, [r7, #4]
 80014d8:	f7ff ffa4 	bl	8001424 <SysTick_Config>
 80014dc:	4603      	mov	r3, r0
}
 80014de:	4618      	mov	r0, r3
 80014e0:	3708      	adds	r7, #8
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
	...

080014e8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b084      	sub	sp, #16
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d101      	bne.n	80014fa <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	e08d      	b.n	8001616 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	461a      	mov	r2, r3
 8001500:	4b47      	ldr	r3, [pc, #284]	@ (8001620 <HAL_DMA_Init+0x138>)
 8001502:	429a      	cmp	r2, r3
 8001504:	d80f      	bhi.n	8001526 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	461a      	mov	r2, r3
 800150c:	4b45      	ldr	r3, [pc, #276]	@ (8001624 <HAL_DMA_Init+0x13c>)
 800150e:	4413      	add	r3, r2
 8001510:	4a45      	ldr	r2, [pc, #276]	@ (8001628 <HAL_DMA_Init+0x140>)
 8001512:	fba2 2303 	umull	r2, r3, r2, r3
 8001516:	091b      	lsrs	r3, r3, #4
 8001518:	009a      	lsls	r2, r3, #2
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	4a42      	ldr	r2, [pc, #264]	@ (800162c <HAL_DMA_Init+0x144>)
 8001522:	641a      	str	r2, [r3, #64]	@ 0x40
 8001524:	e00e      	b.n	8001544 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	461a      	mov	r2, r3
 800152c:	4b40      	ldr	r3, [pc, #256]	@ (8001630 <HAL_DMA_Init+0x148>)
 800152e:	4413      	add	r3, r2
 8001530:	4a3d      	ldr	r2, [pc, #244]	@ (8001628 <HAL_DMA_Init+0x140>)
 8001532:	fba2 2303 	umull	r2, r3, r2, r3
 8001536:	091b      	lsrs	r3, r3, #4
 8001538:	009a      	lsls	r2, r3, #2
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	4a3c      	ldr	r2, [pc, #240]	@ (8001634 <HAL_DMA_Init+0x14c>)
 8001542:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2202      	movs	r2, #2
 8001548:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800155a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800155e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001568:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	691b      	ldr	r3, [r3, #16]
 800156e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001574:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	699b      	ldr	r3, [r3, #24]
 800157a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001580:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6a1b      	ldr	r3, [r3, #32]
 8001586:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001588:	68fa      	ldr	r2, [r7, #12]
 800158a:	4313      	orrs	r3, r2
 800158c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	68fa      	ldr	r2, [r7, #12]
 8001594:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001596:	6878      	ldr	r0, [r7, #4]
 8001598:	f000 fa76 	bl	8001a88 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	689b      	ldr	r3, [r3, #8]
 80015a0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80015a4:	d102      	bne.n	80015ac <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2200      	movs	r2, #0
 80015aa:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	685a      	ldr	r2, [r3, #4]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015b4:	b2d2      	uxtb	r2, r2
 80015b6:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015bc:	687a      	ldr	r2, [r7, #4]
 80015be:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80015c0:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d010      	beq.n	80015ec <HAL_DMA_Init+0x104>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	2b04      	cmp	r3, #4
 80015d0:	d80c      	bhi.n	80015ec <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80015d2:	6878      	ldr	r0, [r7, #4]
 80015d4:	f000 fa96 	bl	8001b04 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015dc:	2200      	movs	r2, #0
 80015de:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015e4:	687a      	ldr	r2, [r7, #4]
 80015e6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80015e8:	605a      	str	r2, [r3, #4]
 80015ea:	e008      	b.n	80015fe <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2200      	movs	r2, #0
 80015f0:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2200      	movs	r2, #0
 80015f6:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2200      	movs	r2, #0
 80015fc:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2200      	movs	r2, #0
 8001602:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2201      	movs	r2, #1
 8001608:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2200      	movs	r2, #0
 8001610:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8001614:	2300      	movs	r3, #0
}
 8001616:	4618      	mov	r0, r3
 8001618:	3710      	adds	r7, #16
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	40020407 	.word	0x40020407
 8001624:	bffdfff8 	.word	0xbffdfff8
 8001628:	cccccccd 	.word	0xcccccccd
 800162c:	40020000 	.word	0x40020000
 8001630:	bffdfbf8 	.word	0xbffdfbf8
 8001634:	40020400 	.word	0x40020400

08001638 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b086      	sub	sp, #24
 800163c:	af00      	add	r7, sp, #0
 800163e:	60f8      	str	r0, [r7, #12]
 8001640:	60b9      	str	r1, [r7, #8]
 8001642:	607a      	str	r2, [r7, #4]
 8001644:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001646:	2300      	movs	r3, #0
 8001648:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001650:	2b01      	cmp	r3, #1
 8001652:	d101      	bne.n	8001658 <HAL_DMA_Start_IT+0x20>
 8001654:	2302      	movs	r3, #2
 8001656:	e066      	b.n	8001726 <HAL_DMA_Start_IT+0xee>
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	2201      	movs	r2, #1
 800165c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001666:	b2db      	uxtb	r3, r3
 8001668:	2b01      	cmp	r3, #1
 800166a:	d155      	bne.n	8001718 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	2202      	movs	r2, #2
 8001670:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	2200      	movs	r2, #0
 8001678:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f022 0201 	bic.w	r2, r2, #1
 8001688:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	687a      	ldr	r2, [r7, #4]
 800168e:	68b9      	ldr	r1, [r7, #8]
 8001690:	68f8      	ldr	r0, [r7, #12]
 8001692:	f000 f9bb 	bl	8001a0c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800169a:	2b00      	cmp	r3, #0
 800169c:	d008      	beq.n	80016b0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f042 020e 	orr.w	r2, r2, #14
 80016ac:	601a      	str	r2, [r3, #0]
 80016ae:	e00f      	b.n	80016d0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f022 0204 	bic.w	r2, r2, #4
 80016be:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f042 020a 	orr.w	r2, r2, #10
 80016ce:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d007      	beq.n	80016ee <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80016e8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80016ec:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d007      	beq.n	8001706 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001700:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001704:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f042 0201 	orr.w	r2, r2, #1
 8001714:	601a      	str	r2, [r3, #0]
 8001716:	e005      	b.n	8001724 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	2200      	movs	r2, #0
 800171c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001720:	2302      	movs	r3, #2
 8001722:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001724:	7dfb      	ldrb	r3, [r7, #23]
}
 8001726:	4618      	mov	r0, r3
 8001728:	3718      	adds	r7, #24
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}

0800172e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800172e:	b480      	push	{r7}
 8001730:	b085      	sub	sp, #20
 8001732:	af00      	add	r7, sp, #0
 8001734:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001736:	2300      	movs	r3, #0
 8001738:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001740:	b2db      	uxtb	r3, r3
 8001742:	2b02      	cmp	r3, #2
 8001744:	d005      	beq.n	8001752 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2204      	movs	r2, #4
 800174a:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800174c:	2301      	movs	r3, #1
 800174e:	73fb      	strb	r3, [r7, #15]
 8001750:	e037      	b.n	80017c2 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f022 020e 	bic.w	r2, r2, #14
 8001760:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800176c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001770:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f022 0201 	bic.w	r2, r2, #1
 8001780:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001786:	f003 021f 	and.w	r2, r3, #31
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800178e:	2101      	movs	r1, #1
 8001790:	fa01 f202 	lsl.w	r2, r1, r2
 8001794:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800179a:	687a      	ldr	r2, [r7, #4]
 800179c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800179e:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d00c      	beq.n	80017c2 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017b2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80017b6:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017bc:	687a      	ldr	r2, [r7, #4]
 80017be:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80017c0:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2201      	movs	r2, #1
 80017c6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2200      	movs	r2, #0
 80017ce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 80017d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	3714      	adds	r7, #20
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr

080017e0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b084      	sub	sp, #16
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017e8:	2300      	movs	r3, #0
 80017ea:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80017f2:	b2db      	uxtb	r3, r3
 80017f4:	2b02      	cmp	r3, #2
 80017f6:	d00d      	beq.n	8001814 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2204      	movs	r2, #4
 80017fc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2201      	movs	r2, #1
 8001802:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2200      	movs	r2, #0
 800180a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	73fb      	strb	r3, [r7, #15]
 8001812:	e047      	b.n	80018a4 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f022 020e 	bic.w	r2, r2, #14
 8001822:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	681a      	ldr	r2, [r3, #0]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f022 0201 	bic.w	r2, r2, #1
 8001832:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800183e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001842:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001848:	f003 021f 	and.w	r2, r3, #31
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001850:	2101      	movs	r1, #1
 8001852:	fa01 f202 	lsl.w	r2, r1, r2
 8001856:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800185c:	687a      	ldr	r2, [r7, #4]
 800185e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001860:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001866:	2b00      	cmp	r3, #0
 8001868:	d00c      	beq.n	8001884 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001874:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001878:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800187e:	687a      	ldr	r2, [r7, #4]
 8001880:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001882:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2201      	movs	r2, #1
 8001888:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2200      	movs	r2, #0
 8001890:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001898:	2b00      	cmp	r3, #0
 800189a:	d003      	beq.n	80018a4 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80018a0:	6878      	ldr	r0, [r7, #4]
 80018a2:	4798      	blx	r3
    }
  }
  return status;
 80018a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3710      	adds	r7, #16
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}

080018ae <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80018ae:	b580      	push	{r7, lr}
 80018b0:	b084      	sub	sp, #16
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018ca:	f003 031f 	and.w	r3, r3, #31
 80018ce:	2204      	movs	r2, #4
 80018d0:	409a      	lsls	r2, r3
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	4013      	ands	r3, r2
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d026      	beq.n	8001928 <HAL_DMA_IRQHandler+0x7a>
 80018da:	68bb      	ldr	r3, [r7, #8]
 80018dc:	f003 0304 	and.w	r3, r3, #4
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d021      	beq.n	8001928 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 0320 	and.w	r3, r3, #32
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d107      	bne.n	8001902 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f022 0204 	bic.w	r2, r2, #4
 8001900:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001906:	f003 021f 	and.w	r2, r3, #31
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800190e:	2104      	movs	r1, #4
 8001910:	fa01 f202 	lsl.w	r2, r1, r2
 8001914:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800191a:	2b00      	cmp	r3, #0
 800191c:	d071      	beq.n	8001a02 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001922:	6878      	ldr	r0, [r7, #4]
 8001924:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001926:	e06c      	b.n	8001a02 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800192c:	f003 031f 	and.w	r3, r3, #31
 8001930:	2202      	movs	r2, #2
 8001932:	409a      	lsls	r2, r3
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	4013      	ands	r3, r2
 8001938:	2b00      	cmp	r3, #0
 800193a:	d02e      	beq.n	800199a <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	f003 0302 	and.w	r3, r3, #2
 8001942:	2b00      	cmp	r3, #0
 8001944:	d029      	beq.n	800199a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f003 0320 	and.w	r3, r3, #32
 8001950:	2b00      	cmp	r3, #0
 8001952:	d10b      	bne.n	800196c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f022 020a 	bic.w	r2, r2, #10
 8001962:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2201      	movs	r2, #1
 8001968:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001970:	f003 021f 	and.w	r2, r3, #31
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001978:	2102      	movs	r1, #2
 800197a:	fa01 f202 	lsl.w	r2, r1, r2
 800197e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2200      	movs	r2, #0
 8001984:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800198c:	2b00      	cmp	r3, #0
 800198e:	d038      	beq.n	8001a02 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001994:	6878      	ldr	r0, [r7, #4]
 8001996:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001998:	e033      	b.n	8001a02 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800199e:	f003 031f 	and.w	r3, r3, #31
 80019a2:	2208      	movs	r2, #8
 80019a4:	409a      	lsls	r2, r3
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	4013      	ands	r3, r2
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d02a      	beq.n	8001a04 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80019ae:	68bb      	ldr	r3, [r7, #8]
 80019b0:	f003 0308 	and.w	r3, r3, #8
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d025      	beq.n	8001a04 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f022 020e 	bic.w	r2, r2, #14
 80019c6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019cc:	f003 021f 	and.w	r2, r3, #31
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019d4:	2101      	movs	r1, #1
 80019d6:	fa01 f202 	lsl.w	r2, r1, r2
 80019da:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2201      	movs	r2, #1
 80019e0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2201      	movs	r2, #1
 80019e6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2200      	movs	r2, #0
 80019ee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d004      	beq.n	8001a04 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001a02:	bf00      	nop
 8001a04:	bf00      	nop
}
 8001a06:	3710      	adds	r7, #16
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}

08001a0c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b085      	sub	sp, #20
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	60f8      	str	r0, [r7, #12]
 8001a14:	60b9      	str	r1, [r7, #8]
 8001a16:	607a      	str	r2, [r7, #4]
 8001a18:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a1e:	68fa      	ldr	r2, [r7, #12]
 8001a20:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001a22:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d004      	beq.n	8001a36 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a30:	68fa      	ldr	r2, [r7, #12]
 8001a32:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001a34:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a3a:	f003 021f 	and.w	r2, r3, #31
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a42:	2101      	movs	r1, #1
 8001a44:	fa01 f202 	lsl.w	r2, r1, r2
 8001a48:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	683a      	ldr	r2, [r7, #0]
 8001a50:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	689b      	ldr	r3, [r3, #8]
 8001a56:	2b10      	cmp	r3, #16
 8001a58:	d108      	bne.n	8001a6c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	687a      	ldr	r2, [r7, #4]
 8001a60:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	68ba      	ldr	r2, [r7, #8]
 8001a68:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001a6a:	e007      	b.n	8001a7c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	68ba      	ldr	r2, [r7, #8]
 8001a72:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	687a      	ldr	r2, [r7, #4]
 8001a7a:	60da      	str	r2, [r3, #12]
}
 8001a7c:	bf00      	nop
 8001a7e:	3714      	adds	r7, #20
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr

08001a88 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b087      	sub	sp, #28
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	461a      	mov	r2, r3
 8001a96:	4b16      	ldr	r3, [pc, #88]	@ (8001af0 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d802      	bhi.n	8001aa2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8001a9c:	4b15      	ldr	r3, [pc, #84]	@ (8001af4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001a9e:	617b      	str	r3, [r7, #20]
 8001aa0:	e001      	b.n	8001aa6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8001aa2:	4b15      	ldr	r3, [pc, #84]	@ (8001af8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001aa4:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	b2db      	uxtb	r3, r3
 8001ab0:	3b08      	subs	r3, #8
 8001ab2:	4a12      	ldr	r2, [pc, #72]	@ (8001afc <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001ab4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ab8:	091b      	lsrs	r3, r3, #4
 8001aba:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ac0:	089b      	lsrs	r3, r3, #2
 8001ac2:	009a      	lsls	r2, r3, #2
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	4413      	add	r3, r2
 8001ac8:	461a      	mov	r2, r3
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	4a0b      	ldr	r2, [pc, #44]	@ (8001b00 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001ad2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	f003 031f 	and.w	r3, r3, #31
 8001ada:	2201      	movs	r2, #1
 8001adc:	409a      	lsls	r2, r3
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8001ae2:	bf00      	nop
 8001ae4:	371c      	adds	r7, #28
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop
 8001af0:	40020407 	.word	0x40020407
 8001af4:	40020800 	.word	0x40020800
 8001af8:	40020820 	.word	0x40020820
 8001afc:	cccccccd 	.word	0xcccccccd
 8001b00:	40020880 	.word	0x40020880

08001b04 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b085      	sub	sp, #20
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	b2db      	uxtb	r3, r3
 8001b12:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001b14:	68fa      	ldr	r2, [r7, #12]
 8001b16:	4b0b      	ldr	r3, [pc, #44]	@ (8001b44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001b18:	4413      	add	r3, r2
 8001b1a:	009b      	lsls	r3, r3, #2
 8001b1c:	461a      	mov	r2, r3
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	4a08      	ldr	r2, [pc, #32]	@ (8001b48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001b26:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	3b01      	subs	r3, #1
 8001b2c:	f003 031f 	and.w	r3, r3, #31
 8001b30:	2201      	movs	r2, #1
 8001b32:	409a      	lsls	r2, r3
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8001b38:	bf00      	nop
 8001b3a:	3714      	adds	r7, #20
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr
 8001b44:	1000823f 	.word	0x1000823f
 8001b48:	40020940 	.word	0x40020940

08001b4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b087      	sub	sp, #28
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
 8001b54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001b56:	2300      	movs	r3, #0
 8001b58:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001b5a:	e15a      	b.n	8001e12 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	2101      	movs	r1, #1
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	fa01 f303 	lsl.w	r3, r1, r3
 8001b68:	4013      	ands	r3, r2
 8001b6a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	f000 814c 	beq.w	8001e0c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f003 0303 	and.w	r3, r3, #3
 8001b7c:	2b01      	cmp	r3, #1
 8001b7e:	d005      	beq.n	8001b8c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001b88:	2b02      	cmp	r3, #2
 8001b8a:	d130      	bne.n	8001bee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	005b      	lsls	r3, r3, #1
 8001b96:	2203      	movs	r2, #3
 8001b98:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9c:	43db      	mvns	r3, r3
 8001b9e:	693a      	ldr	r2, [r7, #16]
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	68da      	ldr	r2, [r3, #12]
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	005b      	lsls	r3, r3, #1
 8001bac:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb0:	693a      	ldr	r2, [r7, #16]
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	693a      	ldr	r2, [r7, #16]
 8001bba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bca:	43db      	mvns	r3, r3
 8001bcc:	693a      	ldr	r2, [r7, #16]
 8001bce:	4013      	ands	r3, r2
 8001bd0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	091b      	lsrs	r3, r3, #4
 8001bd8:	f003 0201 	and.w	r2, r3, #1
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	fa02 f303 	lsl.w	r3, r2, r3
 8001be2:	693a      	ldr	r2, [r7, #16]
 8001be4:	4313      	orrs	r3, r2
 8001be6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	693a      	ldr	r2, [r7, #16]
 8001bec:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	f003 0303 	and.w	r3, r3, #3
 8001bf6:	2b03      	cmp	r3, #3
 8001bf8:	d017      	beq.n	8001c2a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	68db      	ldr	r3, [r3, #12]
 8001bfe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	005b      	lsls	r3, r3, #1
 8001c04:	2203      	movs	r2, #3
 8001c06:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0a:	43db      	mvns	r3, r3
 8001c0c:	693a      	ldr	r2, [r7, #16]
 8001c0e:	4013      	ands	r3, r2
 8001c10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	689a      	ldr	r2, [r3, #8]
 8001c16:	697b      	ldr	r3, [r7, #20]
 8001c18:	005b      	lsls	r3, r3, #1
 8001c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1e:	693a      	ldr	r2, [r7, #16]
 8001c20:	4313      	orrs	r3, r2
 8001c22:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	693a      	ldr	r2, [r7, #16]
 8001c28:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	f003 0303 	and.w	r3, r3, #3
 8001c32:	2b02      	cmp	r3, #2
 8001c34:	d123      	bne.n	8001c7e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	08da      	lsrs	r2, r3, #3
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	3208      	adds	r2, #8
 8001c3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c42:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	f003 0307 	and.w	r3, r3, #7
 8001c4a:	009b      	lsls	r3, r3, #2
 8001c4c:	220f      	movs	r2, #15
 8001c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c52:	43db      	mvns	r3, r3
 8001c54:	693a      	ldr	r2, [r7, #16]
 8001c56:	4013      	ands	r3, r2
 8001c58:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	691a      	ldr	r2, [r3, #16]
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	f003 0307 	and.w	r3, r3, #7
 8001c64:	009b      	lsls	r3, r3, #2
 8001c66:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6a:	693a      	ldr	r2, [r7, #16]
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	08da      	lsrs	r2, r3, #3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	3208      	adds	r2, #8
 8001c78:	6939      	ldr	r1, [r7, #16]
 8001c7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	005b      	lsls	r3, r3, #1
 8001c88:	2203      	movs	r2, #3
 8001c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8e:	43db      	mvns	r3, r3
 8001c90:	693a      	ldr	r2, [r7, #16]
 8001c92:	4013      	ands	r3, r2
 8001c94:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	f003 0203 	and.w	r2, r3, #3
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	005b      	lsls	r3, r3, #1
 8001ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca6:	693a      	ldr	r2, [r7, #16]
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	693a      	ldr	r2, [r7, #16]
 8001cb0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	f000 80a6 	beq.w	8001e0c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cc0:	4b5b      	ldr	r3, [pc, #364]	@ (8001e30 <HAL_GPIO_Init+0x2e4>)
 8001cc2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cc4:	4a5a      	ldr	r2, [pc, #360]	@ (8001e30 <HAL_GPIO_Init+0x2e4>)
 8001cc6:	f043 0301 	orr.w	r3, r3, #1
 8001cca:	6613      	str	r3, [r2, #96]	@ 0x60
 8001ccc:	4b58      	ldr	r3, [pc, #352]	@ (8001e30 <HAL_GPIO_Init+0x2e4>)
 8001cce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cd0:	f003 0301 	and.w	r3, r3, #1
 8001cd4:	60bb      	str	r3, [r7, #8]
 8001cd6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001cd8:	4a56      	ldr	r2, [pc, #344]	@ (8001e34 <HAL_GPIO_Init+0x2e8>)
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	089b      	lsrs	r3, r3, #2
 8001cde:	3302      	adds	r3, #2
 8001ce0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ce4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	f003 0303 	and.w	r3, r3, #3
 8001cec:	009b      	lsls	r3, r3, #2
 8001cee:	220f      	movs	r2, #15
 8001cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf4:	43db      	mvns	r3, r3
 8001cf6:	693a      	ldr	r2, [r7, #16]
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001d02:	d01f      	beq.n	8001d44 <HAL_GPIO_Init+0x1f8>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	4a4c      	ldr	r2, [pc, #304]	@ (8001e38 <HAL_GPIO_Init+0x2ec>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d019      	beq.n	8001d40 <HAL_GPIO_Init+0x1f4>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	4a4b      	ldr	r2, [pc, #300]	@ (8001e3c <HAL_GPIO_Init+0x2f0>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d013      	beq.n	8001d3c <HAL_GPIO_Init+0x1f0>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	4a4a      	ldr	r2, [pc, #296]	@ (8001e40 <HAL_GPIO_Init+0x2f4>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d00d      	beq.n	8001d38 <HAL_GPIO_Init+0x1ec>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	4a49      	ldr	r2, [pc, #292]	@ (8001e44 <HAL_GPIO_Init+0x2f8>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d007      	beq.n	8001d34 <HAL_GPIO_Init+0x1e8>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	4a48      	ldr	r2, [pc, #288]	@ (8001e48 <HAL_GPIO_Init+0x2fc>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d101      	bne.n	8001d30 <HAL_GPIO_Init+0x1e4>
 8001d2c:	2305      	movs	r3, #5
 8001d2e:	e00a      	b.n	8001d46 <HAL_GPIO_Init+0x1fa>
 8001d30:	2306      	movs	r3, #6
 8001d32:	e008      	b.n	8001d46 <HAL_GPIO_Init+0x1fa>
 8001d34:	2304      	movs	r3, #4
 8001d36:	e006      	b.n	8001d46 <HAL_GPIO_Init+0x1fa>
 8001d38:	2303      	movs	r3, #3
 8001d3a:	e004      	b.n	8001d46 <HAL_GPIO_Init+0x1fa>
 8001d3c:	2302      	movs	r3, #2
 8001d3e:	e002      	b.n	8001d46 <HAL_GPIO_Init+0x1fa>
 8001d40:	2301      	movs	r3, #1
 8001d42:	e000      	b.n	8001d46 <HAL_GPIO_Init+0x1fa>
 8001d44:	2300      	movs	r3, #0
 8001d46:	697a      	ldr	r2, [r7, #20]
 8001d48:	f002 0203 	and.w	r2, r2, #3
 8001d4c:	0092      	lsls	r2, r2, #2
 8001d4e:	4093      	lsls	r3, r2
 8001d50:	693a      	ldr	r2, [r7, #16]
 8001d52:	4313      	orrs	r3, r2
 8001d54:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d56:	4937      	ldr	r1, [pc, #220]	@ (8001e34 <HAL_GPIO_Init+0x2e8>)
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	089b      	lsrs	r3, r3, #2
 8001d5c:	3302      	adds	r3, #2
 8001d5e:	693a      	ldr	r2, [r7, #16]
 8001d60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001d64:	4b39      	ldr	r3, [pc, #228]	@ (8001e4c <HAL_GPIO_Init+0x300>)
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	43db      	mvns	r3, r3
 8001d6e:	693a      	ldr	r2, [r7, #16]
 8001d70:	4013      	ands	r3, r2
 8001d72:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d003      	beq.n	8001d88 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001d80:	693a      	ldr	r2, [r7, #16]
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	4313      	orrs	r3, r2
 8001d86:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001d88:	4a30      	ldr	r2, [pc, #192]	@ (8001e4c <HAL_GPIO_Init+0x300>)
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001d8e:	4b2f      	ldr	r3, [pc, #188]	@ (8001e4c <HAL_GPIO_Init+0x300>)
 8001d90:	68db      	ldr	r3, [r3, #12]
 8001d92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	43db      	mvns	r3, r3
 8001d98:	693a      	ldr	r2, [r7, #16]
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d003      	beq.n	8001db2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001daa:	693a      	ldr	r2, [r7, #16]
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	4313      	orrs	r3, r2
 8001db0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001db2:	4a26      	ldr	r2, [pc, #152]	@ (8001e4c <HAL_GPIO_Init+0x300>)
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001db8:	4b24      	ldr	r3, [pc, #144]	@ (8001e4c <HAL_GPIO_Init+0x300>)
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	43db      	mvns	r3, r3
 8001dc2:	693a      	ldr	r2, [r7, #16]
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d003      	beq.n	8001ddc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001dd4:	693a      	ldr	r2, [r7, #16]
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001ddc:	4a1b      	ldr	r2, [pc, #108]	@ (8001e4c <HAL_GPIO_Init+0x300>)
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001de2:	4b1a      	ldr	r3, [pc, #104]	@ (8001e4c <HAL_GPIO_Init+0x300>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	43db      	mvns	r3, r3
 8001dec:	693a      	ldr	r2, [r7, #16]
 8001dee:	4013      	ands	r3, r2
 8001df0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d003      	beq.n	8001e06 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001dfe:	693a      	ldr	r2, [r7, #16]
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	4313      	orrs	r3, r2
 8001e04:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001e06:	4a11      	ldr	r2, [pc, #68]	@ (8001e4c <HAL_GPIO_Init+0x300>)
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	3301      	adds	r3, #1
 8001e10:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	fa22 f303 	lsr.w	r3, r2, r3
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	f47f ae9d 	bne.w	8001b5c <HAL_GPIO_Init+0x10>
  }
}
 8001e22:	bf00      	nop
 8001e24:	bf00      	nop
 8001e26:	371c      	adds	r7, #28
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr
 8001e30:	40021000 	.word	0x40021000
 8001e34:	40010000 	.word	0x40010000
 8001e38:	48000400 	.word	0x48000400
 8001e3c:	48000800 	.word	0x48000800
 8001e40:	48000c00 	.word	0x48000c00
 8001e44:	48001000 	.word	0x48001000
 8001e48:	48001400 	.word	0x48001400
 8001e4c:	40010400 	.word	0x40010400

08001e50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b083      	sub	sp, #12
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
 8001e58:	460b      	mov	r3, r1
 8001e5a:	807b      	strh	r3, [r7, #2]
 8001e5c:	4613      	mov	r3, r2
 8001e5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e60:	787b      	ldrb	r3, [r7, #1]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d003      	beq.n	8001e6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e66:	887a      	ldrh	r2, [r7, #2]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e6c:	e002      	b.n	8001e74 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e6e:	887a      	ldrh	r2, [r7, #2]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001e74:	bf00      	nop
 8001e76:	370c      	adds	r7, #12
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr

08001e80 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	4603      	mov	r3, r0
 8001e88:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001e8a:	4b08      	ldr	r3, [pc, #32]	@ (8001eac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e8c:	695a      	ldr	r2, [r3, #20]
 8001e8e:	88fb      	ldrh	r3, [r7, #6]
 8001e90:	4013      	ands	r3, r2
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d006      	beq.n	8001ea4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001e96:	4a05      	ldr	r2, [pc, #20]	@ (8001eac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e98:	88fb      	ldrh	r3, [r7, #6]
 8001e9a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001e9c:	88fb      	ldrh	r3, [r7, #6]
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f000 f806 	bl	8001eb0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001ea4:	bf00      	nop
 8001ea6:	3708      	adds	r7, #8
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	40010400 	.word	0x40010400

08001eb0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001eba:	bf00      	nop
 8001ebc:	370c      	adds	r7, #12
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr
	...

08001ec8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b085      	sub	sp, #20
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d141      	bne.n	8001f5a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001ed6:	4b4b      	ldr	r3, [pc, #300]	@ (8002004 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001ede:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ee2:	d131      	bne.n	8001f48 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001ee4:	4b47      	ldr	r3, [pc, #284]	@ (8002004 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ee6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001eea:	4a46      	ldr	r2, [pc, #280]	@ (8002004 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001eec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001ef0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ef4:	4b43      	ldr	r3, [pc, #268]	@ (8002004 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001efc:	4a41      	ldr	r2, [pc, #260]	@ (8002004 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001efe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f02:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001f04:	4b40      	ldr	r3, [pc, #256]	@ (8002008 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	2232      	movs	r2, #50	@ 0x32
 8001f0a:	fb02 f303 	mul.w	r3, r2, r3
 8001f0e:	4a3f      	ldr	r2, [pc, #252]	@ (800200c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001f10:	fba2 2303 	umull	r2, r3, r2, r3
 8001f14:	0c9b      	lsrs	r3, r3, #18
 8001f16:	3301      	adds	r3, #1
 8001f18:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f1a:	e002      	b.n	8001f22 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	3b01      	subs	r3, #1
 8001f20:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f22:	4b38      	ldr	r3, [pc, #224]	@ (8002004 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f24:	695b      	ldr	r3, [r3, #20]
 8001f26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f2e:	d102      	bne.n	8001f36 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d1f2      	bne.n	8001f1c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001f36:	4b33      	ldr	r3, [pc, #204]	@ (8002004 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f38:	695b      	ldr	r3, [r3, #20]
 8001f3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f42:	d158      	bne.n	8001ff6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001f44:	2303      	movs	r3, #3
 8001f46:	e057      	b.n	8001ff8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001f48:	4b2e      	ldr	r3, [pc, #184]	@ (8002004 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001f4e:	4a2d      	ldr	r2, [pc, #180]	@ (8002004 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f50:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001f54:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001f58:	e04d      	b.n	8001ff6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001f60:	d141      	bne.n	8001fe6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001f62:	4b28      	ldr	r3, [pc, #160]	@ (8002004 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001f6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f6e:	d131      	bne.n	8001fd4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001f70:	4b24      	ldr	r3, [pc, #144]	@ (8002004 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f72:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001f76:	4a23      	ldr	r2, [pc, #140]	@ (8002004 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f7c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f80:	4b20      	ldr	r3, [pc, #128]	@ (8002004 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001f88:	4a1e      	ldr	r2, [pc, #120]	@ (8002004 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f8a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f8e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001f90:	4b1d      	ldr	r3, [pc, #116]	@ (8002008 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	2232      	movs	r2, #50	@ 0x32
 8001f96:	fb02 f303 	mul.w	r3, r2, r3
 8001f9a:	4a1c      	ldr	r2, [pc, #112]	@ (800200c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001f9c:	fba2 2303 	umull	r2, r3, r2, r3
 8001fa0:	0c9b      	lsrs	r3, r3, #18
 8001fa2:	3301      	adds	r3, #1
 8001fa4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001fa6:	e002      	b.n	8001fae <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	3b01      	subs	r3, #1
 8001fac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001fae:	4b15      	ldr	r3, [pc, #84]	@ (8002004 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fb0:	695b      	ldr	r3, [r3, #20]
 8001fb2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fb6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001fba:	d102      	bne.n	8001fc2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d1f2      	bne.n	8001fa8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001fc2:	4b10      	ldr	r3, [pc, #64]	@ (8002004 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fc4:	695b      	ldr	r3, [r3, #20]
 8001fc6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001fce:	d112      	bne.n	8001ff6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001fd0:	2303      	movs	r3, #3
 8001fd2:	e011      	b.n	8001ff8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001fd4:	4b0b      	ldr	r3, [pc, #44]	@ (8002004 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001fda:	4a0a      	ldr	r2, [pc, #40]	@ (8002004 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fdc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fe0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001fe4:	e007      	b.n	8001ff6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001fe6:	4b07      	ldr	r3, [pc, #28]	@ (8002004 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001fee:	4a05      	ldr	r2, [pc, #20]	@ (8002004 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ff0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001ff4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001ff6:	2300      	movs	r3, #0
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	3714      	adds	r7, #20
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr
 8002004:	40007000 	.word	0x40007000
 8002008:	20000200 	.word	0x20000200
 800200c:	431bde83 	.word	0x431bde83

08002010 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002014:	4b05      	ldr	r3, [pc, #20]	@ (800202c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	4a04      	ldr	r2, [pc, #16]	@ (800202c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800201a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800201e:	6093      	str	r3, [r2, #8]
}
 8002020:	bf00      	nop
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr
 800202a:	bf00      	nop
 800202c:	40007000 	.word	0x40007000

08002030 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b088      	sub	sp, #32
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d101      	bne.n	8002042 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e2fe      	b.n	8002640 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 0301 	and.w	r3, r3, #1
 800204a:	2b00      	cmp	r3, #0
 800204c:	d075      	beq.n	800213a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800204e:	4b97      	ldr	r3, [pc, #604]	@ (80022ac <HAL_RCC_OscConfig+0x27c>)
 8002050:	689b      	ldr	r3, [r3, #8]
 8002052:	f003 030c 	and.w	r3, r3, #12
 8002056:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002058:	4b94      	ldr	r3, [pc, #592]	@ (80022ac <HAL_RCC_OscConfig+0x27c>)
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	f003 0303 	and.w	r3, r3, #3
 8002060:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002062:	69bb      	ldr	r3, [r7, #24]
 8002064:	2b0c      	cmp	r3, #12
 8002066:	d102      	bne.n	800206e <HAL_RCC_OscConfig+0x3e>
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	2b03      	cmp	r3, #3
 800206c:	d002      	beq.n	8002074 <HAL_RCC_OscConfig+0x44>
 800206e:	69bb      	ldr	r3, [r7, #24]
 8002070:	2b08      	cmp	r3, #8
 8002072:	d10b      	bne.n	800208c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002074:	4b8d      	ldr	r3, [pc, #564]	@ (80022ac <HAL_RCC_OscConfig+0x27c>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800207c:	2b00      	cmp	r3, #0
 800207e:	d05b      	beq.n	8002138 <HAL_RCC_OscConfig+0x108>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d157      	bne.n	8002138 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	e2d9      	b.n	8002640 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002094:	d106      	bne.n	80020a4 <HAL_RCC_OscConfig+0x74>
 8002096:	4b85      	ldr	r3, [pc, #532]	@ (80022ac <HAL_RCC_OscConfig+0x27c>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a84      	ldr	r2, [pc, #528]	@ (80022ac <HAL_RCC_OscConfig+0x27c>)
 800209c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020a0:	6013      	str	r3, [r2, #0]
 80020a2:	e01d      	b.n	80020e0 <HAL_RCC_OscConfig+0xb0>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80020ac:	d10c      	bne.n	80020c8 <HAL_RCC_OscConfig+0x98>
 80020ae:	4b7f      	ldr	r3, [pc, #508]	@ (80022ac <HAL_RCC_OscConfig+0x27c>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a7e      	ldr	r2, [pc, #504]	@ (80022ac <HAL_RCC_OscConfig+0x27c>)
 80020b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80020b8:	6013      	str	r3, [r2, #0]
 80020ba:	4b7c      	ldr	r3, [pc, #496]	@ (80022ac <HAL_RCC_OscConfig+0x27c>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a7b      	ldr	r2, [pc, #492]	@ (80022ac <HAL_RCC_OscConfig+0x27c>)
 80020c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020c4:	6013      	str	r3, [r2, #0]
 80020c6:	e00b      	b.n	80020e0 <HAL_RCC_OscConfig+0xb0>
 80020c8:	4b78      	ldr	r3, [pc, #480]	@ (80022ac <HAL_RCC_OscConfig+0x27c>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a77      	ldr	r2, [pc, #476]	@ (80022ac <HAL_RCC_OscConfig+0x27c>)
 80020ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80020d2:	6013      	str	r3, [r2, #0]
 80020d4:	4b75      	ldr	r3, [pc, #468]	@ (80022ac <HAL_RCC_OscConfig+0x27c>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a74      	ldr	r2, [pc, #464]	@ (80022ac <HAL_RCC_OscConfig+0x27c>)
 80020da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80020de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d013      	beq.n	8002110 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020e8:	f7ff f8e2 	bl	80012b0 <HAL_GetTick>
 80020ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020ee:	e008      	b.n	8002102 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020f0:	f7ff f8de 	bl	80012b0 <HAL_GetTick>
 80020f4:	4602      	mov	r2, r0
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	1ad3      	subs	r3, r2, r3
 80020fa:	2b64      	cmp	r3, #100	@ 0x64
 80020fc:	d901      	bls.n	8002102 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80020fe:	2303      	movs	r3, #3
 8002100:	e29e      	b.n	8002640 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002102:	4b6a      	ldr	r3, [pc, #424]	@ (80022ac <HAL_RCC_OscConfig+0x27c>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d0f0      	beq.n	80020f0 <HAL_RCC_OscConfig+0xc0>
 800210e:	e014      	b.n	800213a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002110:	f7ff f8ce 	bl	80012b0 <HAL_GetTick>
 8002114:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002116:	e008      	b.n	800212a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002118:	f7ff f8ca 	bl	80012b0 <HAL_GetTick>
 800211c:	4602      	mov	r2, r0
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	2b64      	cmp	r3, #100	@ 0x64
 8002124:	d901      	bls.n	800212a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002126:	2303      	movs	r3, #3
 8002128:	e28a      	b.n	8002640 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800212a:	4b60      	ldr	r3, [pc, #384]	@ (80022ac <HAL_RCC_OscConfig+0x27c>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002132:	2b00      	cmp	r3, #0
 8002134:	d1f0      	bne.n	8002118 <HAL_RCC_OscConfig+0xe8>
 8002136:	e000      	b.n	800213a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002138:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 0302 	and.w	r3, r3, #2
 8002142:	2b00      	cmp	r3, #0
 8002144:	d075      	beq.n	8002232 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002146:	4b59      	ldr	r3, [pc, #356]	@ (80022ac <HAL_RCC_OscConfig+0x27c>)
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	f003 030c 	and.w	r3, r3, #12
 800214e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002150:	4b56      	ldr	r3, [pc, #344]	@ (80022ac <HAL_RCC_OscConfig+0x27c>)
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	f003 0303 	and.w	r3, r3, #3
 8002158:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800215a:	69bb      	ldr	r3, [r7, #24]
 800215c:	2b0c      	cmp	r3, #12
 800215e:	d102      	bne.n	8002166 <HAL_RCC_OscConfig+0x136>
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	2b02      	cmp	r3, #2
 8002164:	d002      	beq.n	800216c <HAL_RCC_OscConfig+0x13c>
 8002166:	69bb      	ldr	r3, [r7, #24]
 8002168:	2b04      	cmp	r3, #4
 800216a:	d11f      	bne.n	80021ac <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800216c:	4b4f      	ldr	r3, [pc, #316]	@ (80022ac <HAL_RCC_OscConfig+0x27c>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002174:	2b00      	cmp	r3, #0
 8002176:	d005      	beq.n	8002184 <HAL_RCC_OscConfig+0x154>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d101      	bne.n	8002184 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	e25d      	b.n	8002640 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002184:	4b49      	ldr	r3, [pc, #292]	@ (80022ac <HAL_RCC_OscConfig+0x27c>)
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	691b      	ldr	r3, [r3, #16]
 8002190:	061b      	lsls	r3, r3, #24
 8002192:	4946      	ldr	r1, [pc, #280]	@ (80022ac <HAL_RCC_OscConfig+0x27c>)
 8002194:	4313      	orrs	r3, r2
 8002196:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002198:	4b45      	ldr	r3, [pc, #276]	@ (80022b0 <HAL_RCC_OscConfig+0x280>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4618      	mov	r0, r3
 800219e:	f7ff f83b 	bl	8001218 <HAL_InitTick>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d043      	beq.n	8002230 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80021a8:	2301      	movs	r3, #1
 80021aa:	e249      	b.n	8002640 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d023      	beq.n	80021fc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021b4:	4b3d      	ldr	r3, [pc, #244]	@ (80022ac <HAL_RCC_OscConfig+0x27c>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a3c      	ldr	r2, [pc, #240]	@ (80022ac <HAL_RCC_OscConfig+0x27c>)
 80021ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021c0:	f7ff f876 	bl	80012b0 <HAL_GetTick>
 80021c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021c6:	e008      	b.n	80021da <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021c8:	f7ff f872 	bl	80012b0 <HAL_GetTick>
 80021cc:	4602      	mov	r2, r0
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	1ad3      	subs	r3, r2, r3
 80021d2:	2b02      	cmp	r3, #2
 80021d4:	d901      	bls.n	80021da <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80021d6:	2303      	movs	r3, #3
 80021d8:	e232      	b.n	8002640 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021da:	4b34      	ldr	r3, [pc, #208]	@ (80022ac <HAL_RCC_OscConfig+0x27c>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d0f0      	beq.n	80021c8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021e6:	4b31      	ldr	r3, [pc, #196]	@ (80022ac <HAL_RCC_OscConfig+0x27c>)
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	691b      	ldr	r3, [r3, #16]
 80021f2:	061b      	lsls	r3, r3, #24
 80021f4:	492d      	ldr	r1, [pc, #180]	@ (80022ac <HAL_RCC_OscConfig+0x27c>)
 80021f6:	4313      	orrs	r3, r2
 80021f8:	604b      	str	r3, [r1, #4]
 80021fa:	e01a      	b.n	8002232 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021fc:	4b2b      	ldr	r3, [pc, #172]	@ (80022ac <HAL_RCC_OscConfig+0x27c>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a2a      	ldr	r2, [pc, #168]	@ (80022ac <HAL_RCC_OscConfig+0x27c>)
 8002202:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002206:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002208:	f7ff f852 	bl	80012b0 <HAL_GetTick>
 800220c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800220e:	e008      	b.n	8002222 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002210:	f7ff f84e 	bl	80012b0 <HAL_GetTick>
 8002214:	4602      	mov	r2, r0
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	2b02      	cmp	r3, #2
 800221c:	d901      	bls.n	8002222 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800221e:	2303      	movs	r3, #3
 8002220:	e20e      	b.n	8002640 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002222:	4b22      	ldr	r3, [pc, #136]	@ (80022ac <HAL_RCC_OscConfig+0x27c>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800222a:	2b00      	cmp	r3, #0
 800222c:	d1f0      	bne.n	8002210 <HAL_RCC_OscConfig+0x1e0>
 800222e:	e000      	b.n	8002232 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002230:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 0308 	and.w	r3, r3, #8
 800223a:	2b00      	cmp	r3, #0
 800223c:	d041      	beq.n	80022c2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	695b      	ldr	r3, [r3, #20]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d01c      	beq.n	8002280 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002246:	4b19      	ldr	r3, [pc, #100]	@ (80022ac <HAL_RCC_OscConfig+0x27c>)
 8002248:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800224c:	4a17      	ldr	r2, [pc, #92]	@ (80022ac <HAL_RCC_OscConfig+0x27c>)
 800224e:	f043 0301 	orr.w	r3, r3, #1
 8002252:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002256:	f7ff f82b 	bl	80012b0 <HAL_GetTick>
 800225a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800225c:	e008      	b.n	8002270 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800225e:	f7ff f827 	bl	80012b0 <HAL_GetTick>
 8002262:	4602      	mov	r2, r0
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	1ad3      	subs	r3, r2, r3
 8002268:	2b02      	cmp	r3, #2
 800226a:	d901      	bls.n	8002270 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800226c:	2303      	movs	r3, #3
 800226e:	e1e7      	b.n	8002640 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002270:	4b0e      	ldr	r3, [pc, #56]	@ (80022ac <HAL_RCC_OscConfig+0x27c>)
 8002272:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002276:	f003 0302 	and.w	r3, r3, #2
 800227a:	2b00      	cmp	r3, #0
 800227c:	d0ef      	beq.n	800225e <HAL_RCC_OscConfig+0x22e>
 800227e:	e020      	b.n	80022c2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002280:	4b0a      	ldr	r3, [pc, #40]	@ (80022ac <HAL_RCC_OscConfig+0x27c>)
 8002282:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002286:	4a09      	ldr	r2, [pc, #36]	@ (80022ac <HAL_RCC_OscConfig+0x27c>)
 8002288:	f023 0301 	bic.w	r3, r3, #1
 800228c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002290:	f7ff f80e 	bl	80012b0 <HAL_GetTick>
 8002294:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002296:	e00d      	b.n	80022b4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002298:	f7ff f80a 	bl	80012b0 <HAL_GetTick>
 800229c:	4602      	mov	r2, r0
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	2b02      	cmp	r3, #2
 80022a4:	d906      	bls.n	80022b4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80022a6:	2303      	movs	r3, #3
 80022a8:	e1ca      	b.n	8002640 <HAL_RCC_OscConfig+0x610>
 80022aa:	bf00      	nop
 80022ac:	40021000 	.word	0x40021000
 80022b0:	20000204 	.word	0x20000204
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80022b4:	4b8c      	ldr	r3, [pc, #560]	@ (80024e8 <HAL_RCC_OscConfig+0x4b8>)
 80022b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80022ba:	f003 0302 	and.w	r3, r3, #2
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d1ea      	bne.n	8002298 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 0304 	and.w	r3, r3, #4
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	f000 80a6 	beq.w	800241c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022d0:	2300      	movs	r3, #0
 80022d2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80022d4:	4b84      	ldr	r3, [pc, #528]	@ (80024e8 <HAL_RCC_OscConfig+0x4b8>)
 80022d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d101      	bne.n	80022e4 <HAL_RCC_OscConfig+0x2b4>
 80022e0:	2301      	movs	r3, #1
 80022e2:	e000      	b.n	80022e6 <HAL_RCC_OscConfig+0x2b6>
 80022e4:	2300      	movs	r3, #0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d00d      	beq.n	8002306 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022ea:	4b7f      	ldr	r3, [pc, #508]	@ (80024e8 <HAL_RCC_OscConfig+0x4b8>)
 80022ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022ee:	4a7e      	ldr	r2, [pc, #504]	@ (80024e8 <HAL_RCC_OscConfig+0x4b8>)
 80022f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022f4:	6593      	str	r3, [r2, #88]	@ 0x58
 80022f6:	4b7c      	ldr	r3, [pc, #496]	@ (80024e8 <HAL_RCC_OscConfig+0x4b8>)
 80022f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022fe:	60fb      	str	r3, [r7, #12]
 8002300:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002302:	2301      	movs	r3, #1
 8002304:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002306:	4b79      	ldr	r3, [pc, #484]	@ (80024ec <HAL_RCC_OscConfig+0x4bc>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800230e:	2b00      	cmp	r3, #0
 8002310:	d118      	bne.n	8002344 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002312:	4b76      	ldr	r3, [pc, #472]	@ (80024ec <HAL_RCC_OscConfig+0x4bc>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a75      	ldr	r2, [pc, #468]	@ (80024ec <HAL_RCC_OscConfig+0x4bc>)
 8002318:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800231c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800231e:	f7fe ffc7 	bl	80012b0 <HAL_GetTick>
 8002322:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002324:	e008      	b.n	8002338 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002326:	f7fe ffc3 	bl	80012b0 <HAL_GetTick>
 800232a:	4602      	mov	r2, r0
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	1ad3      	subs	r3, r2, r3
 8002330:	2b02      	cmp	r3, #2
 8002332:	d901      	bls.n	8002338 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002334:	2303      	movs	r3, #3
 8002336:	e183      	b.n	8002640 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002338:	4b6c      	ldr	r3, [pc, #432]	@ (80024ec <HAL_RCC_OscConfig+0x4bc>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002340:	2b00      	cmp	r3, #0
 8002342:	d0f0      	beq.n	8002326 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	2b01      	cmp	r3, #1
 800234a:	d108      	bne.n	800235e <HAL_RCC_OscConfig+0x32e>
 800234c:	4b66      	ldr	r3, [pc, #408]	@ (80024e8 <HAL_RCC_OscConfig+0x4b8>)
 800234e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002352:	4a65      	ldr	r2, [pc, #404]	@ (80024e8 <HAL_RCC_OscConfig+0x4b8>)
 8002354:	f043 0301 	orr.w	r3, r3, #1
 8002358:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800235c:	e024      	b.n	80023a8 <HAL_RCC_OscConfig+0x378>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	2b05      	cmp	r3, #5
 8002364:	d110      	bne.n	8002388 <HAL_RCC_OscConfig+0x358>
 8002366:	4b60      	ldr	r3, [pc, #384]	@ (80024e8 <HAL_RCC_OscConfig+0x4b8>)
 8002368:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800236c:	4a5e      	ldr	r2, [pc, #376]	@ (80024e8 <HAL_RCC_OscConfig+0x4b8>)
 800236e:	f043 0304 	orr.w	r3, r3, #4
 8002372:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002376:	4b5c      	ldr	r3, [pc, #368]	@ (80024e8 <HAL_RCC_OscConfig+0x4b8>)
 8002378:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800237c:	4a5a      	ldr	r2, [pc, #360]	@ (80024e8 <HAL_RCC_OscConfig+0x4b8>)
 800237e:	f043 0301 	orr.w	r3, r3, #1
 8002382:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002386:	e00f      	b.n	80023a8 <HAL_RCC_OscConfig+0x378>
 8002388:	4b57      	ldr	r3, [pc, #348]	@ (80024e8 <HAL_RCC_OscConfig+0x4b8>)
 800238a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800238e:	4a56      	ldr	r2, [pc, #344]	@ (80024e8 <HAL_RCC_OscConfig+0x4b8>)
 8002390:	f023 0301 	bic.w	r3, r3, #1
 8002394:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002398:	4b53      	ldr	r3, [pc, #332]	@ (80024e8 <HAL_RCC_OscConfig+0x4b8>)
 800239a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800239e:	4a52      	ldr	r2, [pc, #328]	@ (80024e8 <HAL_RCC_OscConfig+0x4b8>)
 80023a0:	f023 0304 	bic.w	r3, r3, #4
 80023a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d016      	beq.n	80023de <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023b0:	f7fe ff7e 	bl	80012b0 <HAL_GetTick>
 80023b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023b6:	e00a      	b.n	80023ce <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023b8:	f7fe ff7a 	bl	80012b0 <HAL_GetTick>
 80023bc:	4602      	mov	r2, r0
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d901      	bls.n	80023ce <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80023ca:	2303      	movs	r3, #3
 80023cc:	e138      	b.n	8002640 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023ce:	4b46      	ldr	r3, [pc, #280]	@ (80024e8 <HAL_RCC_OscConfig+0x4b8>)
 80023d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023d4:	f003 0302 	and.w	r3, r3, #2
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d0ed      	beq.n	80023b8 <HAL_RCC_OscConfig+0x388>
 80023dc:	e015      	b.n	800240a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023de:	f7fe ff67 	bl	80012b0 <HAL_GetTick>
 80023e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80023e4:	e00a      	b.n	80023fc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023e6:	f7fe ff63 	bl	80012b0 <HAL_GetTick>
 80023ea:	4602      	mov	r2, r0
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	1ad3      	subs	r3, r2, r3
 80023f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d901      	bls.n	80023fc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80023f8:	2303      	movs	r3, #3
 80023fa:	e121      	b.n	8002640 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80023fc:	4b3a      	ldr	r3, [pc, #232]	@ (80024e8 <HAL_RCC_OscConfig+0x4b8>)
 80023fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002402:	f003 0302 	and.w	r3, r3, #2
 8002406:	2b00      	cmp	r3, #0
 8002408:	d1ed      	bne.n	80023e6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800240a:	7ffb      	ldrb	r3, [r7, #31]
 800240c:	2b01      	cmp	r3, #1
 800240e:	d105      	bne.n	800241c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002410:	4b35      	ldr	r3, [pc, #212]	@ (80024e8 <HAL_RCC_OscConfig+0x4b8>)
 8002412:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002414:	4a34      	ldr	r2, [pc, #208]	@ (80024e8 <HAL_RCC_OscConfig+0x4b8>)
 8002416:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800241a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f003 0320 	and.w	r3, r3, #32
 8002424:	2b00      	cmp	r3, #0
 8002426:	d03c      	beq.n	80024a2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	699b      	ldr	r3, [r3, #24]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d01c      	beq.n	800246a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002430:	4b2d      	ldr	r3, [pc, #180]	@ (80024e8 <HAL_RCC_OscConfig+0x4b8>)
 8002432:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002436:	4a2c      	ldr	r2, [pc, #176]	@ (80024e8 <HAL_RCC_OscConfig+0x4b8>)
 8002438:	f043 0301 	orr.w	r3, r3, #1
 800243c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002440:	f7fe ff36 	bl	80012b0 <HAL_GetTick>
 8002444:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002446:	e008      	b.n	800245a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002448:	f7fe ff32 	bl	80012b0 <HAL_GetTick>
 800244c:	4602      	mov	r2, r0
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	2b02      	cmp	r3, #2
 8002454:	d901      	bls.n	800245a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002456:	2303      	movs	r3, #3
 8002458:	e0f2      	b.n	8002640 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800245a:	4b23      	ldr	r3, [pc, #140]	@ (80024e8 <HAL_RCC_OscConfig+0x4b8>)
 800245c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002460:	f003 0302 	and.w	r3, r3, #2
 8002464:	2b00      	cmp	r3, #0
 8002466:	d0ef      	beq.n	8002448 <HAL_RCC_OscConfig+0x418>
 8002468:	e01b      	b.n	80024a2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800246a:	4b1f      	ldr	r3, [pc, #124]	@ (80024e8 <HAL_RCC_OscConfig+0x4b8>)
 800246c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002470:	4a1d      	ldr	r2, [pc, #116]	@ (80024e8 <HAL_RCC_OscConfig+0x4b8>)
 8002472:	f023 0301 	bic.w	r3, r3, #1
 8002476:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800247a:	f7fe ff19 	bl	80012b0 <HAL_GetTick>
 800247e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002480:	e008      	b.n	8002494 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002482:	f7fe ff15 	bl	80012b0 <HAL_GetTick>
 8002486:	4602      	mov	r2, r0
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	1ad3      	subs	r3, r2, r3
 800248c:	2b02      	cmp	r3, #2
 800248e:	d901      	bls.n	8002494 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002490:	2303      	movs	r3, #3
 8002492:	e0d5      	b.n	8002640 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002494:	4b14      	ldr	r3, [pc, #80]	@ (80024e8 <HAL_RCC_OscConfig+0x4b8>)
 8002496:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800249a:	f003 0302 	and.w	r3, r3, #2
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d1ef      	bne.n	8002482 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	69db      	ldr	r3, [r3, #28]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	f000 80c9 	beq.w	800263e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80024ac:	4b0e      	ldr	r3, [pc, #56]	@ (80024e8 <HAL_RCC_OscConfig+0x4b8>)
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	f003 030c 	and.w	r3, r3, #12
 80024b4:	2b0c      	cmp	r3, #12
 80024b6:	f000 8083 	beq.w	80025c0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	69db      	ldr	r3, [r3, #28]
 80024be:	2b02      	cmp	r3, #2
 80024c0:	d15e      	bne.n	8002580 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024c2:	4b09      	ldr	r3, [pc, #36]	@ (80024e8 <HAL_RCC_OscConfig+0x4b8>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a08      	ldr	r2, [pc, #32]	@ (80024e8 <HAL_RCC_OscConfig+0x4b8>)
 80024c8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80024cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ce:	f7fe feef 	bl	80012b0 <HAL_GetTick>
 80024d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024d4:	e00c      	b.n	80024f0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024d6:	f7fe feeb 	bl	80012b0 <HAL_GetTick>
 80024da:	4602      	mov	r2, r0
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	1ad3      	subs	r3, r2, r3
 80024e0:	2b02      	cmp	r3, #2
 80024e2:	d905      	bls.n	80024f0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80024e4:	2303      	movs	r3, #3
 80024e6:	e0ab      	b.n	8002640 <HAL_RCC_OscConfig+0x610>
 80024e8:	40021000 	.word	0x40021000
 80024ec:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024f0:	4b55      	ldr	r3, [pc, #340]	@ (8002648 <HAL_RCC_OscConfig+0x618>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d1ec      	bne.n	80024d6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024fc:	4b52      	ldr	r3, [pc, #328]	@ (8002648 <HAL_RCC_OscConfig+0x618>)
 80024fe:	68da      	ldr	r2, [r3, #12]
 8002500:	4b52      	ldr	r3, [pc, #328]	@ (800264c <HAL_RCC_OscConfig+0x61c>)
 8002502:	4013      	ands	r3, r2
 8002504:	687a      	ldr	r2, [r7, #4]
 8002506:	6a11      	ldr	r1, [r2, #32]
 8002508:	687a      	ldr	r2, [r7, #4]
 800250a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800250c:	3a01      	subs	r2, #1
 800250e:	0112      	lsls	r2, r2, #4
 8002510:	4311      	orrs	r1, r2
 8002512:	687a      	ldr	r2, [r7, #4]
 8002514:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002516:	0212      	lsls	r2, r2, #8
 8002518:	4311      	orrs	r1, r2
 800251a:	687a      	ldr	r2, [r7, #4]
 800251c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800251e:	0852      	lsrs	r2, r2, #1
 8002520:	3a01      	subs	r2, #1
 8002522:	0552      	lsls	r2, r2, #21
 8002524:	4311      	orrs	r1, r2
 8002526:	687a      	ldr	r2, [r7, #4]
 8002528:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800252a:	0852      	lsrs	r2, r2, #1
 800252c:	3a01      	subs	r2, #1
 800252e:	0652      	lsls	r2, r2, #25
 8002530:	4311      	orrs	r1, r2
 8002532:	687a      	ldr	r2, [r7, #4]
 8002534:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002536:	06d2      	lsls	r2, r2, #27
 8002538:	430a      	orrs	r2, r1
 800253a:	4943      	ldr	r1, [pc, #268]	@ (8002648 <HAL_RCC_OscConfig+0x618>)
 800253c:	4313      	orrs	r3, r2
 800253e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002540:	4b41      	ldr	r3, [pc, #260]	@ (8002648 <HAL_RCC_OscConfig+0x618>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a40      	ldr	r2, [pc, #256]	@ (8002648 <HAL_RCC_OscConfig+0x618>)
 8002546:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800254a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800254c:	4b3e      	ldr	r3, [pc, #248]	@ (8002648 <HAL_RCC_OscConfig+0x618>)
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	4a3d      	ldr	r2, [pc, #244]	@ (8002648 <HAL_RCC_OscConfig+0x618>)
 8002552:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002556:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002558:	f7fe feaa 	bl	80012b0 <HAL_GetTick>
 800255c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800255e:	e008      	b.n	8002572 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002560:	f7fe fea6 	bl	80012b0 <HAL_GetTick>
 8002564:	4602      	mov	r2, r0
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	2b02      	cmp	r3, #2
 800256c:	d901      	bls.n	8002572 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800256e:	2303      	movs	r3, #3
 8002570:	e066      	b.n	8002640 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002572:	4b35      	ldr	r3, [pc, #212]	@ (8002648 <HAL_RCC_OscConfig+0x618>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d0f0      	beq.n	8002560 <HAL_RCC_OscConfig+0x530>
 800257e:	e05e      	b.n	800263e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002580:	4b31      	ldr	r3, [pc, #196]	@ (8002648 <HAL_RCC_OscConfig+0x618>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a30      	ldr	r2, [pc, #192]	@ (8002648 <HAL_RCC_OscConfig+0x618>)
 8002586:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800258a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800258c:	f7fe fe90 	bl	80012b0 <HAL_GetTick>
 8002590:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002592:	e008      	b.n	80025a6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002594:	f7fe fe8c 	bl	80012b0 <HAL_GetTick>
 8002598:	4602      	mov	r2, r0
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	2b02      	cmp	r3, #2
 80025a0:	d901      	bls.n	80025a6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80025a2:	2303      	movs	r3, #3
 80025a4:	e04c      	b.n	8002640 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025a6:	4b28      	ldr	r3, [pc, #160]	@ (8002648 <HAL_RCC_OscConfig+0x618>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d1f0      	bne.n	8002594 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80025b2:	4b25      	ldr	r3, [pc, #148]	@ (8002648 <HAL_RCC_OscConfig+0x618>)
 80025b4:	68da      	ldr	r2, [r3, #12]
 80025b6:	4924      	ldr	r1, [pc, #144]	@ (8002648 <HAL_RCC_OscConfig+0x618>)
 80025b8:	4b25      	ldr	r3, [pc, #148]	@ (8002650 <HAL_RCC_OscConfig+0x620>)
 80025ba:	4013      	ands	r3, r2
 80025bc:	60cb      	str	r3, [r1, #12]
 80025be:	e03e      	b.n	800263e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	69db      	ldr	r3, [r3, #28]
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	d101      	bne.n	80025cc <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	e039      	b.n	8002640 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80025cc:	4b1e      	ldr	r3, [pc, #120]	@ (8002648 <HAL_RCC_OscConfig+0x618>)
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	f003 0203 	and.w	r2, r3, #3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6a1b      	ldr	r3, [r3, #32]
 80025dc:	429a      	cmp	r2, r3
 80025de:	d12c      	bne.n	800263a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025ea:	3b01      	subs	r3, #1
 80025ec:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025ee:	429a      	cmp	r2, r3
 80025f0:	d123      	bne.n	800263a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025fc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80025fe:	429a      	cmp	r2, r3
 8002600:	d11b      	bne.n	800263a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800260c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800260e:	429a      	cmp	r2, r3
 8002610:	d113      	bne.n	800263a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800261c:	085b      	lsrs	r3, r3, #1
 800261e:	3b01      	subs	r3, #1
 8002620:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002622:	429a      	cmp	r2, r3
 8002624:	d109      	bne.n	800263a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002630:	085b      	lsrs	r3, r3, #1
 8002632:	3b01      	subs	r3, #1
 8002634:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002636:	429a      	cmp	r2, r3
 8002638:	d001      	beq.n	800263e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e000      	b.n	8002640 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800263e:	2300      	movs	r3, #0
}
 8002640:	4618      	mov	r0, r3
 8002642:	3720      	adds	r7, #32
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}
 8002648:	40021000 	.word	0x40021000
 800264c:	019f800c 	.word	0x019f800c
 8002650:	feeefffc 	.word	0xfeeefffc

08002654 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b086      	sub	sp, #24
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
 800265c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800265e:	2300      	movs	r3, #0
 8002660:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d101      	bne.n	800266c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	e11e      	b.n	80028aa <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800266c:	4b91      	ldr	r3, [pc, #580]	@ (80028b4 <HAL_RCC_ClockConfig+0x260>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 030f 	and.w	r3, r3, #15
 8002674:	683a      	ldr	r2, [r7, #0]
 8002676:	429a      	cmp	r2, r3
 8002678:	d910      	bls.n	800269c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800267a:	4b8e      	ldr	r3, [pc, #568]	@ (80028b4 <HAL_RCC_ClockConfig+0x260>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f023 020f 	bic.w	r2, r3, #15
 8002682:	498c      	ldr	r1, [pc, #560]	@ (80028b4 <HAL_RCC_ClockConfig+0x260>)
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	4313      	orrs	r3, r2
 8002688:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800268a:	4b8a      	ldr	r3, [pc, #552]	@ (80028b4 <HAL_RCC_ClockConfig+0x260>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 030f 	and.w	r3, r3, #15
 8002692:	683a      	ldr	r2, [r7, #0]
 8002694:	429a      	cmp	r2, r3
 8002696:	d001      	beq.n	800269c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	e106      	b.n	80028aa <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 0301 	and.w	r3, r3, #1
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d073      	beq.n	8002790 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	2b03      	cmp	r3, #3
 80026ae:	d129      	bne.n	8002704 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026b0:	4b81      	ldr	r3, [pc, #516]	@ (80028b8 <HAL_RCC_ClockConfig+0x264>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d101      	bne.n	80026c0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	e0f4      	b.n	80028aa <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80026c0:	f000 f99e 	bl	8002a00 <RCC_GetSysClockFreqFromPLLSource>
 80026c4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	4a7c      	ldr	r2, [pc, #496]	@ (80028bc <HAL_RCC_ClockConfig+0x268>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d93f      	bls.n	800274e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80026ce:	4b7a      	ldr	r3, [pc, #488]	@ (80028b8 <HAL_RCC_ClockConfig+0x264>)
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d009      	beq.n	80026ee <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d033      	beq.n	800274e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d12f      	bne.n	800274e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80026ee:	4b72      	ldr	r3, [pc, #456]	@ (80028b8 <HAL_RCC_ClockConfig+0x264>)
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80026f6:	4a70      	ldr	r2, [pc, #448]	@ (80028b8 <HAL_RCC_ClockConfig+0x264>)
 80026f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80026fc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80026fe:	2380      	movs	r3, #128	@ 0x80
 8002700:	617b      	str	r3, [r7, #20]
 8002702:	e024      	b.n	800274e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	2b02      	cmp	r3, #2
 800270a:	d107      	bne.n	800271c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800270c:	4b6a      	ldr	r3, [pc, #424]	@ (80028b8 <HAL_RCC_ClockConfig+0x264>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002714:	2b00      	cmp	r3, #0
 8002716:	d109      	bne.n	800272c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	e0c6      	b.n	80028aa <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800271c:	4b66      	ldr	r3, [pc, #408]	@ (80028b8 <HAL_RCC_ClockConfig+0x264>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002724:	2b00      	cmp	r3, #0
 8002726:	d101      	bne.n	800272c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	e0be      	b.n	80028aa <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800272c:	f000 f8ce 	bl	80028cc <HAL_RCC_GetSysClockFreq>
 8002730:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	4a61      	ldr	r2, [pc, #388]	@ (80028bc <HAL_RCC_ClockConfig+0x268>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d909      	bls.n	800274e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800273a:	4b5f      	ldr	r3, [pc, #380]	@ (80028b8 <HAL_RCC_ClockConfig+0x264>)
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002742:	4a5d      	ldr	r2, [pc, #372]	@ (80028b8 <HAL_RCC_ClockConfig+0x264>)
 8002744:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002748:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800274a:	2380      	movs	r3, #128	@ 0x80
 800274c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800274e:	4b5a      	ldr	r3, [pc, #360]	@ (80028b8 <HAL_RCC_ClockConfig+0x264>)
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	f023 0203 	bic.w	r2, r3, #3
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	4957      	ldr	r1, [pc, #348]	@ (80028b8 <HAL_RCC_ClockConfig+0x264>)
 800275c:	4313      	orrs	r3, r2
 800275e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002760:	f7fe fda6 	bl	80012b0 <HAL_GetTick>
 8002764:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002766:	e00a      	b.n	800277e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002768:	f7fe fda2 	bl	80012b0 <HAL_GetTick>
 800276c:	4602      	mov	r2, r0
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002776:	4293      	cmp	r3, r2
 8002778:	d901      	bls.n	800277e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800277a:	2303      	movs	r3, #3
 800277c:	e095      	b.n	80028aa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800277e:	4b4e      	ldr	r3, [pc, #312]	@ (80028b8 <HAL_RCC_ClockConfig+0x264>)
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	f003 020c 	and.w	r2, r3, #12
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	429a      	cmp	r2, r3
 800278e:	d1eb      	bne.n	8002768 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 0302 	and.w	r3, r3, #2
 8002798:	2b00      	cmp	r3, #0
 800279a:	d023      	beq.n	80027e4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 0304 	and.w	r3, r3, #4
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d005      	beq.n	80027b4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027a8:	4b43      	ldr	r3, [pc, #268]	@ (80028b8 <HAL_RCC_ClockConfig+0x264>)
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	4a42      	ldr	r2, [pc, #264]	@ (80028b8 <HAL_RCC_ClockConfig+0x264>)
 80027ae:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80027b2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 0308 	and.w	r3, r3, #8
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d007      	beq.n	80027d0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80027c0:	4b3d      	ldr	r3, [pc, #244]	@ (80028b8 <HAL_RCC_ClockConfig+0x264>)
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80027c8:	4a3b      	ldr	r2, [pc, #236]	@ (80028b8 <HAL_RCC_ClockConfig+0x264>)
 80027ca:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80027ce:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027d0:	4b39      	ldr	r3, [pc, #228]	@ (80028b8 <HAL_RCC_ClockConfig+0x264>)
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	4936      	ldr	r1, [pc, #216]	@ (80028b8 <HAL_RCC_ClockConfig+0x264>)
 80027de:	4313      	orrs	r3, r2
 80027e0:	608b      	str	r3, [r1, #8]
 80027e2:	e008      	b.n	80027f6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	2b80      	cmp	r3, #128	@ 0x80
 80027e8:	d105      	bne.n	80027f6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80027ea:	4b33      	ldr	r3, [pc, #204]	@ (80028b8 <HAL_RCC_ClockConfig+0x264>)
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	4a32      	ldr	r2, [pc, #200]	@ (80028b8 <HAL_RCC_ClockConfig+0x264>)
 80027f0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80027f4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027f6:	4b2f      	ldr	r3, [pc, #188]	@ (80028b4 <HAL_RCC_ClockConfig+0x260>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 030f 	and.w	r3, r3, #15
 80027fe:	683a      	ldr	r2, [r7, #0]
 8002800:	429a      	cmp	r2, r3
 8002802:	d21d      	bcs.n	8002840 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002804:	4b2b      	ldr	r3, [pc, #172]	@ (80028b4 <HAL_RCC_ClockConfig+0x260>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f023 020f 	bic.w	r2, r3, #15
 800280c:	4929      	ldr	r1, [pc, #164]	@ (80028b4 <HAL_RCC_ClockConfig+0x260>)
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	4313      	orrs	r3, r2
 8002812:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002814:	f7fe fd4c 	bl	80012b0 <HAL_GetTick>
 8002818:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800281a:	e00a      	b.n	8002832 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800281c:	f7fe fd48 	bl	80012b0 <HAL_GetTick>
 8002820:	4602      	mov	r2, r0
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	f241 3288 	movw	r2, #5000	@ 0x1388
 800282a:	4293      	cmp	r3, r2
 800282c:	d901      	bls.n	8002832 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800282e:	2303      	movs	r3, #3
 8002830:	e03b      	b.n	80028aa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002832:	4b20      	ldr	r3, [pc, #128]	@ (80028b4 <HAL_RCC_ClockConfig+0x260>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 030f 	and.w	r3, r3, #15
 800283a:	683a      	ldr	r2, [r7, #0]
 800283c:	429a      	cmp	r2, r3
 800283e:	d1ed      	bne.n	800281c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 0304 	and.w	r3, r3, #4
 8002848:	2b00      	cmp	r3, #0
 800284a:	d008      	beq.n	800285e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800284c:	4b1a      	ldr	r3, [pc, #104]	@ (80028b8 <HAL_RCC_ClockConfig+0x264>)
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	4917      	ldr	r1, [pc, #92]	@ (80028b8 <HAL_RCC_ClockConfig+0x264>)
 800285a:	4313      	orrs	r3, r2
 800285c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 0308 	and.w	r3, r3, #8
 8002866:	2b00      	cmp	r3, #0
 8002868:	d009      	beq.n	800287e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800286a:	4b13      	ldr	r3, [pc, #76]	@ (80028b8 <HAL_RCC_ClockConfig+0x264>)
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	691b      	ldr	r3, [r3, #16]
 8002876:	00db      	lsls	r3, r3, #3
 8002878:	490f      	ldr	r1, [pc, #60]	@ (80028b8 <HAL_RCC_ClockConfig+0x264>)
 800287a:	4313      	orrs	r3, r2
 800287c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800287e:	f000 f825 	bl	80028cc <HAL_RCC_GetSysClockFreq>
 8002882:	4602      	mov	r2, r0
 8002884:	4b0c      	ldr	r3, [pc, #48]	@ (80028b8 <HAL_RCC_ClockConfig+0x264>)
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	091b      	lsrs	r3, r3, #4
 800288a:	f003 030f 	and.w	r3, r3, #15
 800288e:	490c      	ldr	r1, [pc, #48]	@ (80028c0 <HAL_RCC_ClockConfig+0x26c>)
 8002890:	5ccb      	ldrb	r3, [r1, r3]
 8002892:	f003 031f 	and.w	r3, r3, #31
 8002896:	fa22 f303 	lsr.w	r3, r2, r3
 800289a:	4a0a      	ldr	r2, [pc, #40]	@ (80028c4 <HAL_RCC_ClockConfig+0x270>)
 800289c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800289e:	4b0a      	ldr	r3, [pc, #40]	@ (80028c8 <HAL_RCC_ClockConfig+0x274>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4618      	mov	r0, r3
 80028a4:	f7fe fcb8 	bl	8001218 <HAL_InitTick>
 80028a8:	4603      	mov	r3, r0
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3718      	adds	r7, #24
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	40022000 	.word	0x40022000
 80028b8:	40021000 	.word	0x40021000
 80028bc:	04c4b400 	.word	0x04c4b400
 80028c0:	08005afc 	.word	0x08005afc
 80028c4:	20000200 	.word	0x20000200
 80028c8:	20000204 	.word	0x20000204

080028cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b087      	sub	sp, #28
 80028d0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80028d2:	4b2c      	ldr	r3, [pc, #176]	@ (8002984 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	f003 030c 	and.w	r3, r3, #12
 80028da:	2b04      	cmp	r3, #4
 80028dc:	d102      	bne.n	80028e4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80028de:	4b2a      	ldr	r3, [pc, #168]	@ (8002988 <HAL_RCC_GetSysClockFreq+0xbc>)
 80028e0:	613b      	str	r3, [r7, #16]
 80028e2:	e047      	b.n	8002974 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80028e4:	4b27      	ldr	r3, [pc, #156]	@ (8002984 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	f003 030c 	and.w	r3, r3, #12
 80028ec:	2b08      	cmp	r3, #8
 80028ee:	d102      	bne.n	80028f6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80028f0:	4b26      	ldr	r3, [pc, #152]	@ (800298c <HAL_RCC_GetSysClockFreq+0xc0>)
 80028f2:	613b      	str	r3, [r7, #16]
 80028f4:	e03e      	b.n	8002974 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80028f6:	4b23      	ldr	r3, [pc, #140]	@ (8002984 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	f003 030c 	and.w	r3, r3, #12
 80028fe:	2b0c      	cmp	r3, #12
 8002900:	d136      	bne.n	8002970 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002902:	4b20      	ldr	r3, [pc, #128]	@ (8002984 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002904:	68db      	ldr	r3, [r3, #12]
 8002906:	f003 0303 	and.w	r3, r3, #3
 800290a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800290c:	4b1d      	ldr	r3, [pc, #116]	@ (8002984 <HAL_RCC_GetSysClockFreq+0xb8>)
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	091b      	lsrs	r3, r3, #4
 8002912:	f003 030f 	and.w	r3, r3, #15
 8002916:	3301      	adds	r3, #1
 8002918:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	2b03      	cmp	r3, #3
 800291e:	d10c      	bne.n	800293a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002920:	4a1a      	ldr	r2, [pc, #104]	@ (800298c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	fbb2 f3f3 	udiv	r3, r2, r3
 8002928:	4a16      	ldr	r2, [pc, #88]	@ (8002984 <HAL_RCC_GetSysClockFreq+0xb8>)
 800292a:	68d2      	ldr	r2, [r2, #12]
 800292c:	0a12      	lsrs	r2, r2, #8
 800292e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002932:	fb02 f303 	mul.w	r3, r2, r3
 8002936:	617b      	str	r3, [r7, #20]
      break;
 8002938:	e00c      	b.n	8002954 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800293a:	4a13      	ldr	r2, [pc, #76]	@ (8002988 <HAL_RCC_GetSysClockFreq+0xbc>)
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002942:	4a10      	ldr	r2, [pc, #64]	@ (8002984 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002944:	68d2      	ldr	r2, [r2, #12]
 8002946:	0a12      	lsrs	r2, r2, #8
 8002948:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800294c:	fb02 f303 	mul.w	r3, r2, r3
 8002950:	617b      	str	r3, [r7, #20]
      break;
 8002952:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002954:	4b0b      	ldr	r3, [pc, #44]	@ (8002984 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	0e5b      	lsrs	r3, r3, #25
 800295a:	f003 0303 	and.w	r3, r3, #3
 800295e:	3301      	adds	r3, #1
 8002960:	005b      	lsls	r3, r3, #1
 8002962:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002964:	697a      	ldr	r2, [r7, #20]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	fbb2 f3f3 	udiv	r3, r2, r3
 800296c:	613b      	str	r3, [r7, #16]
 800296e:	e001      	b.n	8002974 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002970:	2300      	movs	r3, #0
 8002972:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002974:	693b      	ldr	r3, [r7, #16]
}
 8002976:	4618      	mov	r0, r3
 8002978:	371c      	adds	r7, #28
 800297a:	46bd      	mov	sp, r7
 800297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002980:	4770      	bx	lr
 8002982:	bf00      	nop
 8002984:	40021000 	.word	0x40021000
 8002988:	00f42400 	.word	0x00f42400
 800298c:	016e3600 	.word	0x016e3600

08002990 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002990:	b480      	push	{r7}
 8002992:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002994:	4b03      	ldr	r3, [pc, #12]	@ (80029a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002996:	681b      	ldr	r3, [r3, #0]
}
 8002998:	4618      	mov	r0, r3
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr
 80029a2:	bf00      	nop
 80029a4:	20000200 	.word	0x20000200

080029a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80029ac:	f7ff fff0 	bl	8002990 <HAL_RCC_GetHCLKFreq>
 80029b0:	4602      	mov	r2, r0
 80029b2:	4b06      	ldr	r3, [pc, #24]	@ (80029cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	0a1b      	lsrs	r3, r3, #8
 80029b8:	f003 0307 	and.w	r3, r3, #7
 80029bc:	4904      	ldr	r1, [pc, #16]	@ (80029d0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80029be:	5ccb      	ldrb	r3, [r1, r3]
 80029c0:	f003 031f 	and.w	r3, r3, #31
 80029c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	bd80      	pop	{r7, pc}
 80029cc:	40021000 	.word	0x40021000
 80029d0:	08005b0c 	.word	0x08005b0c

080029d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80029d8:	f7ff ffda 	bl	8002990 <HAL_RCC_GetHCLKFreq>
 80029dc:	4602      	mov	r2, r0
 80029de:	4b06      	ldr	r3, [pc, #24]	@ (80029f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	0adb      	lsrs	r3, r3, #11
 80029e4:	f003 0307 	and.w	r3, r3, #7
 80029e8:	4904      	ldr	r1, [pc, #16]	@ (80029fc <HAL_RCC_GetPCLK2Freq+0x28>)
 80029ea:	5ccb      	ldrb	r3, [r1, r3]
 80029ec:	f003 031f 	and.w	r3, r3, #31
 80029f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	40021000 	.word	0x40021000
 80029fc:	08005b0c 	.word	0x08005b0c

08002a00 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b087      	sub	sp, #28
 8002a04:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002a06:	4b1e      	ldr	r3, [pc, #120]	@ (8002a80 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002a08:	68db      	ldr	r3, [r3, #12]
 8002a0a:	f003 0303 	and.w	r3, r3, #3
 8002a0e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002a10:	4b1b      	ldr	r3, [pc, #108]	@ (8002a80 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	091b      	lsrs	r3, r3, #4
 8002a16:	f003 030f 	and.w	r3, r3, #15
 8002a1a:	3301      	adds	r3, #1
 8002a1c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	2b03      	cmp	r3, #3
 8002a22:	d10c      	bne.n	8002a3e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002a24:	4a17      	ldr	r2, [pc, #92]	@ (8002a84 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a2c:	4a14      	ldr	r2, [pc, #80]	@ (8002a80 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002a2e:	68d2      	ldr	r2, [r2, #12]
 8002a30:	0a12      	lsrs	r2, r2, #8
 8002a32:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002a36:	fb02 f303 	mul.w	r3, r2, r3
 8002a3a:	617b      	str	r3, [r7, #20]
    break;
 8002a3c:	e00c      	b.n	8002a58 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002a3e:	4a12      	ldr	r2, [pc, #72]	@ (8002a88 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a46:	4a0e      	ldr	r2, [pc, #56]	@ (8002a80 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002a48:	68d2      	ldr	r2, [r2, #12]
 8002a4a:	0a12      	lsrs	r2, r2, #8
 8002a4c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002a50:	fb02 f303 	mul.w	r3, r2, r3
 8002a54:	617b      	str	r3, [r7, #20]
    break;
 8002a56:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002a58:	4b09      	ldr	r3, [pc, #36]	@ (8002a80 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	0e5b      	lsrs	r3, r3, #25
 8002a5e:	f003 0303 	and.w	r3, r3, #3
 8002a62:	3301      	adds	r3, #1
 8002a64:	005b      	lsls	r3, r3, #1
 8002a66:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002a68:	697a      	ldr	r2, [r7, #20]
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a70:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002a72:	687b      	ldr	r3, [r7, #4]
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	371c      	adds	r7, #28
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7e:	4770      	bx	lr
 8002a80:	40021000 	.word	0x40021000
 8002a84:	016e3600 	.word	0x016e3600
 8002a88:	00f42400 	.word	0x00f42400

08002a8c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b086      	sub	sp, #24
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002a94:	2300      	movs	r3, #0
 8002a96:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002a98:	2300      	movs	r3, #0
 8002a9a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	f000 8098 	beq.w	8002bda <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002aae:	4b43      	ldr	r3, [pc, #268]	@ (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ab0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ab2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d10d      	bne.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002aba:	4b40      	ldr	r3, [pc, #256]	@ (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002abc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002abe:	4a3f      	ldr	r2, [pc, #252]	@ (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ac0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ac4:	6593      	str	r3, [r2, #88]	@ 0x58
 8002ac6:	4b3d      	ldr	r3, [pc, #244]	@ (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ac8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002aca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ace:	60bb      	str	r3, [r7, #8]
 8002ad0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ad6:	4b3a      	ldr	r3, [pc, #232]	@ (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a39      	ldr	r2, [pc, #228]	@ (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002adc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ae0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002ae2:	f7fe fbe5 	bl	80012b0 <HAL_GetTick>
 8002ae6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002ae8:	e009      	b.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002aea:	f7fe fbe1 	bl	80012b0 <HAL_GetTick>
 8002aee:	4602      	mov	r2, r0
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	1ad3      	subs	r3, r2, r3
 8002af4:	2b02      	cmp	r3, #2
 8002af6:	d902      	bls.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002af8:	2303      	movs	r3, #3
 8002afa:	74fb      	strb	r3, [r7, #19]
        break;
 8002afc:	e005      	b.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002afe:	4b30      	ldr	r3, [pc, #192]	@ (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d0ef      	beq.n	8002aea <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002b0a:	7cfb      	ldrb	r3, [r7, #19]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d159      	bne.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002b10:	4b2a      	ldr	r3, [pc, #168]	@ (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b16:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b1a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d01e      	beq.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b26:	697a      	ldr	r2, [r7, #20]
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d019      	beq.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002b2c:	4b23      	ldr	r3, [pc, #140]	@ (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b32:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b36:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002b38:	4b20      	ldr	r3, [pc, #128]	@ (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b3e:	4a1f      	ldr	r2, [pc, #124]	@ (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b44:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002b48:	4b1c      	ldr	r3, [pc, #112]	@ (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b4e:	4a1b      	ldr	r2, [pc, #108]	@ (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b50:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b54:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002b58:	4a18      	ldr	r2, [pc, #96]	@ (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	f003 0301 	and.w	r3, r3, #1
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d016      	beq.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b6a:	f7fe fba1 	bl	80012b0 <HAL_GetTick>
 8002b6e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b70:	e00b      	b.n	8002b8a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b72:	f7fe fb9d 	bl	80012b0 <HAL_GetTick>
 8002b76:	4602      	mov	r2, r0
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	1ad3      	subs	r3, r2, r3
 8002b7c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d902      	bls.n	8002b8a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002b84:	2303      	movs	r3, #3
 8002b86:	74fb      	strb	r3, [r7, #19]
            break;
 8002b88:	e006      	b.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b8a:	4b0c      	ldr	r3, [pc, #48]	@ (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b90:	f003 0302 	and.w	r3, r3, #2
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d0ec      	beq.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002b98:	7cfb      	ldrb	r3, [r7, #19]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d10b      	bne.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b9e:	4b07      	ldr	r3, [pc, #28]	@ (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ba0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ba4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002bac:	4903      	ldr	r1, [pc, #12]	@ (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002bb4:	e008      	b.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002bb6:	7cfb      	ldrb	r3, [r7, #19]
 8002bb8:	74bb      	strb	r3, [r7, #18]
 8002bba:	e005      	b.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002bbc:	40021000 	.word	0x40021000
 8002bc0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bc4:	7cfb      	ldrb	r3, [r7, #19]
 8002bc6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002bc8:	7c7b      	ldrb	r3, [r7, #17]
 8002bca:	2b01      	cmp	r3, #1
 8002bcc:	d105      	bne.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bce:	4ba7      	ldr	r3, [pc, #668]	@ (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bd2:	4aa6      	ldr	r2, [pc, #664]	@ (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bd4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002bd8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 0301 	and.w	r3, r3, #1
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d00a      	beq.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002be6:	4ba1      	ldr	r3, [pc, #644]	@ (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002be8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bec:	f023 0203 	bic.w	r2, r3, #3
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	499d      	ldr	r1, [pc, #628]	@ (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 0302 	and.w	r3, r3, #2
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d00a      	beq.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002c08:	4b98      	ldr	r3, [pc, #608]	@ (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c0e:	f023 020c 	bic.w	r2, r3, #12
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	4995      	ldr	r1, [pc, #596]	@ (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 0304 	and.w	r3, r3, #4
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d00a      	beq.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002c2a:	4b90      	ldr	r3, [pc, #576]	@ (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c30:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	68db      	ldr	r3, [r3, #12]
 8002c38:	498c      	ldr	r1, [pc, #560]	@ (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f003 0308 	and.w	r3, r3, #8
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d00a      	beq.n	8002c62 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002c4c:	4b87      	ldr	r3, [pc, #540]	@ (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c52:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	691b      	ldr	r3, [r3, #16]
 8002c5a:	4984      	ldr	r1, [pc, #528]	@ (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 0310 	and.w	r3, r3, #16
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d00a      	beq.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002c6e:	4b7f      	ldr	r3, [pc, #508]	@ (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c74:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	695b      	ldr	r3, [r3, #20]
 8002c7c:	497b      	ldr	r1, [pc, #492]	@ (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 0320 	and.w	r3, r3, #32
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d00a      	beq.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002c90:	4b76      	ldr	r3, [pc, #472]	@ (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c96:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	699b      	ldr	r3, [r3, #24]
 8002c9e:	4973      	ldr	r1, [pc, #460]	@ (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d00a      	beq.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002cb2:	4b6e      	ldr	r3, [pc, #440]	@ (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cb8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	69db      	ldr	r3, [r3, #28]
 8002cc0:	496a      	ldr	r1, [pc, #424]	@ (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d00a      	beq.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002cd4:	4b65      	ldr	r3, [pc, #404]	@ (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cda:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6a1b      	ldr	r3, [r3, #32]
 8002ce2:	4962      	ldr	r1, [pc, #392]	@ (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d00a      	beq.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002cf6:	4b5d      	ldr	r3, [pc, #372]	@ (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cfc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d04:	4959      	ldr	r1, [pc, #356]	@ (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d06:	4313      	orrs	r3, r2
 8002d08:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d00a      	beq.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002d18:	4b54      	ldr	r3, [pc, #336]	@ (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d1a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002d1e:	f023 0203 	bic.w	r2, r3, #3
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d26:	4951      	ldr	r1, [pc, #324]	@ (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d00a      	beq.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002d3a:	4b4c      	ldr	r3, [pc, #304]	@ (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d40:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d48:	4948      	ldr	r1, [pc, #288]	@ (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d015      	beq.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002d5c:	4b43      	ldr	r3, [pc, #268]	@ (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d62:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d6a:	4940      	ldr	r1, [pc, #256]	@ (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d76:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002d7a:	d105      	bne.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d7c:	4b3b      	ldr	r3, [pc, #236]	@ (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d7e:	68db      	ldr	r3, [r3, #12]
 8002d80:	4a3a      	ldr	r2, [pc, #232]	@ (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d82:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002d86:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d015      	beq.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002d94:	4b35      	ldr	r3, [pc, #212]	@ (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d9a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002da2:	4932      	ldr	r1, [pc, #200]	@ (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002da4:	4313      	orrs	r3, r2
 8002da6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002dae:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002db2:	d105      	bne.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002db4:	4b2d      	ldr	r3, [pc, #180]	@ (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002db6:	68db      	ldr	r3, [r3, #12]
 8002db8:	4a2c      	ldr	r2, [pc, #176]	@ (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002dbe:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d015      	beq.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002dcc:	4b27      	ldr	r3, [pc, #156]	@ (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dd2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dda:	4924      	ldr	r1, [pc, #144]	@ (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002de6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002dea:	d105      	bne.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002dec:	4b1f      	ldr	r3, [pc, #124]	@ (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dee:	68db      	ldr	r3, [r3, #12]
 8002df0:	4a1e      	ldr	r2, [pc, #120]	@ (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002df2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002df6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d015      	beq.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002e04:	4b19      	ldr	r3, [pc, #100]	@ (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e0a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e12:	4916      	ldr	r1, [pc, #88]	@ (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e14:	4313      	orrs	r3, r2
 8002e16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e1e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002e22:	d105      	bne.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e24:	4b11      	ldr	r3, [pc, #68]	@ (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e26:	68db      	ldr	r3, [r3, #12]
 8002e28:	4a10      	ldr	r2, [pc, #64]	@ (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e2a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002e2e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d019      	beq.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002e3c:	4b0b      	ldr	r3, [pc, #44]	@ (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e42:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e4a:	4908      	ldr	r1, [pc, #32]	@ (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e56:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002e5a:	d109      	bne.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e5c:	4b03      	ldr	r3, [pc, #12]	@ (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e5e:	68db      	ldr	r3, [r3, #12]
 8002e60:	4a02      	ldr	r2, [pc, #8]	@ (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e62:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002e66:	60d3      	str	r3, [r2, #12]
 8002e68:	e002      	b.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002e6a:	bf00      	nop
 8002e6c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d015      	beq.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002e7c:	4b29      	ldr	r3, [pc, #164]	@ (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e82:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e8a:	4926      	ldr	r1, [pc, #152]	@ (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e96:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002e9a:	d105      	bne.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002e9c:	4b21      	ldr	r3, [pc, #132]	@ (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002e9e:	68db      	ldr	r3, [r3, #12]
 8002ea0:	4a20      	ldr	r2, [pc, #128]	@ (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002ea2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ea6:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d015      	beq.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002eb4:	4b1b      	ldr	r3, [pc, #108]	@ (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002eba:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ec2:	4918      	ldr	r1, [pc, #96]	@ (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ece:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ed2:	d105      	bne.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002ed4:	4b13      	ldr	r3, [pc, #76]	@ (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002ed6:	68db      	ldr	r3, [r3, #12]
 8002ed8:	4a12      	ldr	r2, [pc, #72]	@ (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002eda:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ede:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d015      	beq.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002eec:	4b0d      	ldr	r3, [pc, #52]	@ (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002eee:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002ef2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002efa:	490a      	ldr	r1, [pc, #40]	@ (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002efc:	4313      	orrs	r3, r2
 8002efe:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f06:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002f0a:	d105      	bne.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f0c:	4b05      	ldr	r3, [pc, #20]	@ (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	4a04      	ldr	r2, [pc, #16]	@ (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002f12:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002f16:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002f18:	7cbb      	ldrb	r3, [r7, #18]
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	3718      	adds	r7, #24
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	bf00      	nop
 8002f24:	40021000 	.word	0x40021000

08002f28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b082      	sub	sp, #8
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d101      	bne.n	8002f3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e054      	b.n	8002fe4 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d111      	bne.n	8002f6a <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f000 fdd4 	bl	8003afc <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d102      	bne.n	8002f62 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	4a23      	ldr	r2, [pc, #140]	@ (8002fec <HAL_TIM_Base_Init+0xc4>)
 8002f60:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2202      	movs	r2, #2
 8002f6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	3304      	adds	r3, #4
 8002f7a:	4619      	mov	r1, r3
 8002f7c:	4610      	mov	r0, r2
 8002f7e:	f000 fce3 	bl	8003948 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2201      	movs	r2, #1
 8002f86:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2201      	movs	r2, #1
 8002f8e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2201      	movs	r2, #1
 8002f96:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2201      	movs	r2, #1
 8002fae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2201      	movs	r2, #1
 8002fce:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2201      	movs	r2, #1
 8002fde:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002fe2:	2300      	movs	r3, #0
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	3708      	adds	r7, #8
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}
 8002fec:	08000eed 	.word	0x08000eed

08002ff0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b085      	sub	sp, #20
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	2b01      	cmp	r3, #1
 8003002:	d001      	beq.n	8003008 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	e054      	b.n	80030b2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2202      	movs	r2, #2
 800300c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	68da      	ldr	r2, [r3, #12]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f042 0201 	orr.w	r2, r2, #1
 800301e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a26      	ldr	r2, [pc, #152]	@ (80030c0 <HAL_TIM_Base_Start_IT+0xd0>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d022      	beq.n	8003070 <HAL_TIM_Base_Start_IT+0x80>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003032:	d01d      	beq.n	8003070 <HAL_TIM_Base_Start_IT+0x80>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a22      	ldr	r2, [pc, #136]	@ (80030c4 <HAL_TIM_Base_Start_IT+0xd4>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d018      	beq.n	8003070 <HAL_TIM_Base_Start_IT+0x80>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a21      	ldr	r2, [pc, #132]	@ (80030c8 <HAL_TIM_Base_Start_IT+0xd8>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d013      	beq.n	8003070 <HAL_TIM_Base_Start_IT+0x80>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a1f      	ldr	r2, [pc, #124]	@ (80030cc <HAL_TIM_Base_Start_IT+0xdc>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d00e      	beq.n	8003070 <HAL_TIM_Base_Start_IT+0x80>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a1e      	ldr	r2, [pc, #120]	@ (80030d0 <HAL_TIM_Base_Start_IT+0xe0>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d009      	beq.n	8003070 <HAL_TIM_Base_Start_IT+0x80>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a1c      	ldr	r2, [pc, #112]	@ (80030d4 <HAL_TIM_Base_Start_IT+0xe4>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d004      	beq.n	8003070 <HAL_TIM_Base_Start_IT+0x80>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a1b      	ldr	r2, [pc, #108]	@ (80030d8 <HAL_TIM_Base_Start_IT+0xe8>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d115      	bne.n	800309c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	689a      	ldr	r2, [r3, #8]
 8003076:	4b19      	ldr	r3, [pc, #100]	@ (80030dc <HAL_TIM_Base_Start_IT+0xec>)
 8003078:	4013      	ands	r3, r2
 800307a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2b06      	cmp	r3, #6
 8003080:	d015      	beq.n	80030ae <HAL_TIM_Base_Start_IT+0xbe>
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003088:	d011      	beq.n	80030ae <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f042 0201 	orr.w	r2, r2, #1
 8003098:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800309a:	e008      	b.n	80030ae <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f042 0201 	orr.w	r2, r2, #1
 80030aa:	601a      	str	r2, [r3, #0]
 80030ac:	e000      	b.n	80030b0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030ae:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80030b0:	2300      	movs	r3, #0
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3714      	adds	r7, #20
 80030b6:	46bd      	mov	sp, r7
 80030b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030bc:	4770      	bx	lr
 80030be:	bf00      	nop
 80030c0:	40012c00 	.word	0x40012c00
 80030c4:	40000400 	.word	0x40000400
 80030c8:	40000800 	.word	0x40000800
 80030cc:	40000c00 	.word	0x40000c00
 80030d0:	40013400 	.word	0x40013400
 80030d4:	40014000 	.word	0x40014000
 80030d8:	40015000 	.word	0x40015000
 80030dc:	00010007 	.word	0x00010007

080030e0 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b082      	sub	sp, #8
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
 80030e8:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d101      	bne.n	80030f4 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e04c      	b.n	800318e <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d111      	bne.n	8003124 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2200      	movs	r2, #0
 8003104:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	f000 fcf7 	bl	8003afc <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003112:	2b00      	cmp	r3, #0
 8003114:	d102      	bne.n	800311c <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	4a1f      	ldr	r2, [pc, #124]	@ (8003198 <HAL_TIM_OnePulse_Init+0xb8>)
 800311a:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003120:	6878      	ldr	r0, [r7, #4]
 8003122:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2202      	movs	r2, #2
 8003128:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	3304      	adds	r3, #4
 8003134:	4619      	mov	r1, r3
 8003136:	4610      	mov	r0, r2
 8003138:	f000 fc06 	bl	8003948 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f022 0208 	bic.w	r2, r2, #8
 800314a:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	6819      	ldr	r1, [r3, #0]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	683a      	ldr	r2, [r7, #0]
 8003158:	430a      	orrs	r2, r1
 800315a:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2201      	movs	r2, #1
 8003160:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2201      	movs	r2, #1
 8003168:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2201      	movs	r2, #1
 8003170:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2201      	movs	r2, #1
 8003178:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2201      	movs	r2, #1
 8003180:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2201      	movs	r2, #1
 8003188:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800318c:	2300      	movs	r3, #0
}
 800318e:	4618      	mov	r0, r3
 8003190:	3708      	adds	r7, #8
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
 8003196:	bf00      	nop
 8003198:	0800319d 	.word	0x0800319d

0800319c <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 800319c:	b480      	push	{r7}
 800319e:	b083      	sub	sp, #12
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 80031a4:	bf00      	nop
 80031a6:	370c      	adds	r7, #12
 80031a8:	46bd      	mov	sp, r7
 80031aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ae:	4770      	bx	lr

080031b0 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b084      	sub	sp, #16
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
 80031b8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80031c0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80031c8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80031d0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80031d8:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80031da:	7bfb      	ldrb	r3, [r7, #15]
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d108      	bne.n	80031f2 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80031e0:	7bbb      	ldrb	r3, [r7, #14]
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d105      	bne.n	80031f2 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80031e6:	7b7b      	ldrb	r3, [r7, #13]
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	d102      	bne.n	80031f2 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80031ec:	7b3b      	ldrb	r3, [r7, #12]
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d001      	beq.n	80031f6 <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e059      	b.n	80032aa <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2202      	movs	r2, #2
 80031fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2202      	movs	r2, #2
 8003202:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2202      	movs	r2, #2
 800320a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2202      	movs	r2, #2
 8003212:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	68da      	ldr	r2, [r3, #12]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f042 0202 	orr.w	r2, r2, #2
 8003224:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	68da      	ldr	r2, [r3, #12]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f042 0204 	orr.w	r2, r2, #4
 8003234:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	2201      	movs	r2, #1
 800323c:	2100      	movs	r1, #0
 800323e:	4618      	mov	r0, r3
 8003240:	f000 fc36 	bl	8003ab0 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	2201      	movs	r2, #1
 800324a:	2104      	movs	r1, #4
 800324c:	4618      	mov	r0, r3
 800324e:	f000 fc2f 	bl	8003ab0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a17      	ldr	r2, [pc, #92]	@ (80032b4 <HAL_TIM_OnePulse_Start_IT+0x104>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d018      	beq.n	800328e <HAL_TIM_OnePulse_Start_IT+0xde>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a15      	ldr	r2, [pc, #84]	@ (80032b8 <HAL_TIM_OnePulse_Start_IT+0x108>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d013      	beq.n	800328e <HAL_TIM_OnePulse_Start_IT+0xde>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a14      	ldr	r2, [pc, #80]	@ (80032bc <HAL_TIM_OnePulse_Start_IT+0x10c>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d00e      	beq.n	800328e <HAL_TIM_OnePulse_Start_IT+0xde>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a12      	ldr	r2, [pc, #72]	@ (80032c0 <HAL_TIM_OnePulse_Start_IT+0x110>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d009      	beq.n	800328e <HAL_TIM_OnePulse_Start_IT+0xde>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a11      	ldr	r2, [pc, #68]	@ (80032c4 <HAL_TIM_OnePulse_Start_IT+0x114>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d004      	beq.n	800328e <HAL_TIM_OnePulse_Start_IT+0xde>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a0f      	ldr	r2, [pc, #60]	@ (80032c8 <HAL_TIM_OnePulse_Start_IT+0x118>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d101      	bne.n	8003292 <HAL_TIM_OnePulse_Start_IT+0xe2>
 800328e:	2301      	movs	r3, #1
 8003290:	e000      	b.n	8003294 <HAL_TIM_OnePulse_Start_IT+0xe4>
 8003292:	2300      	movs	r3, #0
 8003294:	2b00      	cmp	r3, #0
 8003296:	d007      	beq.n	80032a8 <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80032a6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80032a8:	2300      	movs	r3, #0
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	3710      	adds	r7, #16
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	bf00      	nop
 80032b4:	40012c00 	.word	0x40012c00
 80032b8:	40013400 	.word	0x40013400
 80032bc:	40014000 	.word	0x40014000
 80032c0:	40014400 	.word	0x40014400
 80032c4:	40014800 	.word	0x40014800
 80032c8:	40015000 	.word	0x40015000

080032cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b084      	sub	sp, #16
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	68db      	ldr	r3, [r3, #12]
 80032da:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	691b      	ldr	r3, [r3, #16]
 80032e2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	f003 0302 	and.w	r3, r3, #2
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d026      	beq.n	800333c <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	f003 0302 	and.w	r3, r3, #2
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d021      	beq.n	800333c <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f06f 0202 	mvn.w	r2, #2
 8003300:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2201      	movs	r2, #1
 8003306:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	699b      	ldr	r3, [r3, #24]
 800330e:	f003 0303 	and.w	r3, r3, #3
 8003312:	2b00      	cmp	r3, #0
 8003314:	d005      	beq.n	8003322 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800331c:	6878      	ldr	r0, [r7, #4]
 800331e:	4798      	blx	r3
 8003320:	e009      	b.n	8003336 <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2200      	movs	r2, #0
 800333a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	f003 0304 	and.w	r3, r3, #4
 8003342:	2b00      	cmp	r3, #0
 8003344:	d026      	beq.n	8003394 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	f003 0304 	and.w	r3, r3, #4
 800334c:	2b00      	cmp	r3, #0
 800334e:	d021      	beq.n	8003394 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f06f 0204 	mvn.w	r2, #4
 8003358:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2202      	movs	r2, #2
 800335e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	699b      	ldr	r3, [r3, #24]
 8003366:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800336a:	2b00      	cmp	r3, #0
 800336c:	d005      	beq.n	800337a <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003374:	6878      	ldr	r0, [r7, #4]
 8003376:	4798      	blx	r3
 8003378:	e009      	b.n	800338e <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003380:	6878      	ldr	r0, [r7, #4]
 8003382:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2200      	movs	r2, #0
 8003392:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	f003 0308 	and.w	r3, r3, #8
 800339a:	2b00      	cmp	r3, #0
 800339c:	d026      	beq.n	80033ec <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	f003 0308 	and.w	r3, r3, #8
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d021      	beq.n	80033ec <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f06f 0208 	mvn.w	r2, #8
 80033b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2204      	movs	r2, #4
 80033b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	69db      	ldr	r3, [r3, #28]
 80033be:	f003 0303 	and.w	r3, r3, #3
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d005      	beq.n	80033d2 <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80033cc:	6878      	ldr	r0, [r7, #4]
 80033ce:	4798      	blx	r3
 80033d0:	e009      	b.n	80033e6 <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80033d8:	6878      	ldr	r0, [r7, #4]
 80033da:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2200      	movs	r2, #0
 80033ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	f003 0310 	and.w	r3, r3, #16
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d026      	beq.n	8003444 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	f003 0310 	and.w	r3, r3, #16
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d021      	beq.n	8003444 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f06f 0210 	mvn.w	r2, #16
 8003408:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2208      	movs	r2, #8
 800340e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	69db      	ldr	r3, [r3, #28]
 8003416:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800341a:	2b00      	cmp	r3, #0
 800341c:	d005      	beq.n	800342a <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003424:	6878      	ldr	r0, [r7, #4]
 8003426:	4798      	blx	r3
 8003428:	e009      	b.n	800343e <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003430:	6878      	ldr	r0, [r7, #4]
 8003432:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2200      	movs	r2, #0
 8003442:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	f003 0301 	and.w	r3, r3, #1
 800344a:	2b00      	cmp	r3, #0
 800344c:	d00e      	beq.n	800346c <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	f003 0301 	and.w	r3, r3, #1
 8003454:	2b00      	cmp	r3, #0
 8003456:	d009      	beq.n	800346c <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f06f 0201 	mvn.w	r2, #1
 8003460:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003472:	2b00      	cmp	r3, #0
 8003474:	d104      	bne.n	8003480 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800347c:	2b00      	cmp	r3, #0
 800347e:	d00e      	beq.n	800349e <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003486:	2b00      	cmp	r3, #0
 8003488:	d009      	beq.n	800349e <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8003492:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d00e      	beq.n	80034c6 <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d009      	beq.n	80034c6 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80034ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d00e      	beq.n	80034ee <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d009      	beq.n	80034ee <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80034e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	f003 0320 	and.w	r3, r3, #32
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d00e      	beq.n	8003516 <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	f003 0320 	and.w	r3, r3, #32
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d009      	beq.n	8003516 <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f06f 0220 	mvn.w	r2, #32
 800350a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800351c:	2b00      	cmp	r3, #0
 800351e:	d00e      	beq.n	800353e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003526:	2b00      	cmp	r3, #0
 8003528:	d009      	beq.n	800353e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8003532:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003544:	2b00      	cmp	r3, #0
 8003546:	d00e      	beq.n	8003566 <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800354e:	2b00      	cmp	r3, #0
 8003550:	d009      	beq.n	8003566 <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800355a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800356c:	2b00      	cmp	r3, #0
 800356e:	d00e      	beq.n	800358e <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003576:	2b00      	cmp	r3, #0
 8003578:	d009      	beq.n	800358e <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8003582:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003594:	2b00      	cmp	r3, #0
 8003596:	d00e      	beq.n	80035b6 <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d009      	beq.n	80035b6 <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80035aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80035b6:	bf00      	nop
 80035b8:	3710      	adds	r7, #16
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}

080035be <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80035be:	b480      	push	{r7}
 80035c0:	b083      	sub	sp, #12
 80035c2:	af00      	add	r7, sp, #0
 80035c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80035c6:	bf00      	nop
 80035c8:	370c      	adds	r7, #12
 80035ca:	46bd      	mov	sp, r7
 80035cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d0:	4770      	bx	lr

080035d2 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80035d2:	b480      	push	{r7}
 80035d4:	b083      	sub	sp, #12
 80035d6:	af00      	add	r7, sp, #0
 80035d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 80035da:	bf00      	nop
 80035dc:	370c      	adds	r7, #12
 80035de:	46bd      	mov	sp, r7
 80035e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e4:	4770      	bx	lr

080035e6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80035e6:	b480      	push	{r7}
 80035e8:	b083      	sub	sp, #12
 80035ea:	af00      	add	r7, sp, #0
 80035ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80035ee:	bf00      	nop
 80035f0:	370c      	adds	r7, #12
 80035f2:	46bd      	mov	sp, r7
 80035f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f8:	4770      	bx	lr

080035fa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80035fa:	b480      	push	{r7}
 80035fc:	b083      	sub	sp, #12
 80035fe:	af00      	add	r7, sp, #0
 8003600:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003602:	bf00      	nop
 8003604:	370c      	adds	r7, #12
 8003606:	46bd      	mov	sp, r7
 8003608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360c:	4770      	bx	lr

0800360e <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800360e:	b480      	push	{r7}
 8003610:	b083      	sub	sp, #12
 8003612:	af00      	add	r7, sp, #0
 8003614:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8003616:	bf00      	nop
 8003618:	370c      	adds	r7, #12
 800361a:	46bd      	mov	sp, r7
 800361c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003620:	4770      	bx	lr

08003622 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003622:	b480      	push	{r7}
 8003624:	b083      	sub	sp, #12
 8003626:	af00      	add	r7, sp, #0
 8003628:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800362a:	bf00      	nop
 800362c:	370c      	adds	r7, #12
 800362e:	46bd      	mov	sp, r7
 8003630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003634:	4770      	bx	lr

08003636 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003636:	b480      	push	{r7}
 8003638:	b083      	sub	sp, #12
 800363a:	af00      	add	r7, sp, #0
 800363c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800363e:	bf00      	nop
 8003640:	370c      	adds	r7, #12
 8003642:	46bd      	mov	sp, r7
 8003644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003648:	4770      	bx	lr

0800364a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800364a:	b480      	push	{r7}
 800364c:	b083      	sub	sp, #12
 800364e:	af00      	add	r7, sp, #0
 8003650:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003652:	bf00      	nop
 8003654:	370c      	adds	r7, #12
 8003656:	46bd      	mov	sp, r7
 8003658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365c:	4770      	bx	lr

0800365e <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800365e:	b480      	push	{r7}
 8003660:	b083      	sub	sp, #12
 8003662:	af00      	add	r7, sp, #0
 8003664:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8003666:	bf00      	nop
 8003668:	370c      	adds	r7, #12
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr

08003672 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8003672:	b480      	push	{r7}
 8003674:	b083      	sub	sp, #12
 8003676:	af00      	add	r7, sp, #0
 8003678:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800367a:	bf00      	nop
 800367c:	370c      	adds	r7, #12
 800367e:	46bd      	mov	sp, r7
 8003680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003684:	4770      	bx	lr
	...

08003688 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 8003688:	b480      	push	{r7}
 800368a:	b087      	sub	sp, #28
 800368c:	af00      	add	r7, sp, #0
 800368e:	60f8      	str	r0, [r7, #12]
 8003690:	460b      	mov	r3, r1
 8003692:	607a      	str	r2, [r7, #4]
 8003694:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8003696:	2300      	movs	r3, #0
 8003698:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d101      	bne.n	80036a4 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	e14a      	b.n	800393a <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	f040 80dd 	bne.w	800386c <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 80036b2:	7afb      	ldrb	r3, [r7, #11]
 80036b4:	2b1f      	cmp	r3, #31
 80036b6:	f200 80d6 	bhi.w	8003866 <HAL_TIM_RegisterCallback+0x1de>
 80036ba:	a201      	add	r2, pc, #4	@ (adr r2, 80036c0 <HAL_TIM_RegisterCallback+0x38>)
 80036bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036c0:	08003741 	.word	0x08003741
 80036c4:	08003749 	.word	0x08003749
 80036c8:	08003751 	.word	0x08003751
 80036cc:	08003759 	.word	0x08003759
 80036d0:	08003761 	.word	0x08003761
 80036d4:	08003769 	.word	0x08003769
 80036d8:	08003771 	.word	0x08003771
 80036dc:	08003779 	.word	0x08003779
 80036e0:	08003781 	.word	0x08003781
 80036e4:	08003789 	.word	0x08003789
 80036e8:	08003791 	.word	0x08003791
 80036ec:	08003799 	.word	0x08003799
 80036f0:	080037a1 	.word	0x080037a1
 80036f4:	080037a9 	.word	0x080037a9
 80036f8:	080037b3 	.word	0x080037b3
 80036fc:	080037bd 	.word	0x080037bd
 8003700:	080037c7 	.word	0x080037c7
 8003704:	080037d1 	.word	0x080037d1
 8003708:	080037db 	.word	0x080037db
 800370c:	080037e5 	.word	0x080037e5
 8003710:	080037ef 	.word	0x080037ef
 8003714:	080037f9 	.word	0x080037f9
 8003718:	08003803 	.word	0x08003803
 800371c:	0800380d 	.word	0x0800380d
 8003720:	08003817 	.word	0x08003817
 8003724:	08003821 	.word	0x08003821
 8003728:	0800382b 	.word	0x0800382b
 800372c:	08003835 	.word	0x08003835
 8003730:	0800383f 	.word	0x0800383f
 8003734:	08003849 	.word	0x08003849
 8003738:	08003853 	.word	0x08003853
 800373c:	0800385d 	.word	0x0800385d
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	687a      	ldr	r2, [r7, #4]
 8003744:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8003746:	e0f7      	b.n	8003938 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	687a      	ldr	r2, [r7, #4]
 800374c:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800374e:	e0f3      	b.n	8003938 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	687a      	ldr	r2, [r7, #4]
 8003754:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8003756:	e0ef      	b.n	8003938 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	687a      	ldr	r2, [r7, #4]
 800375c:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800375e:	e0eb      	b.n	8003938 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	687a      	ldr	r2, [r7, #4]
 8003764:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8003766:	e0e7      	b.n	8003938 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	687a      	ldr	r2, [r7, #4]
 800376c:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800376e:	e0e3      	b.n	8003938 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	687a      	ldr	r2, [r7, #4]
 8003774:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8003776:	e0df      	b.n	8003938 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	687a      	ldr	r2, [r7, #4]
 800377c:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800377e:	e0db      	b.n	8003938 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	687a      	ldr	r2, [r7, #4]
 8003784:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8003786:	e0d7      	b.n	8003938 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	687a      	ldr	r2, [r7, #4]
 800378c:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800378e:	e0d3      	b.n	8003938 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	687a      	ldr	r2, [r7, #4]
 8003794:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8003796:	e0cf      	b.n	8003938 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	687a      	ldr	r2, [r7, #4]
 800379c:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800379e:	e0cb      	b.n	8003938 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	687a      	ldr	r2, [r7, #4]
 80037a4:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 80037a6:	e0c7      	b.n	8003938 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	687a      	ldr	r2, [r7, #4]
 80037ac:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 80037b0:	e0c2      	b.n	8003938 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	687a      	ldr	r2, [r7, #4]
 80037b6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 80037ba:	e0bd      	b.n	8003938 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	687a      	ldr	r2, [r7, #4]
 80037c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 80037c4:	e0b8      	b.n	8003938 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	687a      	ldr	r2, [r7, #4]
 80037ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 80037ce:	e0b3      	b.n	8003938 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	687a      	ldr	r2, [r7, #4]
 80037d4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 80037d8:	e0ae      	b.n	8003938 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	687a      	ldr	r2, [r7, #4]
 80037de:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 80037e2:	e0a9      	b.n	8003938 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	687a      	ldr	r2, [r7, #4]
 80037e8:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 80037ec:	e0a4      	b.n	8003938 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	687a      	ldr	r2, [r7, #4]
 80037f2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 80037f6:	e09f      	b.n	8003938 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	687a      	ldr	r2, [r7, #4]
 80037fc:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 8003800:	e09a      	b.n	8003938 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	687a      	ldr	r2, [r7, #4]
 8003806:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 800380a:	e095      	b.n	8003938 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	687a      	ldr	r2, [r7, #4]
 8003810:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 8003814:	e090      	b.n	8003938 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	687a      	ldr	r2, [r7, #4]
 800381a:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 800381e:	e08b      	b.n	8003938 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	687a      	ldr	r2, [r7, #4]
 8003824:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 8003828:	e086      	b.n	8003938 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	687a      	ldr	r2, [r7, #4]
 800382e:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 8003832:	e081      	b.n	8003938 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	687a      	ldr	r2, [r7, #4]
 8003838:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 800383c:	e07c      	b.n	8003938 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	687a      	ldr	r2, [r7, #4]
 8003842:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 8003846:	e077      	b.n	8003938 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	687a      	ldr	r2, [r7, #4]
 800384c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 8003850:	e072      	b.n	8003938 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	687a      	ldr	r2, [r7, #4]
 8003856:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800385a:	e06d      	b.n	8003938 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	687a      	ldr	r2, [r7, #4]
 8003860:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8003864:	e068      	b.n	8003938 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	75fb      	strb	r3, [r7, #23]
        break;
 800386a:	e065      	b.n	8003938 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003872:	b2db      	uxtb	r3, r3
 8003874:	2b00      	cmp	r3, #0
 8003876:	d15d      	bne.n	8003934 <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 8003878:	7afb      	ldrb	r3, [r7, #11]
 800387a:	2b0d      	cmp	r3, #13
 800387c:	d857      	bhi.n	800392e <HAL_TIM_RegisterCallback+0x2a6>
 800387e:	a201      	add	r2, pc, #4	@ (adr r2, 8003884 <HAL_TIM_RegisterCallback+0x1fc>)
 8003880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003884:	080038bd 	.word	0x080038bd
 8003888:	080038c5 	.word	0x080038c5
 800388c:	080038cd 	.word	0x080038cd
 8003890:	080038d5 	.word	0x080038d5
 8003894:	080038dd 	.word	0x080038dd
 8003898:	080038e5 	.word	0x080038e5
 800389c:	080038ed 	.word	0x080038ed
 80038a0:	080038f5 	.word	0x080038f5
 80038a4:	080038fd 	.word	0x080038fd
 80038a8:	08003905 	.word	0x08003905
 80038ac:	0800390d 	.word	0x0800390d
 80038b0:	08003915 	.word	0x08003915
 80038b4:	0800391d 	.word	0x0800391d
 80038b8:	08003925 	.word	0x08003925
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	687a      	ldr	r2, [r7, #4]
 80038c0:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 80038c2:	e039      	b.n	8003938 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	687a      	ldr	r2, [r7, #4]
 80038c8:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 80038ca:	e035      	b.n	8003938 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	687a      	ldr	r2, [r7, #4]
 80038d0:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 80038d2:	e031      	b.n	8003938 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	687a      	ldr	r2, [r7, #4]
 80038d8:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 80038da:	e02d      	b.n	8003938 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	687a      	ldr	r2, [r7, #4]
 80038e0:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 80038e2:	e029      	b.n	8003938 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	687a      	ldr	r2, [r7, #4]
 80038e8:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 80038ea:	e025      	b.n	8003938 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	687a      	ldr	r2, [r7, #4]
 80038f0:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 80038f2:	e021      	b.n	8003938 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	687a      	ldr	r2, [r7, #4]
 80038f8:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 80038fa:	e01d      	b.n	8003938 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	687a      	ldr	r2, [r7, #4]
 8003900:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8003902:	e019      	b.n	8003938 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	687a      	ldr	r2, [r7, #4]
 8003908:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800390a:	e015      	b.n	8003938 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	687a      	ldr	r2, [r7, #4]
 8003910:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8003912:	e011      	b.n	8003938 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	687a      	ldr	r2, [r7, #4]
 8003918:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800391a:	e00d      	b.n	8003938 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	687a      	ldr	r2, [r7, #4]
 8003920:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8003922:	e009      	b.n	8003938 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	687a      	ldr	r2, [r7, #4]
 8003928:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 800392c:	e004      	b.n	8003938 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	75fb      	strb	r3, [r7, #23]
        break;
 8003932:	e001      	b.n	8003938 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003938:	7dfb      	ldrb	r3, [r7, #23]
}
 800393a:	4618      	mov	r0, r3
 800393c:	371c      	adds	r7, #28
 800393e:	46bd      	mov	sp, r7
 8003940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003944:	4770      	bx	lr
 8003946:	bf00      	nop

08003948 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003948:	b480      	push	{r7}
 800394a:	b085      	sub	sp, #20
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
 8003950:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	4a4c      	ldr	r2, [pc, #304]	@ (8003a8c <TIM_Base_SetConfig+0x144>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d017      	beq.n	8003990 <TIM_Base_SetConfig+0x48>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003966:	d013      	beq.n	8003990 <TIM_Base_SetConfig+0x48>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	4a49      	ldr	r2, [pc, #292]	@ (8003a90 <TIM_Base_SetConfig+0x148>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d00f      	beq.n	8003990 <TIM_Base_SetConfig+0x48>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	4a48      	ldr	r2, [pc, #288]	@ (8003a94 <TIM_Base_SetConfig+0x14c>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d00b      	beq.n	8003990 <TIM_Base_SetConfig+0x48>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	4a47      	ldr	r2, [pc, #284]	@ (8003a98 <TIM_Base_SetConfig+0x150>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d007      	beq.n	8003990 <TIM_Base_SetConfig+0x48>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	4a46      	ldr	r2, [pc, #280]	@ (8003a9c <TIM_Base_SetConfig+0x154>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d003      	beq.n	8003990 <TIM_Base_SetConfig+0x48>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	4a45      	ldr	r2, [pc, #276]	@ (8003aa0 <TIM_Base_SetConfig+0x158>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d108      	bne.n	80039a2 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003996:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	68fa      	ldr	r2, [r7, #12]
 800399e:	4313      	orrs	r3, r2
 80039a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	4a39      	ldr	r2, [pc, #228]	@ (8003a8c <TIM_Base_SetConfig+0x144>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d023      	beq.n	80039f2 <TIM_Base_SetConfig+0xaa>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039b0:	d01f      	beq.n	80039f2 <TIM_Base_SetConfig+0xaa>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	4a36      	ldr	r2, [pc, #216]	@ (8003a90 <TIM_Base_SetConfig+0x148>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d01b      	beq.n	80039f2 <TIM_Base_SetConfig+0xaa>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	4a35      	ldr	r2, [pc, #212]	@ (8003a94 <TIM_Base_SetConfig+0x14c>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d017      	beq.n	80039f2 <TIM_Base_SetConfig+0xaa>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	4a34      	ldr	r2, [pc, #208]	@ (8003a98 <TIM_Base_SetConfig+0x150>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d013      	beq.n	80039f2 <TIM_Base_SetConfig+0xaa>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	4a33      	ldr	r2, [pc, #204]	@ (8003a9c <TIM_Base_SetConfig+0x154>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d00f      	beq.n	80039f2 <TIM_Base_SetConfig+0xaa>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	4a33      	ldr	r2, [pc, #204]	@ (8003aa4 <TIM_Base_SetConfig+0x15c>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d00b      	beq.n	80039f2 <TIM_Base_SetConfig+0xaa>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	4a32      	ldr	r2, [pc, #200]	@ (8003aa8 <TIM_Base_SetConfig+0x160>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d007      	beq.n	80039f2 <TIM_Base_SetConfig+0xaa>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	4a31      	ldr	r2, [pc, #196]	@ (8003aac <TIM_Base_SetConfig+0x164>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d003      	beq.n	80039f2 <TIM_Base_SetConfig+0xaa>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	4a2c      	ldr	r2, [pc, #176]	@ (8003aa0 <TIM_Base_SetConfig+0x158>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d108      	bne.n	8003a04 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80039f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	68db      	ldr	r3, [r3, #12]
 80039fe:	68fa      	ldr	r2, [r7, #12]
 8003a00:	4313      	orrs	r3, r2
 8003a02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	695b      	ldr	r3, [r3, #20]
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	68fa      	ldr	r2, [r7, #12]
 8003a16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	689a      	ldr	r2, [r3, #8]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	681a      	ldr	r2, [r3, #0]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	4a18      	ldr	r2, [pc, #96]	@ (8003a8c <TIM_Base_SetConfig+0x144>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d013      	beq.n	8003a58 <TIM_Base_SetConfig+0x110>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	4a1a      	ldr	r2, [pc, #104]	@ (8003a9c <TIM_Base_SetConfig+0x154>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d00f      	beq.n	8003a58 <TIM_Base_SetConfig+0x110>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	4a1a      	ldr	r2, [pc, #104]	@ (8003aa4 <TIM_Base_SetConfig+0x15c>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d00b      	beq.n	8003a58 <TIM_Base_SetConfig+0x110>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	4a19      	ldr	r2, [pc, #100]	@ (8003aa8 <TIM_Base_SetConfig+0x160>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d007      	beq.n	8003a58 <TIM_Base_SetConfig+0x110>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	4a18      	ldr	r2, [pc, #96]	@ (8003aac <TIM_Base_SetConfig+0x164>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d003      	beq.n	8003a58 <TIM_Base_SetConfig+0x110>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	4a13      	ldr	r2, [pc, #76]	@ (8003aa0 <TIM_Base_SetConfig+0x158>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d103      	bne.n	8003a60 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	691a      	ldr	r2, [r3, #16]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2201      	movs	r2, #1
 8003a64:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	691b      	ldr	r3, [r3, #16]
 8003a6a:	f003 0301 	and.w	r3, r3, #1
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	d105      	bne.n	8003a7e <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	691b      	ldr	r3, [r3, #16]
 8003a76:	f023 0201 	bic.w	r2, r3, #1
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	611a      	str	r2, [r3, #16]
  }
}
 8003a7e:	bf00      	nop
 8003a80:	3714      	adds	r7, #20
 8003a82:	46bd      	mov	sp, r7
 8003a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a88:	4770      	bx	lr
 8003a8a:	bf00      	nop
 8003a8c:	40012c00 	.word	0x40012c00
 8003a90:	40000400 	.word	0x40000400
 8003a94:	40000800 	.word	0x40000800
 8003a98:	40000c00 	.word	0x40000c00
 8003a9c:	40013400 	.word	0x40013400
 8003aa0:	40015000 	.word	0x40015000
 8003aa4:	40014000 	.word	0x40014000
 8003aa8:	40014400 	.word	0x40014400
 8003aac:	40014800 	.word	0x40014800

08003ab0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b087      	sub	sp, #28
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	60f8      	str	r0, [r7, #12]
 8003ab8:	60b9      	str	r1, [r7, #8]
 8003aba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	f003 031f 	and.w	r3, r3, #31
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	6a1a      	ldr	r2, [r3, #32]
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	43db      	mvns	r3, r3
 8003ad2:	401a      	ands	r2, r3
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	6a1a      	ldr	r2, [r3, #32]
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	f003 031f 	and.w	r3, r3, #31
 8003ae2:	6879      	ldr	r1, [r7, #4]
 8003ae4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ae8:	431a      	orrs	r2, r3
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	621a      	str	r2, [r3, #32]
}
 8003aee:	bf00      	nop
 8003af0:	371c      	adds	r7, #28
 8003af2:	46bd      	mov	sp, r7
 8003af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af8:	4770      	bx	lr
	...

08003afc <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b083      	sub	sp, #12
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	4a26      	ldr	r2, [pc, #152]	@ (8003ba0 <TIM_ResetCallback+0xa4>)
 8003b08:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	4a25      	ldr	r2, [pc, #148]	@ (8003ba4 <TIM_ResetCallback+0xa8>)
 8003b10:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	4a24      	ldr	r2, [pc, #144]	@ (8003ba8 <TIM_ResetCallback+0xac>)
 8003b18:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	4a23      	ldr	r2, [pc, #140]	@ (8003bac <TIM_ResetCallback+0xb0>)
 8003b20:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	4a22      	ldr	r2, [pc, #136]	@ (8003bb0 <TIM_ResetCallback+0xb4>)
 8003b28:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	4a21      	ldr	r2, [pc, #132]	@ (8003bb4 <TIM_ResetCallback+0xb8>)
 8003b30:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	4a20      	ldr	r2, [pc, #128]	@ (8003bb8 <TIM_ResetCallback+0xbc>)
 8003b38:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	4a1f      	ldr	r2, [pc, #124]	@ (8003bbc <TIM_ResetCallback+0xc0>)
 8003b40:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	4a1e      	ldr	r2, [pc, #120]	@ (8003bc0 <TIM_ResetCallback+0xc4>)
 8003b48:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	4a1d      	ldr	r2, [pc, #116]	@ (8003bc4 <TIM_ResetCallback+0xc8>)
 8003b50:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	4a1c      	ldr	r2, [pc, #112]	@ (8003bc8 <TIM_ResetCallback+0xcc>)
 8003b58:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	4a1b      	ldr	r2, [pc, #108]	@ (8003bcc <TIM_ResetCallback+0xd0>)
 8003b60:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	4a1a      	ldr	r2, [pc, #104]	@ (8003bd0 <TIM_ResetCallback+0xd4>)
 8003b68:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	4a19      	ldr	r2, [pc, #100]	@ (8003bd4 <TIM_ResetCallback+0xd8>)
 8003b70:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	4a18      	ldr	r2, [pc, #96]	@ (8003bd8 <TIM_ResetCallback+0xdc>)
 8003b78:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	4a17      	ldr	r2, [pc, #92]	@ (8003bdc <TIM_ResetCallback+0xe0>)
 8003b80:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	4a16      	ldr	r2, [pc, #88]	@ (8003be0 <TIM_ResetCallback+0xe4>)
 8003b88:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	4a15      	ldr	r2, [pc, #84]	@ (8003be4 <TIM_ResetCallback+0xe8>)
 8003b90:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 8003b94:	bf00      	nop
 8003b96:	370c      	adds	r7, #12
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9e:	4770      	bx	lr
 8003ba0:	080035bf 	.word	0x080035bf
 8003ba4:	080035d3 	.word	0x080035d3
 8003ba8:	0800364b 	.word	0x0800364b
 8003bac:	0800365f 	.word	0x0800365f
 8003bb0:	080035fb 	.word	0x080035fb
 8003bb4:	0800360f 	.word	0x0800360f
 8003bb8:	080035e7 	.word	0x080035e7
 8003bbc:	08003623 	.word	0x08003623
 8003bc0:	08003637 	.word	0x08003637
 8003bc4:	08003673 	.word	0x08003673
 8003bc8:	08003be9 	.word	0x08003be9
 8003bcc:	08003bfd 	.word	0x08003bfd
 8003bd0:	08003c11 	.word	0x08003c11
 8003bd4:	08003c25 	.word	0x08003c25
 8003bd8:	08003c39 	.word	0x08003c39
 8003bdc:	08003c4d 	.word	0x08003c4d
 8003be0:	08003c61 	.word	0x08003c61
 8003be4:	08003c75 	.word	0x08003c75

08003be8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b083      	sub	sp, #12
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003bf0:	bf00      	nop
 8003bf2:	370c      	adds	r7, #12
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfa:	4770      	bx	lr

08003bfc <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b083      	sub	sp, #12
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8003c04:	bf00      	nop
 8003c06:	370c      	adds	r7, #12
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0e:	4770      	bx	lr

08003c10 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b083      	sub	sp, #12
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003c18:	bf00      	nop
 8003c1a:	370c      	adds	r7, #12
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c22:	4770      	bx	lr

08003c24 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b083      	sub	sp, #12
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003c2c:	bf00      	nop
 8003c2e:	370c      	adds	r7, #12
 8003c30:	46bd      	mov	sp, r7
 8003c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c36:	4770      	bx	lr

08003c38 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b083      	sub	sp, #12
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8003c40:	bf00      	nop
 8003c42:	370c      	adds	r7, #12
 8003c44:	46bd      	mov	sp, r7
 8003c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4a:	4770      	bx	lr

08003c4c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b083      	sub	sp, #12
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8003c54:	bf00      	nop
 8003c56:	370c      	adds	r7, #12
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5e:	4770      	bx	lr

08003c60 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b083      	sub	sp, #12
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8003c68:	bf00      	nop
 8003c6a:	370c      	adds	r7, #12
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c72:	4770      	bx	lr

08003c74 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b083      	sub	sp, #12
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8003c7c:	bf00      	nop
 8003c7e:	370c      	adds	r7, #12
 8003c80:	46bd      	mov	sp, r7
 8003c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c86:	4770      	bx	lr

08003c88 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b082      	sub	sp, #8
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d101      	bne.n	8003c9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	e050      	b.n	8003d3c <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d114      	bne.n	8003cce <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8003cac:	6878      	ldr	r0, [r7, #4]
 8003cae:	f000 fdc5 	bl	800483c <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d103      	bne.n	8003cc4 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	4a21      	ldr	r2, [pc, #132]	@ (8003d44 <HAL_UART_Init+0xbc>)
 8003cc0:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2224      	movs	r2, #36	@ 0x24
 8003cd2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f022 0201 	bic.w	r2, r2, #1
 8003ce4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d002      	beq.n	8003cf4 <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f001 f8f2 	bl	8004ed8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003cf4:	6878      	ldr	r0, [r7, #4]
 8003cf6:	f000 fdf3 	bl	80048e0 <UART_SetConfig>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	d101      	bne.n	8003d04 <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	e01b      	b.n	8003d3c <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	685a      	ldr	r2, [r3, #4]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003d12:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	689a      	ldr	r2, [r3, #8]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003d22:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	681a      	ldr	r2, [r3, #0]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f042 0201 	orr.w	r2, r2, #1
 8003d32:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003d34:	6878      	ldr	r0, [r7, #4]
 8003d36:	f001 f971 	bl	800501c <UART_CheckIdleState>
 8003d3a:	4603      	mov	r3, r0
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	3708      	adds	r7, #8
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}
 8003d44:	08000f39 	.word	0x08000f39

08003d48 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b087      	sub	sp, #28
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	60f8      	str	r0, [r7, #12]
 8003d50:	460b      	mov	r3, r1
 8003d52:	607a      	str	r2, [r7, #4]
 8003d54:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8003d56:	2300      	movs	r3, #0
 8003d58:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d109      	bne.n	8003d74 <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d66:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 8003d70:	2301      	movs	r3, #1
 8003d72:	e09c      	b.n	8003eae <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d7a:	2b20      	cmp	r3, #32
 8003d7c:	d16c      	bne.n	8003e58 <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 8003d7e:	7afb      	ldrb	r3, [r7, #11]
 8003d80:	2b0c      	cmp	r3, #12
 8003d82:	d85e      	bhi.n	8003e42 <HAL_UART_RegisterCallback+0xfa>
 8003d84:	a201      	add	r2, pc, #4	@ (adr r2, 8003d8c <HAL_UART_RegisterCallback+0x44>)
 8003d86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d8a:	bf00      	nop
 8003d8c:	08003dc1 	.word	0x08003dc1
 8003d90:	08003dcb 	.word	0x08003dcb
 8003d94:	08003dd5 	.word	0x08003dd5
 8003d98:	08003ddf 	.word	0x08003ddf
 8003d9c:	08003de9 	.word	0x08003de9
 8003da0:	08003df3 	.word	0x08003df3
 8003da4:	08003dfd 	.word	0x08003dfd
 8003da8:	08003e07 	.word	0x08003e07
 8003dac:	08003e11 	.word	0x08003e11
 8003db0:	08003e1b 	.word	0x08003e1b
 8003db4:	08003e25 	.word	0x08003e25
 8003db8:	08003e2f 	.word	0x08003e2f
 8003dbc:	08003e39 	.word	0x08003e39
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	687a      	ldr	r2, [r7, #4]
 8003dc4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 8003dc8:	e070      	b.n	8003eac <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	687a      	ldr	r2, [r7, #4]
 8003dce:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 8003dd2:	e06b      	b.n	8003eac <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	687a      	ldr	r2, [r7, #4]
 8003dd8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 8003ddc:	e066      	b.n	8003eac <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	687a      	ldr	r2, [r7, #4]
 8003de2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 8003de6:	e061      	b.n	8003eac <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	687a      	ldr	r2, [r7, #4]
 8003dec:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 8003df0:	e05c      	b.n	8003eac <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	687a      	ldr	r2, [r7, #4]
 8003df6:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 8003dfa:	e057      	b.n	8003eac <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	687a      	ldr	r2, [r7, #4]
 8003e00:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 8003e04:	e052      	b.n	8003eac <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	687a      	ldr	r2, [r7, #4]
 8003e0a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 8003e0e:	e04d      	b.n	8003eac <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	687a      	ldr	r2, [r7, #4]
 8003e14:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 8003e18:	e048      	b.n	8003eac <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	687a      	ldr	r2, [r7, #4]
 8003e1e:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 8003e22:	e043      	b.n	8003eac <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	687a      	ldr	r2, [r7, #4]
 8003e28:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 8003e2c:	e03e      	b.n	8003eac <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	687a      	ldr	r2, [r7, #4]
 8003e32:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8003e36:	e039      	b.n	8003eac <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	687a      	ldr	r2, [r7, #4]
 8003e3c:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8003e40:	e034      	b.n	8003eac <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e48:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 8003e52:	2301      	movs	r3, #1
 8003e54:	75fb      	strb	r3, [r7, #23]
        break;
 8003e56:	e029      	b.n	8003eac <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d11a      	bne.n	8003e98 <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 8003e62:	7afb      	ldrb	r3, [r7, #11]
 8003e64:	2b0b      	cmp	r3, #11
 8003e66:	d002      	beq.n	8003e6e <HAL_UART_RegisterCallback+0x126>
 8003e68:	2b0c      	cmp	r3, #12
 8003e6a:	d005      	beq.n	8003e78 <HAL_UART_RegisterCallback+0x130>
 8003e6c:	e009      	b.n	8003e82 <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	687a      	ldr	r2, [r7, #4]
 8003e72:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8003e76:	e019      	b.n	8003eac <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	687a      	ldr	r2, [r7, #4]
 8003e7c:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8003e80:	e014      	b.n	8003eac <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e88:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	75fb      	strb	r3, [r7, #23]
        break;
 8003e96:	e009      	b.n	8003eac <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e9e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003eac:	7dfb      	ldrb	r3, [r7, #23]
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	371c      	adds	r7, #28
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb8:	4770      	bx	lr
 8003eba:	bf00      	nop

08003ebc <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b08a      	sub	sp, #40	@ 0x28
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	60f8      	str	r0, [r7, #12]
 8003ec4:	60b9      	str	r1, [r7, #8]
 8003ec6:	4613      	mov	r3, r2
 8003ec8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ed0:	2b20      	cmp	r3, #32
 8003ed2:	d167      	bne.n	8003fa4 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d002      	beq.n	8003ee0 <HAL_UART_Transmit_DMA+0x24>
 8003eda:	88fb      	ldrh	r3, [r7, #6]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d101      	bne.n	8003ee4 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	e060      	b.n	8003fa6 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	68ba      	ldr	r2, [r7, #8]
 8003ee8:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	88fa      	ldrh	r2, [r7, #6]
 8003eee:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	88fa      	ldrh	r2, [r7, #6]
 8003ef6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2200      	movs	r2, #0
 8003efe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2221      	movs	r2, #33	@ 0x21
 8003f06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d028      	beq.n	8003f64 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003f16:	4a26      	ldr	r2, [pc, #152]	@ (8003fb0 <HAL_UART_Transmit_DMA+0xf4>)
 8003f18:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003f1e:	4a25      	ldr	r2, [pc, #148]	@ (8003fb4 <HAL_UART_Transmit_DMA+0xf8>)
 8003f20:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003f26:	4a24      	ldr	r2, [pc, #144]	@ (8003fb8 <HAL_UART_Transmit_DMA+0xfc>)
 8003f28:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003f2e:	2200      	movs	r2, #0
 8003f30:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f3a:	4619      	mov	r1, r3
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	3328      	adds	r3, #40	@ 0x28
 8003f42:	461a      	mov	r2, r3
 8003f44:	88fb      	ldrh	r3, [r7, #6]
 8003f46:	f7fd fb77 	bl	8001638 <HAL_DMA_Start_IT>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d009      	beq.n	8003f64 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2210      	movs	r2, #16
 8003f54:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2220      	movs	r2, #32
 8003f5c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8003f60:	2301      	movs	r3, #1
 8003f62:	e020      	b.n	8003fa6 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	2240      	movs	r2, #64	@ 0x40
 8003f6a:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	3308      	adds	r3, #8
 8003f72:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	e853 3f00 	ldrex	r3, [r3]
 8003f7a:	613b      	str	r3, [r7, #16]
   return(result);
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f82:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	3308      	adds	r3, #8
 8003f8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f8c:	623a      	str	r2, [r7, #32]
 8003f8e:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f90:	69f9      	ldr	r1, [r7, #28]
 8003f92:	6a3a      	ldr	r2, [r7, #32]
 8003f94:	e841 2300 	strex	r3, r2, [r1]
 8003f98:	61bb      	str	r3, [r7, #24]
   return(result);
 8003f9a:	69bb      	ldr	r3, [r7, #24]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d1e5      	bne.n	8003f6c <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	e000      	b.n	8003fa6 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8003fa4:	2302      	movs	r3, #2
  }
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	3728      	adds	r7, #40	@ 0x28
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}
 8003fae:	bf00      	nop
 8003fb0:	080054e7 	.word	0x080054e7
 8003fb4:	08005585 	.word	0x08005585
 8003fb8:	0800571f 	.word	0x0800571f

08003fbc <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b08a      	sub	sp, #40	@ 0x28
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	60f8      	str	r0, [r7, #12]
 8003fc4:	60b9      	str	r1, [r7, #8]
 8003fc6:	4613      	mov	r3, r2
 8003fc8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003fd0:	2b20      	cmp	r3, #32
 8003fd2:	d137      	bne.n	8004044 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d002      	beq.n	8003fe0 <HAL_UART_Receive_DMA+0x24>
 8003fda:	88fb      	ldrh	r3, [r7, #6]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d101      	bne.n	8003fe4 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	e030      	b.n	8004046 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a18      	ldr	r2, [pc, #96]	@ (8004050 <HAL_UART_Receive_DMA+0x94>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d01f      	beq.n	8004034 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d018      	beq.n	8004034 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	e853 3f00 	ldrex	r3, [r3]
 800400e:	613b      	str	r3, [r7, #16]
   return(result);
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004016:	627b      	str	r3, [r7, #36]	@ 0x24
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	461a      	mov	r2, r3
 800401e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004020:	623b      	str	r3, [r7, #32]
 8004022:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004024:	69f9      	ldr	r1, [r7, #28]
 8004026:	6a3a      	ldr	r2, [r7, #32]
 8004028:	e841 2300 	strex	r3, r2, [r1]
 800402c:	61bb      	str	r3, [r7, #24]
   return(result);
 800402e:	69bb      	ldr	r3, [r7, #24]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d1e6      	bne.n	8004002 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004034:	88fb      	ldrh	r3, [r7, #6]
 8004036:	461a      	mov	r2, r3
 8004038:	68b9      	ldr	r1, [r7, #8]
 800403a:	68f8      	ldr	r0, [r7, #12]
 800403c:	f001 f906 	bl	800524c <UART_Start_Receive_DMA>
 8004040:	4603      	mov	r3, r0
 8004042:	e000      	b.n	8004046 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004044:	2302      	movs	r3, #2
  }
}
 8004046:	4618      	mov	r0, r3
 8004048:	3728      	adds	r7, #40	@ 0x28
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}
 800404e:	bf00      	nop
 8004050:	40008000 	.word	0x40008000

08004054 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b0ba      	sub	sp, #232	@ 0xe8
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	69db      	ldr	r3, [r3, #28]
 8004062:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800407a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800407e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8004082:	4013      	ands	r3, r2
 8004084:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8004088:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800408c:	2b00      	cmp	r3, #0
 800408e:	d11b      	bne.n	80040c8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004090:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004094:	f003 0320 	and.w	r3, r3, #32
 8004098:	2b00      	cmp	r3, #0
 800409a:	d015      	beq.n	80040c8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800409c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040a0:	f003 0320 	and.w	r3, r3, #32
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d105      	bne.n	80040b4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80040a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80040ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d009      	beq.n	80040c8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	f000 82f3 	beq.w	80046a4 <HAL_UART_IRQHandler+0x650>
      {
        huart->RxISR(huart);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	4798      	blx	r3
      }
      return;
 80040c6:	e2ed      	b.n	80046a4 <HAL_UART_IRQHandler+0x650>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80040c8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	f000 8129 	beq.w	8004324 <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80040d2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80040d6:	4b90      	ldr	r3, [pc, #576]	@ (8004318 <HAL_UART_IRQHandler+0x2c4>)
 80040d8:	4013      	ands	r3, r2
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d106      	bne.n	80040ec <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80040de:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80040e2:	4b8e      	ldr	r3, [pc, #568]	@ (800431c <HAL_UART_IRQHandler+0x2c8>)
 80040e4:	4013      	ands	r3, r2
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	f000 811c 	beq.w	8004324 <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80040ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040f0:	f003 0301 	and.w	r3, r3, #1
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d011      	beq.n	800411c <HAL_UART_IRQHandler+0xc8>
 80040f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004100:	2b00      	cmp	r3, #0
 8004102:	d00b      	beq.n	800411c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	2201      	movs	r2, #1
 800410a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004112:	f043 0201 	orr.w	r2, r3, #1
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800411c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004120:	f003 0302 	and.w	r3, r3, #2
 8004124:	2b00      	cmp	r3, #0
 8004126:	d011      	beq.n	800414c <HAL_UART_IRQHandler+0xf8>
 8004128:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800412c:	f003 0301 	and.w	r3, r3, #1
 8004130:	2b00      	cmp	r3, #0
 8004132:	d00b      	beq.n	800414c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	2202      	movs	r2, #2
 800413a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004142:	f043 0204 	orr.w	r2, r3, #4
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800414c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004150:	f003 0304 	and.w	r3, r3, #4
 8004154:	2b00      	cmp	r3, #0
 8004156:	d011      	beq.n	800417c <HAL_UART_IRQHandler+0x128>
 8004158:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800415c:	f003 0301 	and.w	r3, r3, #1
 8004160:	2b00      	cmp	r3, #0
 8004162:	d00b      	beq.n	800417c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	2204      	movs	r2, #4
 800416a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004172:	f043 0202 	orr.w	r2, r3, #2
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800417c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004180:	f003 0308 	and.w	r3, r3, #8
 8004184:	2b00      	cmp	r3, #0
 8004186:	d017      	beq.n	80041b8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004188:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800418c:	f003 0320 	and.w	r3, r3, #32
 8004190:	2b00      	cmp	r3, #0
 8004192:	d105      	bne.n	80041a0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004194:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8004198:	4b5f      	ldr	r3, [pc, #380]	@ (8004318 <HAL_UART_IRQHandler+0x2c4>)
 800419a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800419c:	2b00      	cmp	r3, #0
 800419e:	d00b      	beq.n	80041b8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	2208      	movs	r2, #8
 80041a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041ae:	f043 0208 	orr.w	r2, r3, #8
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80041b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d012      	beq.n	80041ea <HAL_UART_IRQHandler+0x196>
 80041c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80041c8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d00c      	beq.n	80041ea <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80041d8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041e0:	f043 0220 	orr.w	r2, r3, #32
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	f000 8259 	beq.w	80046a8 <HAL_UART_IRQHandler+0x654>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80041f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041fa:	f003 0320 	and.w	r3, r3, #32
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d013      	beq.n	800422a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004202:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004206:	f003 0320 	and.w	r3, r3, #32
 800420a:	2b00      	cmp	r3, #0
 800420c:	d105      	bne.n	800421a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800420e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004212:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004216:	2b00      	cmp	r3, #0
 8004218:	d007      	beq.n	800422a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800421e:	2b00      	cmp	r3, #0
 8004220:	d003      	beq.n	800422a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004230:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800423e:	2b40      	cmp	r3, #64	@ 0x40
 8004240:	d005      	beq.n	800424e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004242:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004246:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800424a:	2b00      	cmp	r3, #0
 800424c:	d058      	beq.n	8004300 <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f001 f8e3 	bl	800541a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800425e:	2b40      	cmp	r3, #64	@ 0x40
 8004260:	d148      	bne.n	80042f4 <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	3308      	adds	r3, #8
 8004268:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800426c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004270:	e853 3f00 	ldrex	r3, [r3]
 8004274:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004278:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800427c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004280:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	3308      	adds	r3, #8
 800428a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800428e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004292:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004296:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800429a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800429e:	e841 2300 	strex	r3, r2, [r1]
 80042a2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80042a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d1d9      	bne.n	8004262 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d017      	beq.n	80042e8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80042be:	4a18      	ldr	r2, [pc, #96]	@ (8004320 <HAL_UART_IRQHandler+0x2cc>)
 80042c0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80042c8:	4618      	mov	r0, r3
 80042ca:	f7fd fa89 	bl	80017e0 <HAL_DMA_Abort_IT>
 80042ce:	4603      	mov	r3, r0
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d01f      	beq.n	8004314 <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80042da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042dc:	687a      	ldr	r2, [r7, #4]
 80042de:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80042e2:	4610      	mov	r0, r2
 80042e4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042e6:	e015      	b.n	8004314 <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042f2:	e00f      	b.n	8004314 <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042fe:	e009      	b.n	8004314 <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2200      	movs	r2, #0
 800430e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8004312:	e1c9      	b.n	80046a8 <HAL_UART_IRQHandler+0x654>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004314:	bf00      	nop
    return;
 8004316:	e1c7      	b.n	80046a8 <HAL_UART_IRQHandler+0x654>
 8004318:	10000001 	.word	0x10000001
 800431c:	04000120 	.word	0x04000120
 8004320:	080057a3 	.word	0x080057a3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004328:	2b01      	cmp	r3, #1
 800432a:	f040 8157 	bne.w	80045dc <HAL_UART_IRQHandler+0x588>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800432e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004332:	f003 0310 	and.w	r3, r3, #16
 8004336:	2b00      	cmp	r3, #0
 8004338:	f000 8150 	beq.w	80045dc <HAL_UART_IRQHandler+0x588>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800433c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004340:	f003 0310 	and.w	r3, r3, #16
 8004344:	2b00      	cmp	r3, #0
 8004346:	f000 8149 	beq.w	80045dc <HAL_UART_IRQHandler+0x588>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	2210      	movs	r2, #16
 8004350:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800435c:	2b40      	cmp	r3, #64	@ 0x40
 800435e:	f040 80bd 	bne.w	80044dc <HAL_UART_IRQHandler+0x488>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004370:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004374:	2b00      	cmp	r3, #0
 8004376:	f000 8199 	beq.w	80046ac <HAL_UART_IRQHandler+0x658>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004380:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004384:	429a      	cmp	r2, r3
 8004386:	f080 8191 	bcs.w	80046ac <HAL_UART_IRQHandler+0x658>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004390:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f003 0320 	and.w	r3, r3, #32
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	f040 8087 	bne.w	80044b6 <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80043b4:	e853 3f00 	ldrex	r3, [r3]
 80043b8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80043bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80043c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80043c4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	461a      	mov	r2, r3
 80043ce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80043d2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80043d6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043da:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80043de:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80043e2:	e841 2300 	strex	r3, r2, [r1]
 80043e6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80043ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d1da      	bne.n	80043a8 <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	3308      	adds	r3, #8
 80043f8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043fa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80043fc:	e853 3f00 	ldrex	r3, [r3]
 8004400:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004402:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004404:	f023 0301 	bic.w	r3, r3, #1
 8004408:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	3308      	adds	r3, #8
 8004412:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004416:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800441a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800441c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800441e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004422:	e841 2300 	strex	r3, r2, [r1]
 8004426:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004428:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800442a:	2b00      	cmp	r3, #0
 800442c:	d1e1      	bne.n	80043f2 <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	3308      	adds	r3, #8
 8004434:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004436:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004438:	e853 3f00 	ldrex	r3, [r3]
 800443c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800443e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004440:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004444:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	3308      	adds	r3, #8
 800444e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004452:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004454:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004456:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004458:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800445a:	e841 2300 	strex	r3, r2, [r1]
 800445e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004460:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004462:	2b00      	cmp	r3, #0
 8004464:	d1e3      	bne.n	800442e <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2220      	movs	r2, #32
 800446a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2200      	movs	r2, #0
 8004472:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800447a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800447c:	e853 3f00 	ldrex	r3, [r3]
 8004480:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004482:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004484:	f023 0310 	bic.w	r3, r3, #16
 8004488:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	461a      	mov	r2, r3
 8004492:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004496:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004498:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800449a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800449c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800449e:	e841 2300 	strex	r3, r2, [r1]
 80044a2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80044a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d1e4      	bne.n	8004474 <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80044b0:	4618      	mov	r0, r3
 80044b2:	f7fd f93c 	bl	800172e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2202      	movs	r2, #2
 80044ba:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80044c2:	687a      	ldr	r2, [r7, #4]
 80044c4:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 80044c8:	687a      	ldr	r2, [r7, #4]
 80044ca:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 80044ce:	b292      	uxth	r2, r2
 80044d0:	1a8a      	subs	r2, r1, r2
 80044d2:	b292      	uxth	r2, r2
 80044d4:	4611      	mov	r1, r2
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80044da:	e0e7      	b.n	80046ac <HAL_UART_IRQHandler+0x658>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80044e8:	b29b      	uxth	r3, r3
 80044ea:	1ad3      	subs	r3, r2, r3
 80044ec:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80044f6:	b29b      	uxth	r3, r3
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	f000 80d9 	beq.w	80046b0 <HAL_UART_IRQHandler+0x65c>
          && (nb_rx_data > 0U))
 80044fe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004502:	2b00      	cmp	r3, #0
 8004504:	f000 80d4 	beq.w	80046b0 <HAL_UART_IRQHandler+0x65c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800450e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004510:	e853 3f00 	ldrex	r3, [r3]
 8004514:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004516:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004518:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800451c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	461a      	mov	r2, r3
 8004526:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800452a:	647b      	str	r3, [r7, #68]	@ 0x44
 800452c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800452e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004530:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004532:	e841 2300 	strex	r3, r2, [r1]
 8004536:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004538:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800453a:	2b00      	cmp	r3, #0
 800453c:	d1e4      	bne.n	8004508 <HAL_UART_IRQHandler+0x4b4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	3308      	adds	r3, #8
 8004544:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004548:	e853 3f00 	ldrex	r3, [r3]
 800454c:	623b      	str	r3, [r7, #32]
   return(result);
 800454e:	6a3b      	ldr	r3, [r7, #32]
 8004550:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004554:	f023 0301 	bic.w	r3, r3, #1
 8004558:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	3308      	adds	r3, #8
 8004562:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004566:	633a      	str	r2, [r7, #48]	@ 0x30
 8004568:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800456a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800456c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800456e:	e841 2300 	strex	r3, r2, [r1]
 8004572:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004574:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004576:	2b00      	cmp	r3, #0
 8004578:	d1e1      	bne.n	800453e <HAL_UART_IRQHandler+0x4ea>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2220      	movs	r2, #32
 800457e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2200      	movs	r2, #0
 8004586:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2200      	movs	r2, #0
 800458c:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	e853 3f00 	ldrex	r3, [r3]
 800459a:	60fb      	str	r3, [r7, #12]
   return(result);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	f023 0310 	bic.w	r3, r3, #16
 80045a2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	461a      	mov	r2, r3
 80045ac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80045b0:	61fb      	str	r3, [r7, #28]
 80045b2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045b4:	69b9      	ldr	r1, [r7, #24]
 80045b6:	69fa      	ldr	r2, [r7, #28]
 80045b8:	e841 2300 	strex	r3, r2, [r1]
 80045bc:	617b      	str	r3, [r7, #20]
   return(result);
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d1e4      	bne.n	800458e <HAL_UART_IRQHandler+0x53a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2202      	movs	r2, #2
 80045c8:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80045d0:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 80045d4:	4611      	mov	r1, r2
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80045da:	e069      	b.n	80046b0 <HAL_UART_IRQHandler+0x65c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80045dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045e0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d010      	beq.n	800460a <HAL_UART_IRQHandler+0x5b6>
 80045e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80045ec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d00a      	beq.n	800460a <HAL_UART_IRQHandler+0x5b6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80045fc:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004604:	6878      	ldr	r0, [r7, #4]
 8004606:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004608:	e055      	b.n	80046b6 <HAL_UART_IRQHandler+0x662>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800460a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800460e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004612:	2b00      	cmp	r3, #0
 8004614:	d014      	beq.n	8004640 <HAL_UART_IRQHandler+0x5ec>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004616:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800461a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800461e:	2b00      	cmp	r3, #0
 8004620:	d105      	bne.n	800462e <HAL_UART_IRQHandler+0x5da>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004622:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004626:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800462a:	2b00      	cmp	r3, #0
 800462c:	d008      	beq.n	8004640 <HAL_UART_IRQHandler+0x5ec>
  {
    if (huart->TxISR != NULL)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004632:	2b00      	cmp	r3, #0
 8004634:	d03e      	beq.n	80046b4 <HAL_UART_IRQHandler+0x660>
    {
      huart->TxISR(huart);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	4798      	blx	r3
    }
    return;
 800463e:	e039      	b.n	80046b4 <HAL_UART_IRQHandler+0x660>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004640:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004644:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004648:	2b00      	cmp	r3, #0
 800464a:	d009      	beq.n	8004660 <HAL_UART_IRQHandler+0x60c>
 800464c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004650:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004654:	2b00      	cmp	r3, #0
 8004656:	d003      	beq.n	8004660 <HAL_UART_IRQHandler+0x60c>
  {
    UART_EndTransmit_IT(huart);
 8004658:	6878      	ldr	r0, [r7, #4]
 800465a:	f001 f8ba 	bl	80057d2 <UART_EndTransmit_IT>
    return;
 800465e:	e02a      	b.n	80046b6 <HAL_UART_IRQHandler+0x662>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004660:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004664:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004668:	2b00      	cmp	r3, #0
 800466a:	d00b      	beq.n	8004684 <HAL_UART_IRQHandler+0x630>
 800466c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004670:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004674:	2b00      	cmp	r3, #0
 8004676:	d005      	beq.n	8004684 <HAL_UART_IRQHandler+0x630>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004682:	e018      	b.n	80046b6 <HAL_UART_IRQHandler+0x662>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004684:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004688:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800468c:	2b00      	cmp	r3, #0
 800468e:	d012      	beq.n	80046b6 <HAL_UART_IRQHandler+0x662>
 8004690:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004694:	2b00      	cmp	r3, #0
 8004696:	da0e      	bge.n	80046b6 <HAL_UART_IRQHandler+0x662>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80046a2:	e008      	b.n	80046b6 <HAL_UART_IRQHandler+0x662>
      return;
 80046a4:	bf00      	nop
 80046a6:	e006      	b.n	80046b6 <HAL_UART_IRQHandler+0x662>
    return;
 80046a8:	bf00      	nop
 80046aa:	e004      	b.n	80046b6 <HAL_UART_IRQHandler+0x662>
      return;
 80046ac:	bf00      	nop
 80046ae:	e002      	b.n	80046b6 <HAL_UART_IRQHandler+0x662>
      return;
 80046b0:	bf00      	nop
 80046b2:	e000      	b.n	80046b6 <HAL_UART_IRQHandler+0x662>
    return;
 80046b4:	bf00      	nop
  }
}
 80046b6:	37e8      	adds	r7, #232	@ 0xe8
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bd80      	pop	{r7, pc}

080046bc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80046bc:	b480      	push	{r7}
 80046be:	b083      	sub	sp, #12
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80046c4:	bf00      	nop
 80046c6:	370c      	adds	r7, #12
 80046c8:	46bd      	mov	sp, r7
 80046ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ce:	4770      	bx	lr

080046d0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b083      	sub	sp, #12
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80046d8:	bf00      	nop
 80046da:	370c      	adds	r7, #12
 80046dc:	46bd      	mov	sp, r7
 80046de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e2:	4770      	bx	lr

080046e4 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b083      	sub	sp, #12
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80046ec:	bf00      	nop
 80046ee:	370c      	adds	r7, #12
 80046f0:	46bd      	mov	sp, r7
 80046f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f6:	4770      	bx	lr

080046f8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b083      	sub	sp, #12
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8004700:	bf00      	nop
 8004702:	370c      	adds	r7, #12
 8004704:	46bd      	mov	sp, r7
 8004706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470a:	4770      	bx	lr

0800470c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800470c:	b480      	push	{r7}
 800470e:	b083      	sub	sp, #12
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004714:	bf00      	nop
 8004716:	370c      	adds	r7, #12
 8004718:	46bd      	mov	sp, r7
 800471a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471e:	4770      	bx	lr

08004720 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8004720:	b480      	push	{r7}
 8004722:	b083      	sub	sp, #12
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8004728:	bf00      	nop
 800472a:	370c      	adds	r7, #12
 800472c:	46bd      	mov	sp, r7
 800472e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004732:	4770      	bx	lr

08004734 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8004734:	b480      	push	{r7}
 8004736:	b083      	sub	sp, #12
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800473c:	bf00      	nop
 800473e:	370c      	adds	r7, #12
 8004740:	46bd      	mov	sp, r7
 8004742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004746:	4770      	bx	lr

08004748 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8004748:	b480      	push	{r7}
 800474a:	b083      	sub	sp, #12
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8004750:	bf00      	nop
 8004752:	370c      	adds	r7, #12
 8004754:	46bd      	mov	sp, r7
 8004756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475a:	4770      	bx	lr

0800475c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800475c:	b480      	push	{r7}
 800475e:	b083      	sub	sp, #12
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
 8004764:	460b      	mov	r3, r1
 8004766:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004768:	bf00      	nop
 800476a:	370c      	adds	r7, #12
 800476c:	46bd      	mov	sp, r7
 800476e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004772:	4770      	bx	lr

08004774 <HAL_UART_ReceiverTimeout_Config>:
  * @param  TimeoutValue receiver timeout value in number of baud blocks. The timeout
  *                     value must be less or equal to 0x0FFFFFFFF.
  * @retval None
  */
void HAL_UART_ReceiverTimeout_Config(UART_HandleTypeDef *huart, uint32_t TimeoutValue)
{
 8004774:	b480      	push	{r7}
 8004776:	b083      	sub	sp, #12
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
 800477c:	6039      	str	r1, [r7, #0]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a09      	ldr	r2, [pc, #36]	@ (80047a8 <HAL_UART_ReceiverTimeout_Config+0x34>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d009      	beq.n	800479c <HAL_UART_ReceiverTimeout_Config+0x28>
  {
    assert_param(IS_UART_RECEIVER_TIMEOUT_VALUE(TimeoutValue));
    MODIFY_REG(huart->Instance->RTOR, USART_RTOR_RTO, TimeoutValue);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	695b      	ldr	r3, [r3, #20]
 800478e:	f003 417f 	and.w	r1, r3, #4278190080	@ 0xff000000
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	683a      	ldr	r2, [r7, #0]
 8004798:	430a      	orrs	r2, r1
 800479a:	615a      	str	r2, [r3, #20]
  }
}
 800479c:	bf00      	nop
 800479e:	370c      	adds	r7, #12
 80047a0:	46bd      	mov	sp, r7
 80047a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a6:	4770      	bx	lr
 80047a8:	40008000 	.word	0x40008000

080047ac <HAL_UART_EnableReceiverTimeout>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                    the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b083      	sub	sp, #12
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a18      	ldr	r2, [pc, #96]	@ (800481c <HAL_UART_EnableReceiverTimeout+0x70>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d027      	beq.n	800480e <HAL_UART_EnableReceiverTimeout+0x62>
  {
    if (huart->gState == HAL_UART_STATE_READY)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047c4:	2b20      	cmp	r3, #32
 80047c6:	d120      	bne.n	800480a <HAL_UART_EnableReceiverTimeout+0x5e>
    {
      /* Process Locked */
      __HAL_LOCK(huart);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80047ce:	2b01      	cmp	r3, #1
 80047d0:	d101      	bne.n	80047d6 <HAL_UART_EnableReceiverTimeout+0x2a>
 80047d2:	2302      	movs	r3, #2
 80047d4:	e01c      	b.n	8004810 <HAL_UART_EnableReceiverTimeout+0x64>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2201      	movs	r2, #1
 80047da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      huart->gState = HAL_UART_STATE_BUSY;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2224      	movs	r2, #36	@ 0x24
 80047e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Set the USART RTOEN bit */
      SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	685a      	ldr	r2, [r3, #4]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80047f4:	605a      	str	r2, [r3, #4]

      huart->gState = HAL_UART_STATE_READY;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2220      	movs	r2, #32
 80047fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2200      	movs	r2, #0
 8004802:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      return HAL_OK;
 8004806:	2300      	movs	r3, #0
 8004808:	e002      	b.n	8004810 <HAL_UART_EnableReceiverTimeout+0x64>
    }
    else
    {
      return HAL_BUSY;
 800480a:	2302      	movs	r3, #2
 800480c:	e000      	b.n	8004810 <HAL_UART_EnableReceiverTimeout+0x64>
    }
  }
  else
  {
    return HAL_ERROR;
 800480e:	2301      	movs	r3, #1
  }
}
 8004810:	4618      	mov	r0, r3
 8004812:	370c      	adds	r7, #12
 8004814:	46bd      	mov	sp, r7
 8004816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481a:	4770      	bx	lr
 800481c:	40008000 	.word	0x40008000

08004820 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 8004820:	b480      	push	{r7}
 8004822:	b083      	sub	sp, #12
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
}
 800482e:	4618      	mov	r0, r3
 8004830:	370c      	adds	r7, #12
 8004832:	46bd      	mov	sp, r7
 8004834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004838:	4770      	bx	lr
	...

0800483c <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800483c:	b480      	push	{r7}
 800483e:	b083      	sub	sp, #12
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	4a1a      	ldr	r2, [pc, #104]	@ (80048b0 <UART_InitCallbacksToDefault+0x74>)
 8004848:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	4a19      	ldr	r2, [pc, #100]	@ (80048b4 <UART_InitCallbacksToDefault+0x78>)
 8004850:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	4a18      	ldr	r2, [pc, #96]	@ (80048b8 <UART_InitCallbacksToDefault+0x7c>)
 8004858:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	4a17      	ldr	r2, [pc, #92]	@ (80048bc <UART_InitCallbacksToDefault+0x80>)
 8004860:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	4a16      	ldr	r2, [pc, #88]	@ (80048c0 <UART_InitCallbacksToDefault+0x84>)
 8004868:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	4a15      	ldr	r2, [pc, #84]	@ (80048c4 <UART_InitCallbacksToDefault+0x88>)
 8004870:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	4a14      	ldr	r2, [pc, #80]	@ (80048c8 <UART_InitCallbacksToDefault+0x8c>)
 8004878:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	4a13      	ldr	r2, [pc, #76]	@ (80048cc <UART_InitCallbacksToDefault+0x90>)
 8004880:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	4a12      	ldr	r2, [pc, #72]	@ (80048d0 <UART_InitCallbacksToDefault+0x94>)
 8004888:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	4a11      	ldr	r2, [pc, #68]	@ (80048d4 <UART_InitCallbacksToDefault+0x98>)
 8004890:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	4a10      	ldr	r2, [pc, #64]	@ (80048d8 <UART_InitCallbacksToDefault+0x9c>)
 8004898:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	4a0f      	ldr	r2, [pc, #60]	@ (80048dc <UART_InitCallbacksToDefault+0xa0>)
 80048a0:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 80048a4:	bf00      	nop
 80048a6:	370c      	adds	r7, #12
 80048a8:	46bd      	mov	sp, r7
 80048aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ae:	4770      	bx	lr
 80048b0:	080046d1 	.word	0x080046d1
 80048b4:	080046bd 	.word	0x080046bd
 80048b8:	080046f9 	.word	0x080046f9
 80048bc:	080046e5 	.word	0x080046e5
 80048c0:	0800470d 	.word	0x0800470d
 80048c4:	08004721 	.word	0x08004721
 80048c8:	08004735 	.word	0x08004735
 80048cc:	08004749 	.word	0x08004749
 80048d0:	0800582d 	.word	0x0800582d
 80048d4:	08005841 	.word	0x08005841
 80048d8:	08005855 	.word	0x08005855
 80048dc:	0800475d 	.word	0x0800475d

080048e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80048e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048e4:	b08c      	sub	sp, #48	@ 0x30
 80048e6:	af00      	add	r7, sp, #0
 80048e8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80048ea:	2300      	movs	r3, #0
 80048ec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	689a      	ldr	r2, [r3, #8]
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	691b      	ldr	r3, [r3, #16]
 80048f8:	431a      	orrs	r2, r3
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	695b      	ldr	r3, [r3, #20]
 80048fe:	431a      	orrs	r2, r3
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	69db      	ldr	r3, [r3, #28]
 8004904:	4313      	orrs	r3, r2
 8004906:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	4baa      	ldr	r3, [pc, #680]	@ (8004bb8 <UART_SetConfig+0x2d8>)
 8004910:	4013      	ands	r3, r2
 8004912:	697a      	ldr	r2, [r7, #20]
 8004914:	6812      	ldr	r2, [r2, #0]
 8004916:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004918:	430b      	orrs	r3, r1
 800491a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	68da      	ldr	r2, [r3, #12]
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	430a      	orrs	r2, r1
 8004930:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	699b      	ldr	r3, [r3, #24]
 8004936:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a9f      	ldr	r2, [pc, #636]	@ (8004bbc <UART_SetConfig+0x2dc>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d004      	beq.n	800494c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	6a1b      	ldr	r3, [r3, #32]
 8004946:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004948:	4313      	orrs	r3, r2
 800494a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	689b      	ldr	r3, [r3, #8]
 8004952:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8004956:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800495a:	697a      	ldr	r2, [r7, #20]
 800495c:	6812      	ldr	r2, [r2, #0]
 800495e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004960:	430b      	orrs	r3, r1
 8004962:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800496a:	f023 010f 	bic.w	r1, r3, #15
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	430a      	orrs	r2, r1
 8004978:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a90      	ldr	r2, [pc, #576]	@ (8004bc0 <UART_SetConfig+0x2e0>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d125      	bne.n	80049d0 <UART_SetConfig+0xf0>
 8004984:	4b8f      	ldr	r3, [pc, #572]	@ (8004bc4 <UART_SetConfig+0x2e4>)
 8004986:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800498a:	f003 0303 	and.w	r3, r3, #3
 800498e:	2b03      	cmp	r3, #3
 8004990:	d81a      	bhi.n	80049c8 <UART_SetConfig+0xe8>
 8004992:	a201      	add	r2, pc, #4	@ (adr r2, 8004998 <UART_SetConfig+0xb8>)
 8004994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004998:	080049a9 	.word	0x080049a9
 800499c:	080049b9 	.word	0x080049b9
 80049a0:	080049b1 	.word	0x080049b1
 80049a4:	080049c1 	.word	0x080049c1
 80049a8:	2301      	movs	r3, #1
 80049aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80049ae:	e116      	b.n	8004bde <UART_SetConfig+0x2fe>
 80049b0:	2302      	movs	r3, #2
 80049b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80049b6:	e112      	b.n	8004bde <UART_SetConfig+0x2fe>
 80049b8:	2304      	movs	r3, #4
 80049ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80049be:	e10e      	b.n	8004bde <UART_SetConfig+0x2fe>
 80049c0:	2308      	movs	r3, #8
 80049c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80049c6:	e10a      	b.n	8004bde <UART_SetConfig+0x2fe>
 80049c8:	2310      	movs	r3, #16
 80049ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80049ce:	e106      	b.n	8004bde <UART_SetConfig+0x2fe>
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a7c      	ldr	r2, [pc, #496]	@ (8004bc8 <UART_SetConfig+0x2e8>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d138      	bne.n	8004a4c <UART_SetConfig+0x16c>
 80049da:	4b7a      	ldr	r3, [pc, #488]	@ (8004bc4 <UART_SetConfig+0x2e4>)
 80049dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049e0:	f003 030c 	and.w	r3, r3, #12
 80049e4:	2b0c      	cmp	r3, #12
 80049e6:	d82d      	bhi.n	8004a44 <UART_SetConfig+0x164>
 80049e8:	a201      	add	r2, pc, #4	@ (adr r2, 80049f0 <UART_SetConfig+0x110>)
 80049ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049ee:	bf00      	nop
 80049f0:	08004a25 	.word	0x08004a25
 80049f4:	08004a45 	.word	0x08004a45
 80049f8:	08004a45 	.word	0x08004a45
 80049fc:	08004a45 	.word	0x08004a45
 8004a00:	08004a35 	.word	0x08004a35
 8004a04:	08004a45 	.word	0x08004a45
 8004a08:	08004a45 	.word	0x08004a45
 8004a0c:	08004a45 	.word	0x08004a45
 8004a10:	08004a2d 	.word	0x08004a2d
 8004a14:	08004a45 	.word	0x08004a45
 8004a18:	08004a45 	.word	0x08004a45
 8004a1c:	08004a45 	.word	0x08004a45
 8004a20:	08004a3d 	.word	0x08004a3d
 8004a24:	2300      	movs	r3, #0
 8004a26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a2a:	e0d8      	b.n	8004bde <UART_SetConfig+0x2fe>
 8004a2c:	2302      	movs	r3, #2
 8004a2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a32:	e0d4      	b.n	8004bde <UART_SetConfig+0x2fe>
 8004a34:	2304      	movs	r3, #4
 8004a36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a3a:	e0d0      	b.n	8004bde <UART_SetConfig+0x2fe>
 8004a3c:	2308      	movs	r3, #8
 8004a3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a42:	e0cc      	b.n	8004bde <UART_SetConfig+0x2fe>
 8004a44:	2310      	movs	r3, #16
 8004a46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a4a:	e0c8      	b.n	8004bde <UART_SetConfig+0x2fe>
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a5e      	ldr	r2, [pc, #376]	@ (8004bcc <UART_SetConfig+0x2ec>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d125      	bne.n	8004aa2 <UART_SetConfig+0x1c2>
 8004a56:	4b5b      	ldr	r3, [pc, #364]	@ (8004bc4 <UART_SetConfig+0x2e4>)
 8004a58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a5c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004a60:	2b30      	cmp	r3, #48	@ 0x30
 8004a62:	d016      	beq.n	8004a92 <UART_SetConfig+0x1b2>
 8004a64:	2b30      	cmp	r3, #48	@ 0x30
 8004a66:	d818      	bhi.n	8004a9a <UART_SetConfig+0x1ba>
 8004a68:	2b20      	cmp	r3, #32
 8004a6a:	d00a      	beq.n	8004a82 <UART_SetConfig+0x1a2>
 8004a6c:	2b20      	cmp	r3, #32
 8004a6e:	d814      	bhi.n	8004a9a <UART_SetConfig+0x1ba>
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d002      	beq.n	8004a7a <UART_SetConfig+0x19a>
 8004a74:	2b10      	cmp	r3, #16
 8004a76:	d008      	beq.n	8004a8a <UART_SetConfig+0x1aa>
 8004a78:	e00f      	b.n	8004a9a <UART_SetConfig+0x1ba>
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a80:	e0ad      	b.n	8004bde <UART_SetConfig+0x2fe>
 8004a82:	2302      	movs	r3, #2
 8004a84:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a88:	e0a9      	b.n	8004bde <UART_SetConfig+0x2fe>
 8004a8a:	2304      	movs	r3, #4
 8004a8c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a90:	e0a5      	b.n	8004bde <UART_SetConfig+0x2fe>
 8004a92:	2308      	movs	r3, #8
 8004a94:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a98:	e0a1      	b.n	8004bde <UART_SetConfig+0x2fe>
 8004a9a:	2310      	movs	r3, #16
 8004a9c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004aa0:	e09d      	b.n	8004bde <UART_SetConfig+0x2fe>
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a4a      	ldr	r2, [pc, #296]	@ (8004bd0 <UART_SetConfig+0x2f0>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d125      	bne.n	8004af8 <UART_SetConfig+0x218>
 8004aac:	4b45      	ldr	r3, [pc, #276]	@ (8004bc4 <UART_SetConfig+0x2e4>)
 8004aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ab2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004ab6:	2bc0      	cmp	r3, #192	@ 0xc0
 8004ab8:	d016      	beq.n	8004ae8 <UART_SetConfig+0x208>
 8004aba:	2bc0      	cmp	r3, #192	@ 0xc0
 8004abc:	d818      	bhi.n	8004af0 <UART_SetConfig+0x210>
 8004abe:	2b80      	cmp	r3, #128	@ 0x80
 8004ac0:	d00a      	beq.n	8004ad8 <UART_SetConfig+0x1f8>
 8004ac2:	2b80      	cmp	r3, #128	@ 0x80
 8004ac4:	d814      	bhi.n	8004af0 <UART_SetConfig+0x210>
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d002      	beq.n	8004ad0 <UART_SetConfig+0x1f0>
 8004aca:	2b40      	cmp	r3, #64	@ 0x40
 8004acc:	d008      	beq.n	8004ae0 <UART_SetConfig+0x200>
 8004ace:	e00f      	b.n	8004af0 <UART_SetConfig+0x210>
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ad6:	e082      	b.n	8004bde <UART_SetConfig+0x2fe>
 8004ad8:	2302      	movs	r3, #2
 8004ada:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ade:	e07e      	b.n	8004bde <UART_SetConfig+0x2fe>
 8004ae0:	2304      	movs	r3, #4
 8004ae2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ae6:	e07a      	b.n	8004bde <UART_SetConfig+0x2fe>
 8004ae8:	2308      	movs	r3, #8
 8004aea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004aee:	e076      	b.n	8004bde <UART_SetConfig+0x2fe>
 8004af0:	2310      	movs	r3, #16
 8004af2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004af6:	e072      	b.n	8004bde <UART_SetConfig+0x2fe>
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a35      	ldr	r2, [pc, #212]	@ (8004bd4 <UART_SetConfig+0x2f4>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d12a      	bne.n	8004b58 <UART_SetConfig+0x278>
 8004b02:	4b30      	ldr	r3, [pc, #192]	@ (8004bc4 <UART_SetConfig+0x2e4>)
 8004b04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b08:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b0c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004b10:	d01a      	beq.n	8004b48 <UART_SetConfig+0x268>
 8004b12:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004b16:	d81b      	bhi.n	8004b50 <UART_SetConfig+0x270>
 8004b18:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b1c:	d00c      	beq.n	8004b38 <UART_SetConfig+0x258>
 8004b1e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b22:	d815      	bhi.n	8004b50 <UART_SetConfig+0x270>
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d003      	beq.n	8004b30 <UART_SetConfig+0x250>
 8004b28:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b2c:	d008      	beq.n	8004b40 <UART_SetConfig+0x260>
 8004b2e:	e00f      	b.n	8004b50 <UART_SetConfig+0x270>
 8004b30:	2300      	movs	r3, #0
 8004b32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b36:	e052      	b.n	8004bde <UART_SetConfig+0x2fe>
 8004b38:	2302      	movs	r3, #2
 8004b3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b3e:	e04e      	b.n	8004bde <UART_SetConfig+0x2fe>
 8004b40:	2304      	movs	r3, #4
 8004b42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b46:	e04a      	b.n	8004bde <UART_SetConfig+0x2fe>
 8004b48:	2308      	movs	r3, #8
 8004b4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b4e:	e046      	b.n	8004bde <UART_SetConfig+0x2fe>
 8004b50:	2310      	movs	r3, #16
 8004b52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b56:	e042      	b.n	8004bde <UART_SetConfig+0x2fe>
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a17      	ldr	r2, [pc, #92]	@ (8004bbc <UART_SetConfig+0x2dc>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d13a      	bne.n	8004bd8 <UART_SetConfig+0x2f8>
 8004b62:	4b18      	ldr	r3, [pc, #96]	@ (8004bc4 <UART_SetConfig+0x2e4>)
 8004b64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b68:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004b6c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004b70:	d01a      	beq.n	8004ba8 <UART_SetConfig+0x2c8>
 8004b72:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004b76:	d81b      	bhi.n	8004bb0 <UART_SetConfig+0x2d0>
 8004b78:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004b7c:	d00c      	beq.n	8004b98 <UART_SetConfig+0x2b8>
 8004b7e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004b82:	d815      	bhi.n	8004bb0 <UART_SetConfig+0x2d0>
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d003      	beq.n	8004b90 <UART_SetConfig+0x2b0>
 8004b88:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b8c:	d008      	beq.n	8004ba0 <UART_SetConfig+0x2c0>
 8004b8e:	e00f      	b.n	8004bb0 <UART_SetConfig+0x2d0>
 8004b90:	2300      	movs	r3, #0
 8004b92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b96:	e022      	b.n	8004bde <UART_SetConfig+0x2fe>
 8004b98:	2302      	movs	r3, #2
 8004b9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b9e:	e01e      	b.n	8004bde <UART_SetConfig+0x2fe>
 8004ba0:	2304      	movs	r3, #4
 8004ba2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ba6:	e01a      	b.n	8004bde <UART_SetConfig+0x2fe>
 8004ba8:	2308      	movs	r3, #8
 8004baa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004bae:	e016      	b.n	8004bde <UART_SetConfig+0x2fe>
 8004bb0:	2310      	movs	r3, #16
 8004bb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004bb6:	e012      	b.n	8004bde <UART_SetConfig+0x2fe>
 8004bb8:	cfff69f3 	.word	0xcfff69f3
 8004bbc:	40008000 	.word	0x40008000
 8004bc0:	40013800 	.word	0x40013800
 8004bc4:	40021000 	.word	0x40021000
 8004bc8:	40004400 	.word	0x40004400
 8004bcc:	40004800 	.word	0x40004800
 8004bd0:	40004c00 	.word	0x40004c00
 8004bd4:	40005000 	.word	0x40005000
 8004bd8:	2310      	movs	r3, #16
 8004bda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4aae      	ldr	r2, [pc, #696]	@ (8004e9c <UART_SetConfig+0x5bc>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	f040 8097 	bne.w	8004d18 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004bea:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004bee:	2b08      	cmp	r3, #8
 8004bf0:	d823      	bhi.n	8004c3a <UART_SetConfig+0x35a>
 8004bf2:	a201      	add	r2, pc, #4	@ (adr r2, 8004bf8 <UART_SetConfig+0x318>)
 8004bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bf8:	08004c1d 	.word	0x08004c1d
 8004bfc:	08004c3b 	.word	0x08004c3b
 8004c00:	08004c25 	.word	0x08004c25
 8004c04:	08004c3b 	.word	0x08004c3b
 8004c08:	08004c2b 	.word	0x08004c2b
 8004c0c:	08004c3b 	.word	0x08004c3b
 8004c10:	08004c3b 	.word	0x08004c3b
 8004c14:	08004c3b 	.word	0x08004c3b
 8004c18:	08004c33 	.word	0x08004c33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c1c:	f7fd fec4 	bl	80029a8 <HAL_RCC_GetPCLK1Freq>
 8004c20:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004c22:	e010      	b.n	8004c46 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c24:	4b9e      	ldr	r3, [pc, #632]	@ (8004ea0 <UART_SetConfig+0x5c0>)
 8004c26:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004c28:	e00d      	b.n	8004c46 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c2a:	f7fd fe4f 	bl	80028cc <HAL_RCC_GetSysClockFreq>
 8004c2e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004c30:	e009      	b.n	8004c46 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c32:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c36:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004c38:	e005      	b.n	8004c46 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004c44:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004c46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	f000 8130 	beq.w	8004eae <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c52:	4a94      	ldr	r2, [pc, #592]	@ (8004ea4 <UART_SetConfig+0x5c4>)
 8004c54:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c58:	461a      	mov	r2, r3
 8004c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c5c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004c60:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	685a      	ldr	r2, [r3, #4]
 8004c66:	4613      	mov	r3, r2
 8004c68:	005b      	lsls	r3, r3, #1
 8004c6a:	4413      	add	r3, r2
 8004c6c:	69ba      	ldr	r2, [r7, #24]
 8004c6e:	429a      	cmp	r2, r3
 8004c70:	d305      	bcc.n	8004c7e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004c78:	69ba      	ldr	r2, [r7, #24]
 8004c7a:	429a      	cmp	r2, r3
 8004c7c:	d903      	bls.n	8004c86 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004c84:	e113      	b.n	8004eae <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c88:	2200      	movs	r2, #0
 8004c8a:	60bb      	str	r3, [r7, #8]
 8004c8c:	60fa      	str	r2, [r7, #12]
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c92:	4a84      	ldr	r2, [pc, #528]	@ (8004ea4 <UART_SetConfig+0x5c4>)
 8004c94:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c98:	b29b      	uxth	r3, r3
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	603b      	str	r3, [r7, #0]
 8004c9e:	607a      	str	r2, [r7, #4]
 8004ca0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ca4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004ca8:	f7fb fab6 	bl	8000218 <__aeabi_uldivmod>
 8004cac:	4602      	mov	r2, r0
 8004cae:	460b      	mov	r3, r1
 8004cb0:	4610      	mov	r0, r2
 8004cb2:	4619      	mov	r1, r3
 8004cb4:	f04f 0200 	mov.w	r2, #0
 8004cb8:	f04f 0300 	mov.w	r3, #0
 8004cbc:	020b      	lsls	r3, r1, #8
 8004cbe:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004cc2:	0202      	lsls	r2, r0, #8
 8004cc4:	6979      	ldr	r1, [r7, #20]
 8004cc6:	6849      	ldr	r1, [r1, #4]
 8004cc8:	0849      	lsrs	r1, r1, #1
 8004cca:	2000      	movs	r0, #0
 8004ccc:	460c      	mov	r4, r1
 8004cce:	4605      	mov	r5, r0
 8004cd0:	eb12 0804 	adds.w	r8, r2, r4
 8004cd4:	eb43 0905 	adc.w	r9, r3, r5
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	469a      	mov	sl, r3
 8004ce0:	4693      	mov	fp, r2
 8004ce2:	4652      	mov	r2, sl
 8004ce4:	465b      	mov	r3, fp
 8004ce6:	4640      	mov	r0, r8
 8004ce8:	4649      	mov	r1, r9
 8004cea:	f7fb fa95 	bl	8000218 <__aeabi_uldivmod>
 8004cee:	4602      	mov	r2, r0
 8004cf0:	460b      	mov	r3, r1
 8004cf2:	4613      	mov	r3, r2
 8004cf4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004cf6:	6a3b      	ldr	r3, [r7, #32]
 8004cf8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004cfc:	d308      	bcc.n	8004d10 <UART_SetConfig+0x430>
 8004cfe:	6a3b      	ldr	r3, [r7, #32]
 8004d00:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004d04:	d204      	bcs.n	8004d10 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	6a3a      	ldr	r2, [r7, #32]
 8004d0c:	60da      	str	r2, [r3, #12]
 8004d0e:	e0ce      	b.n	8004eae <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8004d10:	2301      	movs	r3, #1
 8004d12:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004d16:	e0ca      	b.n	8004eae <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	69db      	ldr	r3, [r3, #28]
 8004d1c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004d20:	d166      	bne.n	8004df0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8004d22:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004d26:	2b08      	cmp	r3, #8
 8004d28:	d827      	bhi.n	8004d7a <UART_SetConfig+0x49a>
 8004d2a:	a201      	add	r2, pc, #4	@ (adr r2, 8004d30 <UART_SetConfig+0x450>)
 8004d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d30:	08004d55 	.word	0x08004d55
 8004d34:	08004d5d 	.word	0x08004d5d
 8004d38:	08004d65 	.word	0x08004d65
 8004d3c:	08004d7b 	.word	0x08004d7b
 8004d40:	08004d6b 	.word	0x08004d6b
 8004d44:	08004d7b 	.word	0x08004d7b
 8004d48:	08004d7b 	.word	0x08004d7b
 8004d4c:	08004d7b 	.word	0x08004d7b
 8004d50:	08004d73 	.word	0x08004d73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d54:	f7fd fe28 	bl	80029a8 <HAL_RCC_GetPCLK1Freq>
 8004d58:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004d5a:	e014      	b.n	8004d86 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d5c:	f7fd fe3a 	bl	80029d4 <HAL_RCC_GetPCLK2Freq>
 8004d60:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004d62:	e010      	b.n	8004d86 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d64:	4b4e      	ldr	r3, [pc, #312]	@ (8004ea0 <UART_SetConfig+0x5c0>)
 8004d66:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004d68:	e00d      	b.n	8004d86 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d6a:	f7fd fdaf 	bl	80028cc <HAL_RCC_GetSysClockFreq>
 8004d6e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004d70:	e009      	b.n	8004d86 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d72:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004d76:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004d78:	e005      	b.n	8004d86 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004d84:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	f000 8090 	beq.w	8004eae <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d92:	4a44      	ldr	r2, [pc, #272]	@ (8004ea4 <UART_SetConfig+0x5c4>)
 8004d94:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004d98:	461a      	mov	r2, r3
 8004d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d9c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004da0:	005a      	lsls	r2, r3, #1
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	085b      	lsrs	r3, r3, #1
 8004da8:	441a      	add	r2, r3
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	fbb2 f3f3 	udiv	r3, r2, r3
 8004db2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004db4:	6a3b      	ldr	r3, [r7, #32]
 8004db6:	2b0f      	cmp	r3, #15
 8004db8:	d916      	bls.n	8004de8 <UART_SetConfig+0x508>
 8004dba:	6a3b      	ldr	r3, [r7, #32]
 8004dbc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004dc0:	d212      	bcs.n	8004de8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004dc2:	6a3b      	ldr	r3, [r7, #32]
 8004dc4:	b29b      	uxth	r3, r3
 8004dc6:	f023 030f 	bic.w	r3, r3, #15
 8004dca:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004dcc:	6a3b      	ldr	r3, [r7, #32]
 8004dce:	085b      	lsrs	r3, r3, #1
 8004dd0:	b29b      	uxth	r3, r3
 8004dd2:	f003 0307 	and.w	r3, r3, #7
 8004dd6:	b29a      	uxth	r2, r3
 8004dd8:	8bfb      	ldrh	r3, [r7, #30]
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	8bfa      	ldrh	r2, [r7, #30]
 8004de4:	60da      	str	r2, [r3, #12]
 8004de6:	e062      	b.n	8004eae <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8004de8:	2301      	movs	r3, #1
 8004dea:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004dee:	e05e      	b.n	8004eae <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004df0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004df4:	2b08      	cmp	r3, #8
 8004df6:	d828      	bhi.n	8004e4a <UART_SetConfig+0x56a>
 8004df8:	a201      	add	r2, pc, #4	@ (adr r2, 8004e00 <UART_SetConfig+0x520>)
 8004dfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dfe:	bf00      	nop
 8004e00:	08004e25 	.word	0x08004e25
 8004e04:	08004e2d 	.word	0x08004e2d
 8004e08:	08004e35 	.word	0x08004e35
 8004e0c:	08004e4b 	.word	0x08004e4b
 8004e10:	08004e3b 	.word	0x08004e3b
 8004e14:	08004e4b 	.word	0x08004e4b
 8004e18:	08004e4b 	.word	0x08004e4b
 8004e1c:	08004e4b 	.word	0x08004e4b
 8004e20:	08004e43 	.word	0x08004e43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e24:	f7fd fdc0 	bl	80029a8 <HAL_RCC_GetPCLK1Freq>
 8004e28:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004e2a:	e014      	b.n	8004e56 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e2c:	f7fd fdd2 	bl	80029d4 <HAL_RCC_GetPCLK2Freq>
 8004e30:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004e32:	e010      	b.n	8004e56 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e34:	4b1a      	ldr	r3, [pc, #104]	@ (8004ea0 <UART_SetConfig+0x5c0>)
 8004e36:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004e38:	e00d      	b.n	8004e56 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e3a:	f7fd fd47 	bl	80028cc <HAL_RCC_GetSysClockFreq>
 8004e3e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004e40:	e009      	b.n	8004e56 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e42:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004e46:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004e48:	e005      	b.n	8004e56 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004e54:	bf00      	nop
    }

    if (pclk != 0U)
 8004e56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d028      	beq.n	8004eae <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e60:	4a10      	ldr	r2, [pc, #64]	@ (8004ea4 <UART_SetConfig+0x5c4>)
 8004e62:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004e66:	461a      	mov	r2, r3
 8004e68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e6a:	fbb3 f2f2 	udiv	r2, r3, r2
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	085b      	lsrs	r3, r3, #1
 8004e74:	441a      	add	r2, r3
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e7e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e80:	6a3b      	ldr	r3, [r7, #32]
 8004e82:	2b0f      	cmp	r3, #15
 8004e84:	d910      	bls.n	8004ea8 <UART_SetConfig+0x5c8>
 8004e86:	6a3b      	ldr	r3, [r7, #32]
 8004e88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e8c:	d20c      	bcs.n	8004ea8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004e8e:	6a3b      	ldr	r3, [r7, #32]
 8004e90:	b29a      	uxth	r2, r3
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	60da      	str	r2, [r3, #12]
 8004e98:	e009      	b.n	8004eae <UART_SetConfig+0x5ce>
 8004e9a:	bf00      	nop
 8004e9c:	40008000 	.word	0x40008000
 8004ea0:	00f42400 	.word	0x00f42400
 8004ea4:	08005b14 	.word	0x08005b14
      }
      else
      {
        ret = HAL_ERROR;
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	2201      	movs	r2, #1
 8004eba:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004eca:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	3730      	adds	r7, #48	@ 0x30
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004ed8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b083      	sub	sp, #12
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ee4:	f003 0308 	and.w	r3, r3, #8
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d00a      	beq.n	8004f02 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	430a      	orrs	r2, r1
 8004f00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f06:	f003 0301 	and.w	r3, r3, #1
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d00a      	beq.n	8004f24 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	430a      	orrs	r2, r1
 8004f22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f28:	f003 0302 	and.w	r3, r3, #2
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d00a      	beq.n	8004f46 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	430a      	orrs	r2, r1
 8004f44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f4a:	f003 0304 	and.w	r3, r3, #4
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d00a      	beq.n	8004f68 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	430a      	orrs	r2, r1
 8004f66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f6c:	f003 0310 	and.w	r3, r3, #16
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d00a      	beq.n	8004f8a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	689b      	ldr	r3, [r3, #8]
 8004f7a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	430a      	orrs	r2, r1
 8004f88:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f8e:	f003 0320 	and.w	r3, r3, #32
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d00a      	beq.n	8004fac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	689b      	ldr	r3, [r3, #8]
 8004f9c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	430a      	orrs	r2, r1
 8004faa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d01a      	beq.n	8004fee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	430a      	orrs	r2, r1
 8004fcc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fd2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004fd6:	d10a      	bne.n	8004fee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	430a      	orrs	r2, r1
 8004fec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ff2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d00a      	beq.n	8005010 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	430a      	orrs	r2, r1
 800500e:	605a      	str	r2, [r3, #4]
  }
}
 8005010:	bf00      	nop
 8005012:	370c      	adds	r7, #12
 8005014:	46bd      	mov	sp, r7
 8005016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501a:	4770      	bx	lr

0800501c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b098      	sub	sp, #96	@ 0x60
 8005020:	af02      	add	r7, sp, #8
 8005022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2200      	movs	r2, #0
 8005028:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800502c:	f7fc f940 	bl	80012b0 <HAL_GetTick>
 8005030:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f003 0308 	and.w	r3, r3, #8
 800503c:	2b08      	cmp	r3, #8
 800503e:	d12f      	bne.n	80050a0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005040:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005044:	9300      	str	r3, [sp, #0]
 8005046:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005048:	2200      	movs	r2, #0
 800504a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800504e:	6878      	ldr	r0, [r7, #4]
 8005050:	f000 f88e 	bl	8005170 <UART_WaitOnFlagUntilTimeout>
 8005054:	4603      	mov	r3, r0
 8005056:	2b00      	cmp	r3, #0
 8005058:	d022      	beq.n	80050a0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005060:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005062:	e853 3f00 	ldrex	r3, [r3]
 8005066:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005068:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800506a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800506e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	461a      	mov	r2, r3
 8005076:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005078:	647b      	str	r3, [r7, #68]	@ 0x44
 800507a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800507c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800507e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005080:	e841 2300 	strex	r3, r2, [r1]
 8005084:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005086:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005088:	2b00      	cmp	r3, #0
 800508a:	d1e6      	bne.n	800505a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2220      	movs	r2, #32
 8005090:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2200      	movs	r2, #0
 8005098:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800509c:	2303      	movs	r3, #3
 800509e:	e063      	b.n	8005168 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f003 0304 	and.w	r3, r3, #4
 80050aa:	2b04      	cmp	r3, #4
 80050ac:	d149      	bne.n	8005142 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80050ae:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80050b2:	9300      	str	r3, [sp, #0]
 80050b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050b6:	2200      	movs	r2, #0
 80050b8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80050bc:	6878      	ldr	r0, [r7, #4]
 80050be:	f000 f857 	bl	8005170 <UART_WaitOnFlagUntilTimeout>
 80050c2:	4603      	mov	r3, r0
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d03c      	beq.n	8005142 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050d0:	e853 3f00 	ldrex	r3, [r3]
 80050d4:	623b      	str	r3, [r7, #32]
   return(result);
 80050d6:	6a3b      	ldr	r3, [r7, #32]
 80050d8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80050dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	461a      	mov	r2, r3
 80050e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80050e6:	633b      	str	r3, [r7, #48]	@ 0x30
 80050e8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050ea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80050ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80050ee:	e841 2300 	strex	r3, r2, [r1]
 80050f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80050f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d1e6      	bne.n	80050c8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	3308      	adds	r3, #8
 8005100:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005102:	693b      	ldr	r3, [r7, #16]
 8005104:	e853 3f00 	ldrex	r3, [r3]
 8005108:	60fb      	str	r3, [r7, #12]
   return(result);
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	f023 0301 	bic.w	r3, r3, #1
 8005110:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	3308      	adds	r3, #8
 8005118:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800511a:	61fa      	str	r2, [r7, #28]
 800511c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800511e:	69b9      	ldr	r1, [r7, #24]
 8005120:	69fa      	ldr	r2, [r7, #28]
 8005122:	e841 2300 	strex	r3, r2, [r1]
 8005126:	617b      	str	r3, [r7, #20]
   return(result);
 8005128:	697b      	ldr	r3, [r7, #20]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d1e5      	bne.n	80050fa <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2220      	movs	r2, #32
 8005132:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2200      	movs	r2, #0
 800513a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800513e:	2303      	movs	r3, #3
 8005140:	e012      	b.n	8005168 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2220      	movs	r2, #32
 8005146:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2220      	movs	r2, #32
 800514e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2200      	movs	r2, #0
 8005156:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2200      	movs	r2, #0
 800515c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2200      	movs	r2, #0
 8005162:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005166:	2300      	movs	r3, #0
}
 8005168:	4618      	mov	r0, r3
 800516a:	3758      	adds	r7, #88	@ 0x58
 800516c:	46bd      	mov	sp, r7
 800516e:	bd80      	pop	{r7, pc}

08005170 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b084      	sub	sp, #16
 8005174:	af00      	add	r7, sp, #0
 8005176:	60f8      	str	r0, [r7, #12]
 8005178:	60b9      	str	r1, [r7, #8]
 800517a:	603b      	str	r3, [r7, #0]
 800517c:	4613      	mov	r3, r2
 800517e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005180:	e04f      	b.n	8005222 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005182:	69bb      	ldr	r3, [r7, #24]
 8005184:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005188:	d04b      	beq.n	8005222 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800518a:	f7fc f891 	bl	80012b0 <HAL_GetTick>
 800518e:	4602      	mov	r2, r0
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	1ad3      	subs	r3, r2, r3
 8005194:	69ba      	ldr	r2, [r7, #24]
 8005196:	429a      	cmp	r2, r3
 8005198:	d302      	bcc.n	80051a0 <UART_WaitOnFlagUntilTimeout+0x30>
 800519a:	69bb      	ldr	r3, [r7, #24]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d101      	bne.n	80051a4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80051a0:	2303      	movs	r3, #3
 80051a2:	e04e      	b.n	8005242 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f003 0304 	and.w	r3, r3, #4
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d037      	beq.n	8005222 <UART_WaitOnFlagUntilTimeout+0xb2>
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	2b80      	cmp	r3, #128	@ 0x80
 80051b6:	d034      	beq.n	8005222 <UART_WaitOnFlagUntilTimeout+0xb2>
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	2b40      	cmp	r3, #64	@ 0x40
 80051bc:	d031      	beq.n	8005222 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	69db      	ldr	r3, [r3, #28]
 80051c4:	f003 0308 	and.w	r3, r3, #8
 80051c8:	2b08      	cmp	r3, #8
 80051ca:	d110      	bne.n	80051ee <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	2208      	movs	r2, #8
 80051d2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80051d4:	68f8      	ldr	r0, [r7, #12]
 80051d6:	f000 f920 	bl	800541a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	2208      	movs	r2, #8
 80051de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	2200      	movs	r2, #0
 80051e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80051ea:	2301      	movs	r3, #1
 80051ec:	e029      	b.n	8005242 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	69db      	ldr	r3, [r3, #28]
 80051f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80051f8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80051fc:	d111      	bne.n	8005222 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005206:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005208:	68f8      	ldr	r0, [r7, #12]
 800520a:	f000 f906 	bl	800541a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	2220      	movs	r2, #32
 8005212:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	2200      	movs	r2, #0
 800521a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800521e:	2303      	movs	r3, #3
 8005220:	e00f      	b.n	8005242 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	69da      	ldr	r2, [r3, #28]
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	4013      	ands	r3, r2
 800522c:	68ba      	ldr	r2, [r7, #8]
 800522e:	429a      	cmp	r2, r3
 8005230:	bf0c      	ite	eq
 8005232:	2301      	moveq	r3, #1
 8005234:	2300      	movne	r3, #0
 8005236:	b2db      	uxtb	r3, r3
 8005238:	461a      	mov	r2, r3
 800523a:	79fb      	ldrb	r3, [r7, #7]
 800523c:	429a      	cmp	r2, r3
 800523e:	d0a0      	beq.n	8005182 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005240:	2300      	movs	r3, #0
}
 8005242:	4618      	mov	r0, r3
 8005244:	3710      	adds	r7, #16
 8005246:	46bd      	mov	sp, r7
 8005248:	bd80      	pop	{r7, pc}
	...

0800524c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b096      	sub	sp, #88	@ 0x58
 8005250:	af00      	add	r7, sp, #0
 8005252:	60f8      	str	r0, [r7, #12]
 8005254:	60b9      	str	r1, [r7, #8]
 8005256:	4613      	mov	r3, r2
 8005258:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	68ba      	ldr	r2, [r7, #8]
 800525e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	88fa      	ldrh	r2, [r7, #6]
 8005264:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	2200      	movs	r2, #0
 800526c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	2222      	movs	r2, #34	@ 0x22
 8005274:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800527e:	2b00      	cmp	r3, #0
 8005280:	d02d      	beq.n	80052de <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005288:	4a40      	ldr	r2, [pc, #256]	@ (800538c <UART_Start_Receive_DMA+0x140>)
 800528a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005292:	4a3f      	ldr	r2, [pc, #252]	@ (8005390 <UART_Start_Receive_DMA+0x144>)
 8005294:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800529c:	4a3d      	ldr	r2, [pc, #244]	@ (8005394 <UART_Start_Receive_DMA+0x148>)
 800529e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80052a6:	2200      	movs	r2, #0
 80052a8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	3324      	adds	r3, #36	@ 0x24
 80052b6:	4619      	mov	r1, r3
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052bc:	461a      	mov	r2, r3
 80052be:	88fb      	ldrh	r3, [r7, #6]
 80052c0:	f7fc f9ba 	bl	8001638 <HAL_DMA_Start_IT>
 80052c4:	4603      	mov	r3, r0
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d009      	beq.n	80052de <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	2210      	movs	r2, #16
 80052ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	2220      	movs	r2, #32
 80052d6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 80052da:	2301      	movs	r3, #1
 80052dc:	e051      	b.n	8005382 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	691b      	ldr	r3, [r3, #16]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d018      	beq.n	8005318 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80052ee:	e853 3f00 	ldrex	r3, [r3]
 80052f2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80052f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80052fa:	657b      	str	r3, [r7, #84]	@ 0x54
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	461a      	mov	r2, r3
 8005302:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005304:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005306:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005308:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800530a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800530c:	e841 2300 	strex	r3, r2, [r1]
 8005310:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8005312:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005314:	2b00      	cmp	r3, #0
 8005316:	d1e6      	bne.n	80052e6 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	3308      	adds	r3, #8
 800531e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005320:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005322:	e853 3f00 	ldrex	r3, [r3]
 8005326:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800532a:	f043 0301 	orr.w	r3, r3, #1
 800532e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	3308      	adds	r3, #8
 8005336:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005338:	637a      	str	r2, [r7, #52]	@ 0x34
 800533a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800533c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800533e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005340:	e841 2300 	strex	r3, r2, [r1]
 8005344:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8005346:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005348:	2b00      	cmp	r3, #0
 800534a:	d1e5      	bne.n	8005318 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	3308      	adds	r3, #8
 8005352:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	e853 3f00 	ldrex	r3, [r3]
 800535a:	613b      	str	r3, [r7, #16]
   return(result);
 800535c:	693b      	ldr	r3, [r7, #16]
 800535e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005362:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	3308      	adds	r3, #8
 800536a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800536c:	623a      	str	r2, [r7, #32]
 800536e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005370:	69f9      	ldr	r1, [r7, #28]
 8005372:	6a3a      	ldr	r2, [r7, #32]
 8005374:	e841 2300 	strex	r3, r2, [r1]
 8005378:	61bb      	str	r3, [r7, #24]
   return(result);
 800537a:	69bb      	ldr	r3, [r7, #24]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d1e5      	bne.n	800534c <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8005380:	2300      	movs	r3, #0
}
 8005382:	4618      	mov	r0, r3
 8005384:	3758      	adds	r7, #88	@ 0x58
 8005386:	46bd      	mov	sp, r7
 8005388:	bd80      	pop	{r7, pc}
 800538a:	bf00      	nop
 800538c:	080055a5 	.word	0x080055a5
 8005390:	080056d9 	.word	0x080056d9
 8005394:	0800571f 	.word	0x0800571f

08005398 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005398:	b480      	push	{r7}
 800539a:	b08f      	sub	sp, #60	@ 0x3c
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053a6:	6a3b      	ldr	r3, [r7, #32]
 80053a8:	e853 3f00 	ldrex	r3, [r3]
 80053ac:	61fb      	str	r3, [r7, #28]
   return(result);
 80053ae:	69fb      	ldr	r3, [r7, #28]
 80053b0:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80053b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	461a      	mov	r2, r3
 80053bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053be:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80053c0:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053c2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80053c4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80053c6:	e841 2300 	strex	r3, r2, [r1]
 80053ca:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80053cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d1e6      	bne.n	80053a0 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	3308      	adds	r3, #8
 80053d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	e853 3f00 	ldrex	r3, [r3]
 80053e0:	60bb      	str	r3, [r7, #8]
   return(result);
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80053e8:	633b      	str	r3, [r7, #48]	@ 0x30
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	3308      	adds	r3, #8
 80053f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80053f2:	61ba      	str	r2, [r7, #24]
 80053f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053f6:	6979      	ldr	r1, [r7, #20]
 80053f8:	69ba      	ldr	r2, [r7, #24]
 80053fa:	e841 2300 	strex	r3, r2, [r1]
 80053fe:	613b      	str	r3, [r7, #16]
   return(result);
 8005400:	693b      	ldr	r3, [r7, #16]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d1e5      	bne.n	80053d2 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2220      	movs	r2, #32
 800540a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800540e:	bf00      	nop
 8005410:	373c      	adds	r7, #60	@ 0x3c
 8005412:	46bd      	mov	sp, r7
 8005414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005418:	4770      	bx	lr

0800541a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800541a:	b480      	push	{r7}
 800541c:	b095      	sub	sp, #84	@ 0x54
 800541e:	af00      	add	r7, sp, #0
 8005420:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005428:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800542a:	e853 3f00 	ldrex	r3, [r3]
 800542e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005430:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005432:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005436:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	461a      	mov	r2, r3
 800543e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005440:	643b      	str	r3, [r7, #64]	@ 0x40
 8005442:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005444:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005446:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005448:	e841 2300 	strex	r3, r2, [r1]
 800544c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800544e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005450:	2b00      	cmp	r3, #0
 8005452:	d1e6      	bne.n	8005422 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	3308      	adds	r3, #8
 800545a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800545c:	6a3b      	ldr	r3, [r7, #32]
 800545e:	e853 3f00 	ldrex	r3, [r3]
 8005462:	61fb      	str	r3, [r7, #28]
   return(result);
 8005464:	69fb      	ldr	r3, [r7, #28]
 8005466:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800546a:	f023 0301 	bic.w	r3, r3, #1
 800546e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	3308      	adds	r3, #8
 8005476:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005478:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800547a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800547c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800547e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005480:	e841 2300 	strex	r3, r2, [r1]
 8005484:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005488:	2b00      	cmp	r3, #0
 800548a:	d1e3      	bne.n	8005454 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005490:	2b01      	cmp	r3, #1
 8005492:	d118      	bne.n	80054c6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	e853 3f00 	ldrex	r3, [r3]
 80054a0:	60bb      	str	r3, [r7, #8]
   return(result);
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	f023 0310 	bic.w	r3, r3, #16
 80054a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	461a      	mov	r2, r3
 80054b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80054b2:	61bb      	str	r3, [r7, #24]
 80054b4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054b6:	6979      	ldr	r1, [r7, #20]
 80054b8:	69ba      	ldr	r2, [r7, #24]
 80054ba:	e841 2300 	strex	r3, r2, [r1]
 80054be:	613b      	str	r3, [r7, #16]
   return(result);
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d1e6      	bne.n	8005494 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2220      	movs	r2, #32
 80054ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2200      	movs	r2, #0
 80054d2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2200      	movs	r2, #0
 80054d8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80054da:	bf00      	nop
 80054dc:	3754      	adds	r7, #84	@ 0x54
 80054de:	46bd      	mov	sp, r7
 80054e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e4:	4770      	bx	lr

080054e6 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80054e6:	b580      	push	{r7, lr}
 80054e8:	b090      	sub	sp, #64	@ 0x40
 80054ea:	af00      	add	r7, sp, #0
 80054ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054f2:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f003 0320 	and.w	r3, r3, #32
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d137      	bne.n	8005572 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8005502:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005504:	2200      	movs	r2, #0
 8005506:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800550a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	3308      	adds	r3, #8
 8005510:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005514:	e853 3f00 	ldrex	r3, [r3]
 8005518:	623b      	str	r3, [r7, #32]
   return(result);
 800551a:	6a3b      	ldr	r3, [r7, #32]
 800551c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005520:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005522:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	3308      	adds	r3, #8
 8005528:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800552a:	633a      	str	r2, [r7, #48]	@ 0x30
 800552c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800552e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005530:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005532:	e841 2300 	strex	r3, r2, [r1]
 8005536:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005538:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800553a:	2b00      	cmp	r3, #0
 800553c:	d1e5      	bne.n	800550a <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800553e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005544:	693b      	ldr	r3, [r7, #16]
 8005546:	e853 3f00 	ldrex	r3, [r3]
 800554a:	60fb      	str	r3, [r7, #12]
   return(result);
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005552:	637b      	str	r3, [r7, #52]	@ 0x34
 8005554:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	461a      	mov	r2, r3
 800555a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800555c:	61fb      	str	r3, [r7, #28]
 800555e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005560:	69b9      	ldr	r1, [r7, #24]
 8005562:	69fa      	ldr	r2, [r7, #28]
 8005564:	e841 2300 	strex	r3, r2, [r1]
 8005568:	617b      	str	r3, [r7, #20]
   return(result);
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d1e6      	bne.n	800553e <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005570:	e004      	b.n	800557c <UART_DMATransmitCplt+0x96>
    huart->TxCpltCallback(huart);
 8005572:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005574:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005578:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800557a:	4798      	blx	r3
}
 800557c:	bf00      	nop
 800557e:	3740      	adds	r7, #64	@ 0x40
 8005580:	46bd      	mov	sp, r7
 8005582:	bd80      	pop	{r7, pc}

08005584 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b084      	sub	sp, #16
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005590:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005598:	68f8      	ldr	r0, [r7, #12]
 800559a:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800559c:	bf00      	nop
 800559e:	3710      	adds	r7, #16
 80055a0:	46bd      	mov	sp, r7
 80055a2:	bd80      	pop	{r7, pc}

080055a4 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b09c      	sub	sp, #112	@ 0x70
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055b0:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f003 0320 	and.w	r3, r3, #32
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d171      	bne.n	80056a4 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 80055c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80055c2:	2200      	movs	r2, #0
 80055c4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80055c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80055d0:	e853 3f00 	ldrex	r3, [r3]
 80055d4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80055d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80055d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80055dc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80055de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	461a      	mov	r2, r3
 80055e4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80055e6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80055e8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ea:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80055ec:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80055ee:	e841 2300 	strex	r3, r2, [r1]
 80055f2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80055f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d1e6      	bne.n	80055c8 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	3308      	adds	r3, #8
 8005600:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005602:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005604:	e853 3f00 	ldrex	r3, [r3]
 8005608:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800560a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800560c:	f023 0301 	bic.w	r3, r3, #1
 8005610:	667b      	str	r3, [r7, #100]	@ 0x64
 8005612:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	3308      	adds	r3, #8
 8005618:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800561a:	647a      	str	r2, [r7, #68]	@ 0x44
 800561c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800561e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005620:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005622:	e841 2300 	strex	r3, r2, [r1]
 8005626:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005628:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800562a:	2b00      	cmp	r3, #0
 800562c:	d1e5      	bne.n	80055fa <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800562e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	3308      	adds	r3, #8
 8005634:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005638:	e853 3f00 	ldrex	r3, [r3]
 800563c:	623b      	str	r3, [r7, #32]
   return(result);
 800563e:	6a3b      	ldr	r3, [r7, #32]
 8005640:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005644:	663b      	str	r3, [r7, #96]	@ 0x60
 8005646:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	3308      	adds	r3, #8
 800564c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800564e:	633a      	str	r2, [r7, #48]	@ 0x30
 8005650:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005652:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005654:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005656:	e841 2300 	strex	r3, r2, [r1]
 800565a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800565c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800565e:	2b00      	cmp	r3, #0
 8005660:	d1e5      	bne.n	800562e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005662:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005664:	2220      	movs	r2, #32
 8005666:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800566a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800566c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800566e:	2b01      	cmp	r3, #1
 8005670:	d118      	bne.n	80056a4 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005672:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005678:	693b      	ldr	r3, [r7, #16]
 800567a:	e853 3f00 	ldrex	r3, [r3]
 800567e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	f023 0310 	bic.w	r3, r3, #16
 8005686:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005688:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	461a      	mov	r2, r3
 800568e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005690:	61fb      	str	r3, [r7, #28]
 8005692:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005694:	69b9      	ldr	r1, [r7, #24]
 8005696:	69fa      	ldr	r2, [r7, #28]
 8005698:	e841 2300 	strex	r3, r2, [r1]
 800569c:	617b      	str	r3, [r7, #20]
   return(result);
 800569e:	697b      	ldr	r3, [r7, #20]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d1e6      	bne.n	8005672 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80056a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80056a6:	2200      	movs	r2, #0
 80056a8:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80056ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80056ae:	2b01      	cmp	r3, #1
 80056b0:	d109      	bne.n	80056c6 <UART_DMAReceiveCplt+0x122>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 80056b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80056b4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80056b8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80056ba:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 80056be:	4611      	mov	r1, r2
 80056c0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80056c2:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80056c4:	e004      	b.n	80056d0 <UART_DMAReceiveCplt+0x12c>
    huart->RxCpltCallback(huart);
 80056c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80056c8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80056cc:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80056ce:	4798      	blx	r3
}
 80056d0:	bf00      	nop
 80056d2:	3770      	adds	r7, #112	@ 0x70
 80056d4:	46bd      	mov	sp, r7
 80056d6:	bd80      	pop	{r7, pc}

080056d8 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b084      	sub	sp, #16
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056e4:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	2201      	movs	r2, #1
 80056ea:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80056f0:	2b01      	cmp	r3, #1
 80056f2:	d10b      	bne.n	800570c <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80056fa:	68fa      	ldr	r2, [r7, #12]
 80056fc:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 8005700:	0852      	lsrs	r2, r2, #1
 8005702:	b292      	uxth	r2, r2
 8005704:	4611      	mov	r1, r2
 8005706:	68f8      	ldr	r0, [r7, #12]
 8005708:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800570a:	e004      	b.n	8005716 <UART_DMARxHalfCplt+0x3e>
    huart->RxHalfCpltCallback(huart);
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005712:	68f8      	ldr	r0, [r7, #12]
 8005714:	4798      	blx	r3
}
 8005716:	bf00      	nop
 8005718:	3710      	adds	r7, #16
 800571a:	46bd      	mov	sp, r7
 800571c:	bd80      	pop	{r7, pc}

0800571e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800571e:	b580      	push	{r7, lr}
 8005720:	b086      	sub	sp, #24
 8005722:	af00      	add	r7, sp, #0
 8005724:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800572a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800572c:	697b      	ldr	r3, [r7, #20]
 800572e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005732:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800573a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800573c:	697b      	ldr	r3, [r7, #20]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	689b      	ldr	r3, [r3, #8]
 8005742:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005746:	2b80      	cmp	r3, #128	@ 0x80
 8005748:	d109      	bne.n	800575e <UART_DMAError+0x40>
 800574a:	693b      	ldr	r3, [r7, #16]
 800574c:	2b21      	cmp	r3, #33	@ 0x21
 800574e:	d106      	bne.n	800575e <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8005750:	697b      	ldr	r3, [r7, #20]
 8005752:	2200      	movs	r2, #0
 8005754:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8005758:	6978      	ldr	r0, [r7, #20]
 800575a:	f7ff fe1d 	bl	8005398 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	689b      	ldr	r3, [r3, #8]
 8005764:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005768:	2b40      	cmp	r3, #64	@ 0x40
 800576a:	d109      	bne.n	8005780 <UART_DMAError+0x62>
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	2b22      	cmp	r3, #34	@ 0x22
 8005770:	d106      	bne.n	8005780 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	2200      	movs	r2, #0
 8005776:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800577a:	6978      	ldr	r0, [r7, #20]
 800577c:	f7ff fe4d 	bl	800541a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005786:	f043 0210 	orr.w	r2, r3, #16
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005796:	6978      	ldr	r0, [r7, #20]
 8005798:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800579a:	bf00      	nop
 800579c:	3718      	adds	r7, #24
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}

080057a2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80057a2:	b580      	push	{r7, lr}
 80057a4:	b084      	sub	sp, #16
 80057a6:	af00      	add	r7, sp, #0
 80057a8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057ae:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	2200      	movs	r2, #0
 80057b4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	2200      	movs	r2, #0
 80057bc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80057c6:	68f8      	ldr	r0, [r7, #12]
 80057c8:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80057ca:	bf00      	nop
 80057cc:	3710      	adds	r7, #16
 80057ce:	46bd      	mov	sp, r7
 80057d0:	bd80      	pop	{r7, pc}

080057d2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80057d2:	b580      	push	{r7, lr}
 80057d4:	b088      	sub	sp, #32
 80057d6:	af00      	add	r7, sp, #0
 80057d8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	e853 3f00 	ldrex	r3, [r3]
 80057e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80057ee:	61fb      	str	r3, [r7, #28]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	461a      	mov	r2, r3
 80057f6:	69fb      	ldr	r3, [r7, #28]
 80057f8:	61bb      	str	r3, [r7, #24]
 80057fa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057fc:	6979      	ldr	r1, [r7, #20]
 80057fe:	69ba      	ldr	r2, [r7, #24]
 8005800:	e841 2300 	strex	r3, r2, [r1]
 8005804:	613b      	str	r3, [r7, #16]
   return(result);
 8005806:	693b      	ldr	r3, [r7, #16]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d1e6      	bne.n	80057da <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2220      	movs	r2, #32
 8005810:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2200      	movs	r2, #0
 8005818:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005820:	6878      	ldr	r0, [r7, #4]
 8005822:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005824:	bf00      	nop
 8005826:	3720      	adds	r7, #32
 8005828:	46bd      	mov	sp, r7
 800582a:	bd80      	pop	{r7, pc}

0800582c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800582c:	b480      	push	{r7}
 800582e:	b083      	sub	sp, #12
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005834:	bf00      	nop
 8005836:	370c      	adds	r7, #12
 8005838:	46bd      	mov	sp, r7
 800583a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583e:	4770      	bx	lr

08005840 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005840:	b480      	push	{r7}
 8005842:	b083      	sub	sp, #12
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8005848:	bf00      	nop
 800584a:	370c      	adds	r7, #12
 800584c:	46bd      	mov	sp, r7
 800584e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005852:	4770      	bx	lr

08005854 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005854:	b480      	push	{r7}
 8005856:	b083      	sub	sp, #12
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800585c:	bf00      	nop
 800585e:	370c      	adds	r7, #12
 8005860:	46bd      	mov	sp, r7
 8005862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005866:	4770      	bx	lr

08005868 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005868:	b480      	push	{r7}
 800586a:	b085      	sub	sp, #20
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005876:	2b01      	cmp	r3, #1
 8005878:	d101      	bne.n	800587e <HAL_UARTEx_DisableFifoMode+0x16>
 800587a:	2302      	movs	r3, #2
 800587c:	e027      	b.n	80058ce <HAL_UARTEx_DisableFifoMode+0x66>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2201      	movs	r2, #1
 8005882:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2224      	movs	r2, #36	@ 0x24
 800588a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	681a      	ldr	r2, [r3, #0]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f022 0201 	bic.w	r2, r2, #1
 80058a4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80058ac:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2200      	movs	r2, #0
 80058b2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	68fa      	ldr	r2, [r7, #12]
 80058ba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2220      	movs	r2, #32
 80058c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2200      	movs	r2, #0
 80058c8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80058cc:	2300      	movs	r3, #0
}
 80058ce:	4618      	mov	r0, r3
 80058d0:	3714      	adds	r7, #20
 80058d2:	46bd      	mov	sp, r7
 80058d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d8:	4770      	bx	lr

080058da <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80058da:	b580      	push	{r7, lr}
 80058dc:	b084      	sub	sp, #16
 80058de:	af00      	add	r7, sp, #0
 80058e0:	6078      	str	r0, [r7, #4]
 80058e2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80058ea:	2b01      	cmp	r3, #1
 80058ec:	d101      	bne.n	80058f2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80058ee:	2302      	movs	r3, #2
 80058f0:	e02d      	b.n	800594e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2201      	movs	r2, #1
 80058f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2224      	movs	r2, #36	@ 0x24
 80058fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	681a      	ldr	r2, [r3, #0]
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f022 0201 	bic.w	r2, r2, #1
 8005918:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	689b      	ldr	r3, [r3, #8]
 8005920:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	683a      	ldr	r2, [r7, #0]
 800592a:	430a      	orrs	r2, r1
 800592c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	f000 f850 	bl	80059d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	68fa      	ldr	r2, [r7, #12]
 800593a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2220      	movs	r2, #32
 8005940:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2200      	movs	r2, #0
 8005948:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800594c:	2300      	movs	r3, #0
}
 800594e:	4618      	mov	r0, r3
 8005950:	3710      	adds	r7, #16
 8005952:	46bd      	mov	sp, r7
 8005954:	bd80      	pop	{r7, pc}

08005956 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005956:	b580      	push	{r7, lr}
 8005958:	b084      	sub	sp, #16
 800595a:	af00      	add	r7, sp, #0
 800595c:	6078      	str	r0, [r7, #4]
 800595e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005966:	2b01      	cmp	r3, #1
 8005968:	d101      	bne.n	800596e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800596a:	2302      	movs	r3, #2
 800596c:	e02d      	b.n	80059ca <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2201      	movs	r2, #1
 8005972:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2224      	movs	r2, #36	@ 0x24
 800597a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	681a      	ldr	r2, [r3, #0]
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f022 0201 	bic.w	r2, r2, #1
 8005994:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	689b      	ldr	r3, [r3, #8]
 800599c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	683a      	ldr	r2, [r7, #0]
 80059a6:	430a      	orrs	r2, r1
 80059a8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f000 f812 	bl	80059d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	68fa      	ldr	r2, [r7, #12]
 80059b6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2220      	movs	r2, #32
 80059bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2200      	movs	r2, #0
 80059c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80059c8:	2300      	movs	r3, #0
}
 80059ca:	4618      	mov	r0, r3
 80059cc:	3710      	adds	r7, #16
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd80      	pop	{r7, pc}
	...

080059d4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b085      	sub	sp, #20
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d108      	bne.n	80059f6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2201      	movs	r2, #1
 80059e8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2201      	movs	r2, #1
 80059f0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80059f4:	e031      	b.n	8005a5a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80059f6:	2308      	movs	r3, #8
 80059f8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80059fa:	2308      	movs	r3, #8
 80059fc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	689b      	ldr	r3, [r3, #8]
 8005a04:	0e5b      	lsrs	r3, r3, #25
 8005a06:	b2db      	uxtb	r3, r3
 8005a08:	f003 0307 	and.w	r3, r3, #7
 8005a0c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	689b      	ldr	r3, [r3, #8]
 8005a14:	0f5b      	lsrs	r3, r3, #29
 8005a16:	b2db      	uxtb	r3, r3
 8005a18:	f003 0307 	and.w	r3, r3, #7
 8005a1c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005a1e:	7bbb      	ldrb	r3, [r7, #14]
 8005a20:	7b3a      	ldrb	r2, [r7, #12]
 8005a22:	4911      	ldr	r1, [pc, #68]	@ (8005a68 <UARTEx_SetNbDataToProcess+0x94>)
 8005a24:	5c8a      	ldrb	r2, [r1, r2]
 8005a26:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005a2a:	7b3a      	ldrb	r2, [r7, #12]
 8005a2c:	490f      	ldr	r1, [pc, #60]	@ (8005a6c <UARTEx_SetNbDataToProcess+0x98>)
 8005a2e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005a30:	fb93 f3f2 	sdiv	r3, r3, r2
 8005a34:	b29a      	uxth	r2, r3
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005a3c:	7bfb      	ldrb	r3, [r7, #15]
 8005a3e:	7b7a      	ldrb	r2, [r7, #13]
 8005a40:	4909      	ldr	r1, [pc, #36]	@ (8005a68 <UARTEx_SetNbDataToProcess+0x94>)
 8005a42:	5c8a      	ldrb	r2, [r1, r2]
 8005a44:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005a48:	7b7a      	ldrb	r2, [r7, #13]
 8005a4a:	4908      	ldr	r1, [pc, #32]	@ (8005a6c <UARTEx_SetNbDataToProcess+0x98>)
 8005a4c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005a4e:	fb93 f3f2 	sdiv	r3, r3, r2
 8005a52:	b29a      	uxth	r2, r3
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005a5a:	bf00      	nop
 8005a5c:	3714      	adds	r7, #20
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a64:	4770      	bx	lr
 8005a66:	bf00      	nop
 8005a68:	08005b2c 	.word	0x08005b2c
 8005a6c:	08005b34 	.word	0x08005b34

08005a70 <memset>:
 8005a70:	4402      	add	r2, r0
 8005a72:	4603      	mov	r3, r0
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d100      	bne.n	8005a7a <memset+0xa>
 8005a78:	4770      	bx	lr
 8005a7a:	f803 1b01 	strb.w	r1, [r3], #1
 8005a7e:	e7f9      	b.n	8005a74 <memset+0x4>

08005a80 <__libc_init_array>:
 8005a80:	b570      	push	{r4, r5, r6, lr}
 8005a82:	4d0d      	ldr	r5, [pc, #52]	@ (8005ab8 <__libc_init_array+0x38>)
 8005a84:	4c0d      	ldr	r4, [pc, #52]	@ (8005abc <__libc_init_array+0x3c>)
 8005a86:	1b64      	subs	r4, r4, r5
 8005a88:	10a4      	asrs	r4, r4, #2
 8005a8a:	2600      	movs	r6, #0
 8005a8c:	42a6      	cmp	r6, r4
 8005a8e:	d109      	bne.n	8005aa4 <__libc_init_array+0x24>
 8005a90:	4d0b      	ldr	r5, [pc, #44]	@ (8005ac0 <__libc_init_array+0x40>)
 8005a92:	4c0c      	ldr	r4, [pc, #48]	@ (8005ac4 <__libc_init_array+0x44>)
 8005a94:	f000 f826 	bl	8005ae4 <_init>
 8005a98:	1b64      	subs	r4, r4, r5
 8005a9a:	10a4      	asrs	r4, r4, #2
 8005a9c:	2600      	movs	r6, #0
 8005a9e:	42a6      	cmp	r6, r4
 8005aa0:	d105      	bne.n	8005aae <__libc_init_array+0x2e>
 8005aa2:	bd70      	pop	{r4, r5, r6, pc}
 8005aa4:	f855 3b04 	ldr.w	r3, [r5], #4
 8005aa8:	4798      	blx	r3
 8005aaa:	3601      	adds	r6, #1
 8005aac:	e7ee      	b.n	8005a8c <__libc_init_array+0xc>
 8005aae:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ab2:	4798      	blx	r3
 8005ab4:	3601      	adds	r6, #1
 8005ab6:	e7f2      	b.n	8005a9e <__libc_init_array+0x1e>
 8005ab8:	08005b44 	.word	0x08005b44
 8005abc:	08005b44 	.word	0x08005b44
 8005ac0:	08005b44 	.word	0x08005b44
 8005ac4:	08005b48 	.word	0x08005b48

08005ac8 <memcpy>:
 8005ac8:	440a      	add	r2, r1
 8005aca:	4291      	cmp	r1, r2
 8005acc:	f100 33ff 	add.w	r3, r0, #4294967295
 8005ad0:	d100      	bne.n	8005ad4 <memcpy+0xc>
 8005ad2:	4770      	bx	lr
 8005ad4:	b510      	push	{r4, lr}
 8005ad6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005ada:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005ade:	4291      	cmp	r1, r2
 8005ae0:	d1f9      	bne.n	8005ad6 <memcpy+0xe>
 8005ae2:	bd10      	pop	{r4, pc}

08005ae4 <_init>:
 8005ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ae6:	bf00      	nop
 8005ae8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005aea:	bc08      	pop	{r3}
 8005aec:	469e      	mov	lr, r3
 8005aee:	4770      	bx	lr

08005af0 <_fini>:
 8005af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005af2:	bf00      	nop
 8005af4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005af6:	bc08      	pop	{r3}
 8005af8:	469e      	mov	lr, r3
 8005afa:	4770      	bx	lr
